
gacek.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003280  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000dc  20000000  080035b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a34  200000dc  08003694  000200dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000b10  08003694  00020b10  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   000153d8  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a4e  00000000  00000000  000354dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c9ce  00000000  00000000  00037f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001110  00000000  00000000  00044900  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010a0  00000000  00000000  00045a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00016846  00000000  00000000  00046ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d31c  00000000  00000000  0005d2f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00077fc0  00000000  00000000  0006a612  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000e25d2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000036f0  00000000  00000000  000e2650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003374 	.word	0x08003374

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	08003374 	.word	0x08003374

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000608:	b510      	push	{r4, lr}
 800060a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <HAL_InitTick+0x40>)
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000614:	fbb3 f3f0 	udiv	r3, r3, r0
 8000618:	4a0c      	ldr	r2, [pc, #48]	; (800064c <HAL_InitTick+0x44>)
 800061a:	6810      	ldr	r0, [r2, #0]
 800061c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000620:	f000 f948 	bl	80008b4 <HAL_SYSTICK_Config>
 8000624:	b968      	cbnz	r0, 8000642 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000626:	2c0f      	cmp	r4, #15
 8000628:	d901      	bls.n	800062e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800062a:	2001      	movs	r0, #1
 800062c:	e00a      	b.n	8000644 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800062e:	2200      	movs	r2, #0
 8000630:	4621      	mov	r1, r4
 8000632:	f04f 30ff 	mov.w	r0, #4294967295
 8000636:	f000 f8fb 	bl	8000830 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800063a:	4b03      	ldr	r3, [pc, #12]	; (8000648 <HAL_InitTick+0x40>)
 800063c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 800063e:	2000      	movs	r0, #0
 8000640:	e000      	b.n	8000644 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000642:	2001      	movs	r0, #1
}
 8000644:	bd10      	pop	{r4, pc}
 8000646:	bf00      	nop
 8000648:	20000000 	.word	0x20000000
 800064c:	20000074 	.word	0x20000074

08000650 <HAL_Init>:
{
 8000650:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_Init+0x20>)
 8000654:	6813      	ldr	r3, [r2, #0]
 8000656:	f043 0310 	orr.w	r3, r3, #16
 800065a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065c:	2003      	movs	r0, #3
 800065e:	f000 f8d5 	bl	800080c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff ffd0 	bl	8000608 <HAL_InitTick>
  HAL_MspInit();
 8000668:	f001 fc80 	bl	8001f6c <HAL_MspInit>
}
 800066c:	2000      	movs	r0, #0
 800066e:	bd08      	pop	{r3, pc}
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <HAL_IncTick+0x10>)
 8000676:	6811      	ldr	r1, [r2, #0]
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <HAL_IncTick+0x14>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	440b      	add	r3, r1
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	200009bc 	.word	0x200009bc
 8000688:	20000000 	.word	0x20000000

0800068c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800068c:	4b01      	ldr	r3, [pc, #4]	; (8000694 <HAL_GetTick+0x8>)
 800068e:	6818      	ldr	r0, [r3, #0]
}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	200009bc 	.word	0x200009bc

08000698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000698:	b538      	push	{r3, r4, r5, lr}
 800069a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff fff6 	bl	800068c <HAL_GetTick>
 80006a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80006a6:	d002      	beq.n	80006ae <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <HAL_Delay+0x24>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ae:	f7ff ffed 	bl	800068c <HAL_GetTick>
 80006b2:	1b40      	subs	r0, r0, r5
 80006b4:	42a0      	cmp	r0, r4
 80006b6:	d3fa      	bcc.n	80006ae <HAL_Delay+0x16>
  {
  }
}
 80006b8:	bd38      	pop	{r3, r4, r5, pc}
 80006ba:	bf00      	nop
 80006bc:	20000000 	.word	0x20000000

080006c0 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006c0:	2800      	cmp	r0, #0
 80006c2:	f000 80a1 	beq.w	8000808 <HAL_CAN_Init+0x148>
{
 80006c6:	b538      	push	{r3, r4, r5, lr}
 80006c8:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006ca:	f890 3020 	ldrb.w	r3, [r0, #32]
 80006ce:	b1d3      	cbz	r3, 8000706 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006d0:	6822      	ldr	r2, [r4, #0]
 80006d2:	6813      	ldr	r3, [r2, #0]
 80006d4:	f023 0302 	bic.w	r3, r3, #2
 80006d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006da:	f7ff ffd7 	bl	800068c <HAL_GetTick>
 80006de:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006e0:	6823      	ldr	r3, [r4, #0]
 80006e2:	685a      	ldr	r2, [r3, #4]
 80006e4:	f012 0f02 	tst.w	r2, #2
 80006e8:	d010      	beq.n	800070c <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006ea:	f7ff ffcf 	bl	800068c <HAL_GetTick>
 80006ee:	1b40      	subs	r0, r0, r5
 80006f0:	280a      	cmp	r0, #10
 80006f2:	d9f5      	bls.n	80006e0 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fa:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006fc:	2305      	movs	r3, #5
 80006fe:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000702:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000704:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000706:	f001 fc53 	bl	8001fb0 <HAL_CAN_MspInit>
 800070a:	e7e1      	b.n	80006d0 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	f042 0201 	orr.w	r2, r2, #1
 8000712:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000714:	f7ff ffba 	bl	800068c <HAL_GetTick>
 8000718:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	685a      	ldr	r2, [r3, #4]
 800071e:	f012 0f01 	tst.w	r2, #1
 8000722:	d10d      	bne.n	8000740 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000724:	f7ff ffb2 	bl	800068c <HAL_GetTick>
 8000728:	1b40      	subs	r0, r0, r5
 800072a:	280a      	cmp	r0, #10
 800072c:	d9f5      	bls.n	800071a <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800072e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000736:	2305      	movs	r3, #5
 8000738:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 800073c:	2001      	movs	r0, #1
 800073e:	e7e1      	b.n	8000704 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000740:	7e22      	ldrb	r2, [r4, #24]
 8000742:	2a01      	cmp	r2, #1
 8000744:	d03d      	beq.n	80007c2 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800074c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800074e:	7e63      	ldrb	r3, [r4, #25]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d03b      	beq.n	80007cc <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000754:	6822      	ldr	r2, [r4, #0]
 8000756:	6813      	ldr	r3, [r2, #0]
 8000758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800075c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800075e:	7ea3      	ldrb	r3, [r4, #26]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d039      	beq.n	80007d8 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000764:	6822      	ldr	r2, [r4, #0]
 8000766:	6813      	ldr	r3, [r2, #0]
 8000768:	f023 0320 	bic.w	r3, r3, #32
 800076c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800076e:	7ee3      	ldrb	r3, [r4, #27]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d037      	beq.n	80007e4 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000774:	6822      	ldr	r2, [r4, #0]
 8000776:	6813      	ldr	r3, [r2, #0]
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800077e:	7f23      	ldrb	r3, [r4, #28]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d035      	beq.n	80007f0 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000784:	6822      	ldr	r2, [r4, #0]
 8000786:	6813      	ldr	r3, [r2, #0]
 8000788:	f023 0308 	bic.w	r3, r3, #8
 800078c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800078e:	7f63      	ldrb	r3, [r4, #29]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d033      	beq.n	80007fc <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000794:	6822      	ldr	r2, [r4, #0]
 8000796:	6813      	ldr	r3, [r2, #0]
 8000798:	f023 0304 	bic.w	r3, r3, #4
 800079c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800079e:	68a3      	ldr	r3, [r4, #8]
 80007a0:	68e2      	ldr	r2, [r4, #12]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	6922      	ldr	r2, [r4, #16]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	6962      	ldr	r2, [r4, #20]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	6862      	ldr	r2, [r4, #4]
 80007ae:	3a01      	subs	r2, #1
 80007b0:	6821      	ldr	r1, [r4, #0]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007b6:	2000      	movs	r0, #0
 80007b8:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80007ba:	2301      	movs	r3, #1
 80007bc:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 80007c0:	e7a0      	b.n	8000704 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	e7c0      	b.n	800074e <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007cc:	6822      	ldr	r2, [r4, #0]
 80007ce:	6813      	ldr	r3, [r2, #0]
 80007d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	e7c2      	b.n	800075e <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007d8:	6822      	ldr	r2, [r4, #0]
 80007da:	6813      	ldr	r3, [r2, #0]
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e7c4      	b.n	800076e <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007e4:	6822      	ldr	r2, [r4, #0]
 80007e6:	6813      	ldr	r3, [r2, #0]
 80007e8:	f023 0310 	bic.w	r3, r3, #16
 80007ec:	6013      	str	r3, [r2, #0]
 80007ee:	e7c6      	b.n	800077e <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007f0:	6822      	ldr	r2, [r4, #0]
 80007f2:	6813      	ldr	r3, [r2, #0]
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	e7c8      	b.n	800078e <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007fc:	6822      	ldr	r2, [r4, #0]
 80007fe:	6813      	ldr	r3, [r2, #0]
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	e7ca      	b.n	800079e <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8000808:	2001      	movs	r0, #1
}
 800080a:	4770      	bx	lr

0800080c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800080e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000810:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000814:	041b      	lsls	r3, r3, #16
 8000816:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000818:	0200      	lsls	r0, r0, #8
 800081a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000820:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000824:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000828:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000830:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_NVIC_SetPriority+0x60>)
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083a:	f1c3 0407 	rsb	r4, r3, #7
 800083e:	2c04      	cmp	r4, #4
 8000840:	bf28      	it	cs
 8000842:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000844:	1d1d      	adds	r5, r3, #4
 8000846:	2d06      	cmp	r5, #6
 8000848:	d918      	bls.n	800087c <HAL_NVIC_SetPriority+0x4c>
 800084a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	f04f 35ff 	mov.w	r5, #4294967295
 8000850:	fa05 f404 	lsl.w	r4, r5, r4
 8000854:	ea21 0104 	bic.w	r1, r1, r4
 8000858:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800085a:	fa05 f303 	lsl.w	r3, r5, r3
 800085e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000862:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000864:	2800      	cmp	r0, #0
 8000866:	db0b      	blt.n	8000880 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000868:	0109      	lsls	r1, r1, #4
 800086a:	b2c9      	uxtb	r1, r1
 800086c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000870:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000874:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000878:	bc30      	pop	{r4, r5}
 800087a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087c:	2300      	movs	r3, #0
 800087e:	e7e5      	b.n	800084c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	f000 000f 	and.w	r0, r0, #15
 8000884:	0109      	lsls	r1, r1, #4
 8000886:	b2c9      	uxtb	r1, r1
 8000888:	4b02      	ldr	r3, [pc, #8]	; (8000894 <HAL_NVIC_SetPriority+0x64>)
 800088a:	5419      	strb	r1, [r3, r0]
 800088c:	e7f4      	b.n	8000878 <HAL_NVIC_SetPriority+0x48>
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00
 8000894:	e000ed14 	.word	0xe000ed14

08000898 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000898:	2800      	cmp	r0, #0
 800089a:	db07      	blt.n	80008ac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089c:	f000 021f 	and.w	r2, r0, #31
 80008a0:	0940      	lsrs	r0, r0, #5
 80008a2:	2301      	movs	r3, #1
 80008a4:	4093      	lsls	r3, r2
 80008a6:	4a02      	ldr	r2, [pc, #8]	; (80008b0 <HAL_NVIC_EnableIRQ+0x18>)
 80008a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	3801      	subs	r0, #1
 80008b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008ba:	d20a      	bcs.n	80008d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_SYSTICK_Config+0x24>)
 80008be:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <HAL_SYSTICK_Config+0x28>)
 80008c2:	21f0      	movs	r1, #240	; 0xf0
 80008c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c8:	2000      	movs	r0, #0
 80008ca:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008cc:	2207      	movs	r2, #7
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e010 	.word	0xe000e010
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008e0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008e2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d003      	beq.n	80008f2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ea:	2304      	movs	r3, #4
 80008ec:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80008ee:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80008f0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008f2:	6802      	ldr	r2, [r0, #0]
 80008f4:	6813      	ldr	r3, [r2, #0]
 80008f6:	f023 030e 	bic.w	r3, r3, #14
 80008fa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80008fc:	6802      	ldr	r2, [r0, #0]
 80008fe:	6813      	ldr	r3, [r2, #0]
 8000900:	f023 0301 	bic.w	r3, r3, #1
 8000904:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000906:	6803      	ldr	r3, [r0, #0]
 8000908:	4a19      	ldr	r2, [pc, #100]	; (8000970 <HAL_DMA_Abort_IT+0x90>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d014      	beq.n	8000938 <HAL_DMA_Abort_IT+0x58>
 800090e:	3214      	adds	r2, #20
 8000910:	4293      	cmp	r3, r2
 8000912:	d01f      	beq.n	8000954 <HAL_DMA_Abort_IT+0x74>
 8000914:	3214      	adds	r2, #20
 8000916:	4293      	cmp	r3, r2
 8000918:	d01e      	beq.n	8000958 <HAL_DMA_Abort_IT+0x78>
 800091a:	3214      	adds	r2, #20
 800091c:	4293      	cmp	r3, r2
 800091e:	d01e      	beq.n	800095e <HAL_DMA_Abort_IT+0x7e>
 8000920:	3214      	adds	r2, #20
 8000922:	4293      	cmp	r3, r2
 8000924:	d01e      	beq.n	8000964 <HAL_DMA_Abort_IT+0x84>
 8000926:	3214      	adds	r2, #20
 8000928:	4293      	cmp	r3, r2
 800092a:	d002      	beq.n	8000932 <HAL_DMA_Abort_IT+0x52>
 800092c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000930:	e003      	b.n	800093a <HAL_DMA_Abort_IT+0x5a>
 8000932:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000936:	e000      	b.n	800093a <HAL_DMA_Abort_IT+0x5a>
 8000938:	2201      	movs	r2, #1
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_DMA_Abort_IT+0x94>)
 800093c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800093e:	2301      	movs	r3, #1
 8000940:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000944:	2300      	movs	r3, #0
 8000946:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800094a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800094c:	b16b      	cbz	r3, 800096a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800094e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000950:	2000      	movs	r0, #0
 8000952:	e7cd      	b.n	80008f0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000954:	2210      	movs	r2, #16
 8000956:	e7f0      	b.n	800093a <HAL_DMA_Abort_IT+0x5a>
 8000958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800095c:	e7ed      	b.n	800093a <HAL_DMA_Abort_IT+0x5a>
 800095e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000962:	e7ea      	b.n	800093a <HAL_DMA_Abort_IT+0x5a>
 8000964:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000968:	e7e7      	b.n	800093a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800096a:	2000      	movs	r0, #0
 800096c:	e7c0      	b.n	80008f0 <HAL_DMA_Abort_IT+0x10>
 800096e:	bf00      	nop
 8000970:	40020008 	.word	0x40020008
 8000974:	40020000 	.word	0x40020000

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b4f0      	push	{r4, r5, r6, r7}
 800097a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800097c:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 800097e:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000980:	e0a2      	b.n	8000ac8 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000982:	2d00      	cmp	r5, #0
 8000984:	d05a      	beq.n	8000a3c <HAL_GPIO_Init+0xc4>
 8000986:	2d01      	cmp	r5, #1
 8000988:	d100      	bne.n	800098c <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800098a:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800098c:	2bff      	cmp	r3, #255	; 0xff
 800098e:	d869      	bhi.n	8000a64 <HAL_GPIO_Init+0xec>
 8000990:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000992:	2bff      	cmp	r3, #255	; 0xff
 8000994:	d869      	bhi.n	8000a6a <HAL_GPIO_Init+0xf2>
 8000996:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000998:	f8dc 4000 	ldr.w	r4, [ip]
 800099c:	270f      	movs	r7, #15
 800099e:	40af      	lsls	r7, r5
 80009a0:	ea24 0407 	bic.w	r4, r4, r7
 80009a4:	fa06 f505 	lsl.w	r5, r6, r5
 80009a8:	432c      	orrs	r4, r5
 80009aa:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ae:	684c      	ldr	r4, [r1, #4]
 80009b0:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80009b4:	f000 8087 	beq.w	8000ac6 <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009b8:	4c5f      	ldr	r4, [pc, #380]	; (8000b38 <HAL_GPIO_Init+0x1c0>)
 80009ba:	69a5      	ldr	r5, [r4, #24]
 80009bc:	f045 0501 	orr.w	r5, r5, #1
 80009c0:	61a5      	str	r5, [r4, #24]
 80009c2:	69a4      	ldr	r4, [r4, #24]
 80009c4:	f004 0401 	and.w	r4, r4, #1
 80009c8:	9401      	str	r4, [sp, #4]
 80009ca:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80009cc:	0895      	lsrs	r5, r2, #2
 80009ce:	1caf      	adds	r7, r5, #2
 80009d0:	4c5a      	ldr	r4, [pc, #360]	; (8000b3c <HAL_GPIO_Init+0x1c4>)
 80009d2:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009d6:	f002 0703 	and.w	r7, r2, #3
 80009da:	00bf      	lsls	r7, r7, #2
 80009dc:	f04f 0c0f 	mov.w	ip, #15
 80009e0:	fa0c fc07 	lsl.w	ip, ip, r7
 80009e4:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009e8:	4c55      	ldr	r4, [pc, #340]	; (8000b40 <HAL_GPIO_Init+0x1c8>)
 80009ea:	42a0      	cmp	r0, r4
 80009ec:	d043      	beq.n	8000a76 <HAL_GPIO_Init+0xfe>
 80009ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009f2:	42a0      	cmp	r0, r4
 80009f4:	f000 8081 	beq.w	8000afa <HAL_GPIO_Init+0x182>
 80009f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80009fc:	42a0      	cmp	r0, r4
 80009fe:	d07e      	beq.n	8000afe <HAL_GPIO_Init+0x186>
 8000a00:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000a04:	42a0      	cmp	r0, r4
 8000a06:	d034      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
 8000a08:	2404      	movs	r4, #4
 8000a0a:	e035      	b.n	8000a78 <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8000a0c:	4f4d      	ldr	r7, [pc, #308]	; (8000b44 <HAL_GPIO_Init+0x1cc>)
 8000a0e:	42bd      	cmp	r5, r7
 8000a10:	d014      	beq.n	8000a3c <HAL_GPIO_Init+0xc4>
 8000a12:	d90b      	bls.n	8000a2c <HAL_GPIO_Init+0xb4>
 8000a14:	4f4c      	ldr	r7, [pc, #304]	; (8000b48 <HAL_GPIO_Init+0x1d0>)
 8000a16:	42bd      	cmp	r5, r7
 8000a18:	d010      	beq.n	8000a3c <HAL_GPIO_Init+0xc4>
 8000a1a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000a1e:	42bd      	cmp	r5, r7
 8000a20:	d00c      	beq.n	8000a3c <HAL_GPIO_Init+0xc4>
 8000a22:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000a26:	42bd      	cmp	r5, r7
 8000a28:	d1b0      	bne.n	800098c <HAL_GPIO_Init+0x14>
 8000a2a:	e007      	b.n	8000a3c <HAL_GPIO_Init+0xc4>
 8000a2c:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000a30:	42bd      	cmp	r5, r7
 8000a32:	d003      	beq.n	8000a3c <HAL_GPIO_Init+0xc4>
 8000a34:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000a38:	42bd      	cmp	r5, r7
 8000a3a:	d1a7      	bne.n	800098c <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a3c:	688d      	ldr	r5, [r1, #8]
 8000a3e:	b17d      	cbz	r5, 8000a60 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a40:	2d01      	cmp	r5, #1
 8000a42:	d008      	beq.n	8000a56 <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8000a44:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a46:	2608      	movs	r6, #8
 8000a48:	e7a0      	b.n	800098c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a4a:	68ce      	ldr	r6, [r1, #12]
 8000a4c:	3608      	adds	r6, #8
          break;
 8000a4e:	e79d      	b.n	800098c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a50:	68ce      	ldr	r6, [r1, #12]
 8000a52:	360c      	adds	r6, #12
          break;
 8000a54:	e79a      	b.n	800098c <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8000a56:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a58:	2608      	movs	r6, #8
 8000a5a:	e797      	b.n	800098c <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a5c:	2600      	movs	r6, #0
 8000a5e:	e795      	b.n	800098c <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a60:	2604      	movs	r6, #4
 8000a62:	e793      	b.n	800098c <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a64:	f100 0c04 	add.w	ip, r0, #4
 8000a68:	e793      	b.n	8000992 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a6a:	f1a2 0508 	sub.w	r5, r2, #8
 8000a6e:	00ad      	lsls	r5, r5, #2
 8000a70:	e792      	b.n	8000998 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a72:	2403      	movs	r4, #3
 8000a74:	e000      	b.n	8000a78 <HAL_GPIO_Init+0x100>
 8000a76:	2400      	movs	r4, #0
 8000a78:	40bc      	lsls	r4, r7
 8000a7a:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8000a7e:	3502      	adds	r5, #2
 8000a80:	4f2e      	ldr	r7, [pc, #184]	; (8000b3c <HAL_GPIO_Init+0x1c4>)
 8000a82:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a86:	684c      	ldr	r4, [r1, #4]
 8000a88:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000a8c:	d039      	beq.n	8000b02 <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a8e:	4d2f      	ldr	r5, [pc, #188]	; (8000b4c <HAL_GPIO_Init+0x1d4>)
 8000a90:	682c      	ldr	r4, [r5, #0]
 8000a92:	431c      	orrs	r4, r3
 8000a94:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a96:	684c      	ldr	r4, [r1, #4]
 8000a98:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000a9c:	d037      	beq.n	8000b0e <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a9e:	4d2b      	ldr	r5, [pc, #172]	; (8000b4c <HAL_GPIO_Init+0x1d4>)
 8000aa0:	686c      	ldr	r4, [r5, #4]
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa6:	684c      	ldr	r4, [r1, #4]
 8000aa8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 8000aac:	d035      	beq.n	8000b1a <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aae:	4d27      	ldr	r5, [pc, #156]	; (8000b4c <HAL_GPIO_Init+0x1d4>)
 8000ab0:	68ac      	ldr	r4, [r5, #8]
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab6:	684c      	ldr	r4, [r1, #4]
 8000ab8:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8000abc:	d033      	beq.n	8000b26 <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000abe:	4d23      	ldr	r5, [pc, #140]	; (8000b4c <HAL_GPIO_Init+0x1d4>)
 8000ac0:	68ec      	ldr	r4, [r5, #12]
 8000ac2:	4323      	orrs	r3, r4
 8000ac4:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000ac6:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac8:	680b      	ldr	r3, [r1, #0]
 8000aca:	fa33 f402 	lsrs.w	r4, r3, r2
 8000ace:	d030      	beq.n	8000b32 <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8000ad0:	2401      	movs	r4, #1
 8000ad2:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad4:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 8000ad6:	429c      	cmp	r4, r3
 8000ad8:	d1f5      	bne.n	8000ac6 <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 8000ada:	684d      	ldr	r5, [r1, #4]
 8000adc:	2d12      	cmp	r5, #18
 8000ade:	d0b7      	beq.n	8000a50 <HAL_GPIO_Init+0xd8>
 8000ae0:	d894      	bhi.n	8000a0c <HAL_GPIO_Init+0x94>
 8000ae2:	2d02      	cmp	r5, #2
 8000ae4:	d0b1      	beq.n	8000a4a <HAL_GPIO_Init+0xd2>
 8000ae6:	f67f af4c 	bls.w	8000982 <HAL_GPIO_Init+0xa>
 8000aea:	2d03      	cmp	r5, #3
 8000aec:	d0b6      	beq.n	8000a5c <HAL_GPIO_Init+0xe4>
 8000aee:	2d11      	cmp	r5, #17
 8000af0:	f47f af4c 	bne.w	800098c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af4:	68ce      	ldr	r6, [r1, #12]
 8000af6:	3604      	adds	r6, #4
          break;
 8000af8:	e748      	b.n	800098c <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000afa:	2401      	movs	r4, #1
 8000afc:	e7bc      	b.n	8000a78 <HAL_GPIO_Init+0x100>
 8000afe:	2402      	movs	r4, #2
 8000b00:	e7ba      	b.n	8000a78 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b02:	4d12      	ldr	r5, [pc, #72]	; (8000b4c <HAL_GPIO_Init+0x1d4>)
 8000b04:	682c      	ldr	r4, [r5, #0]
 8000b06:	ea24 0403 	bic.w	r4, r4, r3
 8000b0a:	602c      	str	r4, [r5, #0]
 8000b0c:	e7c3      	b.n	8000a96 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b0e:	4d0f      	ldr	r5, [pc, #60]	; (8000b4c <HAL_GPIO_Init+0x1d4>)
 8000b10:	686c      	ldr	r4, [r5, #4]
 8000b12:	ea24 0403 	bic.w	r4, r4, r3
 8000b16:	606c      	str	r4, [r5, #4]
 8000b18:	e7c5      	b.n	8000aa6 <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b1a:	4d0c      	ldr	r5, [pc, #48]	; (8000b4c <HAL_GPIO_Init+0x1d4>)
 8000b1c:	68ac      	ldr	r4, [r5, #8]
 8000b1e:	ea24 0403 	bic.w	r4, r4, r3
 8000b22:	60ac      	str	r4, [r5, #8]
 8000b24:	e7c7      	b.n	8000ab6 <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b26:	4d09      	ldr	r5, [pc, #36]	; (8000b4c <HAL_GPIO_Init+0x1d4>)
 8000b28:	68ec      	ldr	r4, [r5, #12]
 8000b2a:	ea24 0303 	bic.w	r3, r4, r3
 8000b2e:	60eb      	str	r3, [r5, #12]
 8000b30:	e7c9      	b.n	8000ac6 <HAL_GPIO_Init+0x14e>
  }
}
 8000b32:	b002      	add	sp, #8
 8000b34:	bcf0      	pop	{r4, r5, r6, r7}
 8000b36:	4770      	bx	lr
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	40010800 	.word	0x40010800
 8000b44:	10210000 	.word	0x10210000
 8000b48:	10310000 	.word	0x10310000
 8000b4c:	40010400 	.word	0x40010400

08000b50 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b50:	2800      	cmp	r0, #0
 8000b52:	f000 80be 	beq.w	8000cd2 <HAL_I2C_Init+0x182>
{
 8000b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b58:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d06b      	beq.n	8000c3a <HAL_I2C_Init+0xea>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b62:	2324      	movs	r3, #36	; 0x24
 8000b64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b68:	6822      	ldr	r2, [r4, #0]
 8000b6a:	6813      	ldr	r3, [r2, #0]
 8000b6c:	f023 0301 	bic.w	r3, r3, #1
 8000b70:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b72:	f000 fbcd 	bl	8001310 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b76:	6862      	ldr	r2, [r4, #4]
 8000b78:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <HAL_I2C_Init+0x18c>)
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d862      	bhi.n	8000c44 <HAL_I2C_Init+0xf4>
 8000b7e:	4b58      	ldr	r3, [pc, #352]	; (8000ce0 <HAL_I2C_Init+0x190>)
 8000b80:	4298      	cmp	r0, r3
 8000b82:	bf8c      	ite	hi
 8000b84:	2300      	movhi	r3, #0
 8000b86:	2301      	movls	r3, #1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f040 80a4 	bne.w	8000cd6 <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b8e:	4b55      	ldr	r3, [pc, #340]	; (8000ce4 <HAL_I2C_Init+0x194>)
 8000b90:	fba3 2300 	umull	r2, r3, r3, r0
 8000b94:	0c9b      	lsrs	r3, r3, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b96:	6821      	ldr	r1, [r4, #0]
 8000b98:	684a      	ldr	r2, [r1, #4]
 8000b9a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ba2:	6825      	ldr	r5, [r4, #0]
 8000ba4:	6a2a      	ldr	r2, [r5, #32]
 8000ba6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000baa:	6866      	ldr	r6, [r4, #4]
 8000bac:	494b      	ldr	r1, [pc, #300]	; (8000cdc <HAL_I2C_Init+0x18c>)
 8000bae:	428e      	cmp	r6, r1
 8000bb0:	d84e      	bhi.n	8000c50 <HAL_I2C_Init+0x100>
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	622b      	str	r3, [r5, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000bb8:	6825      	ldr	r5, [r4, #0]
 8000bba:	69e9      	ldr	r1, [r5, #28]
 8000bbc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000bc0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000bc4:	6863      	ldr	r3, [r4, #4]
 8000bc6:	4a45      	ldr	r2, [pc, #276]	; (8000cdc <HAL_I2C_Init+0x18c>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d84b      	bhi.n	8000c64 <HAL_I2C_Init+0x114>
 8000bcc:	3801      	subs	r0, #1
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf38      	it	cc
 8000bde:	2304      	movcc	r3, #4
 8000be0:	430b      	orrs	r3, r1
 8000be2:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000be4:	6821      	ldr	r1, [r4, #0]
 8000be6:	680b      	ldr	r3, [r1, #0]
 8000be8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000bec:	69e2      	ldr	r2, [r4, #28]
 8000bee:	6a20      	ldr	r0, [r4, #32]
 8000bf0:	4302      	orrs	r2, r0
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000bf6:	6821      	ldr	r1, [r4, #0]
 8000bf8:	688b      	ldr	r3, [r1, #8]
 8000bfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000bfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c02:	6922      	ldr	r2, [r4, #16]
 8000c04:	68e0      	ldr	r0, [r4, #12]
 8000c06:	4302      	orrs	r2, r0
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000c0c:	6821      	ldr	r1, [r4, #0]
 8000c0e:	68cb      	ldr	r3, [r1, #12]
 8000c10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c14:	6962      	ldr	r2, [r4, #20]
 8000c16:	69a0      	ldr	r0, [r4, #24]
 8000c18:	4302      	orrs	r2, r0
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c1e:	6822      	ldr	r2, [r4, #0]
 8000c20:	6813      	ldr	r3, [r2, #0]
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c28:	2000      	movs	r0, #0
 8000c2a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c32:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c34:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 8000c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000c3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000c3e:	f001 f9f3 	bl	8002028 <HAL_I2C_MspInit>
 8000c42:	e78e      	b.n	8000b62 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <HAL_I2C_Init+0x198>)
 8000c46:	4298      	cmp	r0, r3
 8000c48:	bf8c      	ite	hi
 8000c4a:	2300      	movhi	r3, #0
 8000c4c:	2301      	movls	r3, #1
 8000c4e:	e79b      	b.n	8000b88 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c50:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c54:	fb01 f303 	mul.w	r3, r1, r3
 8000c58:	4924      	ldr	r1, [pc, #144]	; (8000cec <HAL_I2C_Init+0x19c>)
 8000c5a:	fba1 1303 	umull	r1, r3, r1, r3
 8000c5e:	099b      	lsrs	r3, r3, #6
 8000c60:	3301      	adds	r3, #1
 8000c62:	e7a7      	b.n	8000bb4 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c64:	68a2      	ldr	r2, [r4, #8]
 8000c66:	b9ba      	cbnz	r2, 8000c98 <HAL_I2C_Init+0x148>
 8000c68:	1e46      	subs	r6, r0, #1
 8000c6a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8000c6e:	fbb6 f6f7 	udiv	r6, r6, r7
 8000c72:	3601      	adds	r6, #1
 8000c74:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8000c78:	fab6 f686 	clz	r6, r6
 8000c7c:	0976      	lsrs	r6, r6, #5
 8000c7e:	bb36      	cbnz	r6, 8000cce <HAL_I2C_Init+0x17e>
 8000c80:	b9c2      	cbnz	r2, 8000cb4 <HAL_I2C_Init+0x164>
 8000c82:	3801      	subs	r0, #1
 8000c84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000c92:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8000c96:	e7a3      	b.n	8000be0 <HAL_I2C_Init+0x90>
 8000c98:	1e46      	subs	r6, r0, #1
 8000c9a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8000c9e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8000ca2:	fbb6 f6f7 	udiv	r6, r6, r7
 8000ca6:	3601      	adds	r6, #1
 8000ca8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8000cac:	fab6 f686 	clz	r6, r6
 8000cb0:	0976      	lsrs	r6, r6, #5
 8000cb2:	e7e4      	b.n	8000c7e <HAL_I2C_Init+0x12e>
 8000cb4:	3801      	subs	r0, #1
 8000cb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000cba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000cbe:	fbb0 f2f3 	udiv	r2, r0, r3
 8000cc2:	3201      	adds	r2, #1
 8000cc4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000cc8:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8000ccc:	e788      	b.n	8000be0 <HAL_I2C_Init+0x90>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e786      	b.n	8000be0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8000cd2:	2001      	movs	r0, #1
}
 8000cd4:	4770      	bx	lr
    return HAL_ERROR;
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	e7ae      	b.n	8000c38 <HAL_I2C_Init+0xe8>
 8000cda:	bf00      	nop
 8000cdc:	000186a0 	.word	0x000186a0
 8000ce0:	001e847f 	.word	0x001e847f
 8000ce4:	431bde83 	.word	0x431bde83
 8000ce8:	003d08ff 	.word	0x003d08ff
 8000cec:	10624dd3 	.word	0x10624dd3

08000cf0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000cf0:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <RCC_Delay+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <RCC_Delay+0x28>)
 8000cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfc:	0a5b      	lsrs	r3, r3, #9
 8000cfe:	fb00 f003 	mul.w	r0, r0, r3
 8000d02:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8000d04:	bf00      	nop
  }
  while (Delay --);
 8000d06:	9b01      	ldr	r3, [sp, #4]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	9201      	str	r2, [sp, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f9      	bne.n	8000d04 <RCC_Delay+0x14>
}
 8000d10:	b002      	add	sp, #8
 8000d12:	4770      	bx	lr
 8000d14:	20000074 	.word	0x20000074
 8000d18:	10624dd3 	.word	0x10624dd3

08000d1c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	f000 81f5 	beq.w	800110c <HAL_RCC_OscConfig+0x3f0>
{
 8000d22:	b570      	push	{r4, r5, r6, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d28:	6803      	ldr	r3, [r0, #0]
 8000d2a:	f013 0f01 	tst.w	r3, #1
 8000d2e:	d02c      	beq.n	8000d8a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d30:	4bab      	ldr	r3, [pc, #684]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 030c 	and.w	r3, r3, #12
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d01d      	beq.n	8000d78 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d3c:	4ba8      	ldr	r3, [pc, #672]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b08      	cmp	r3, #8
 8000d46:	d012      	beq.n	8000d6e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d48:	6863      	ldr	r3, [r4, #4]
 8000d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d4e:	d041      	beq.n	8000dd4 <HAL_RCC_OscConfig+0xb8>
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d155      	bne.n	8000e00 <HAL_RCC_OscConfig+0xe4>
 8000d54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d58:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e037      	b.n	8000dde <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d6e:	4b9c      	ldr	r3, [pc, #624]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d76:	d0e7      	beq.n	8000d48 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d78:	4b99      	ldr	r3, [pc, #612]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d80:	d003      	beq.n	8000d8a <HAL_RCC_OscConfig+0x6e>
 8000d82:	6863      	ldr	r3, [r4, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 81c3 	beq.w	8001110 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	f013 0f02 	tst.w	r3, #2
 8000d90:	d076      	beq.n	8000e80 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d92:	4b93      	ldr	r3, [pc, #588]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f013 0f0c 	tst.w	r3, #12
 8000d9a:	d05f      	beq.n	8000e5c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d9c:	4b90      	ldr	r3, [pc, #576]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 030c 	and.w	r3, r3, #12
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d054      	beq.n	8000e52 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da8:	6923      	ldr	r3, [r4, #16]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 808a 	beq.w	8000ec4 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8000db0:	4b8c      	ldr	r3, [pc, #560]	; (8000fe4 <HAL_RCC_OscConfig+0x2c8>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000db6:	f7ff fc69 	bl	800068c <HAL_GetTick>
 8000dba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dbc:	4b88      	ldr	r3, [pc, #544]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f013 0f02 	tst.w	r3, #2
 8000dc4:	d175      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fc61 	bl	800068c <HAL_GetTick>
 8000dca:	1b40      	subs	r0, r0, r5
 8000dcc:	2802      	cmp	r0, #2
 8000dce:	d9f5      	bls.n	8000dbc <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	e1a0      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd4:	4a82      	ldr	r2, [pc, #520]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000dd6:	6813      	ldr	r3, [r2, #0]
 8000dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dde:	6863      	ldr	r3, [r4, #4]
 8000de0:	b343      	cbz	r3, 8000e34 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000de2:	f7ff fc53 	bl	800068c <HAL_GetTick>
 8000de6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de8:	4b7d      	ldr	r3, [pc, #500]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000df0:	d1cb      	bne.n	8000d8a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df2:	f7ff fc4b 	bl	800068c <HAL_GetTick>
 8000df6:	1b40      	subs	r0, r0, r5
 8000df8:	2864      	cmp	r0, #100	; 0x64
 8000dfa:	d9f5      	bls.n	8000de8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	e18a      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e04:	d009      	beq.n	8000e1a <HAL_RCC_OscConfig+0xfe>
 8000e06:	4b76      	ldr	r3, [pc, #472]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e7e1      	b.n	8000dde <HAL_RCC_OscConfig+0xc2>
 8000e1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e1e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e7d4      	b.n	8000dde <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000e34:	f7ff fc2a 	bl	800068c <HAL_GetTick>
 8000e38:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3a:	4b69      	ldr	r3, [pc, #420]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e42:	d0a2      	beq.n	8000d8a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fc22 	bl	800068c <HAL_GetTick>
 8000e48:	1b40      	subs	r0, r0, r5
 8000e4a:	2864      	cmp	r0, #100	; 0x64
 8000e4c:	d9f5      	bls.n	8000e3a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000e4e:	2003      	movs	r0, #3
 8000e50:	e161      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e52:	4b63      	ldr	r3, [pc, #396]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e5a:	d1a5      	bne.n	8000da8 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5c:	4b60      	ldr	r3, [pc, #384]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f013 0f02 	tst.w	r3, #2
 8000e64:	d004      	beq.n	8000e70 <HAL_RCC_OscConfig+0x154>
 8000e66:	6923      	ldr	r3, [r4, #16]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d001      	beq.n	8000e70 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	e152      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e70:	4a5b      	ldr	r2, [pc, #364]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000e72:	6813      	ldr	r3, [r2, #0]
 8000e74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e78:	6961      	ldr	r1, [r4, #20]
 8000e7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e7e:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	f013 0f08 	tst.w	r3, #8
 8000e86:	d032      	beq.n	8000eee <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e88:	69a3      	ldr	r3, [r4, #24]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d05b      	beq.n	8000f46 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8000e8e:	4b56      	ldr	r3, [pc, #344]	; (8000fe8 <HAL_RCC_OscConfig+0x2cc>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e94:	f7ff fbfa 	bl	800068c <HAL_GetTick>
 8000e98:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9a:	4b51      	ldr	r3, [pc, #324]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	f013 0f02 	tst.w	r3, #2
 8000ea2:	d121      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fbf2 	bl	800068c <HAL_GetTick>
 8000ea8:	1b40      	subs	r0, r0, r5
 8000eaa:	2802      	cmp	r0, #2
 8000eac:	d9f5      	bls.n	8000e9a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8000eae:	2003      	movs	r0, #3
 8000eb0:	e131      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb2:	4a4b      	ldr	r2, [pc, #300]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000eb4:	6813      	ldr	r3, [r2, #0]
 8000eb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000eba:	6961      	ldr	r1, [r4, #20]
 8000ebc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e7dd      	b.n	8000e80 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000ec4:	4b47      	ldr	r3, [pc, #284]	; (8000fe4 <HAL_RCC_OscConfig+0x2c8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eca:	f7ff fbdf 	bl	800068c <HAL_GetTick>
 8000ece:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed0:	4b43      	ldr	r3, [pc, #268]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f013 0f02 	tst.w	r3, #2
 8000ed8:	d0d2      	beq.n	8000e80 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eda:	f7ff fbd7 	bl	800068c <HAL_GetTick>
 8000ede:	1b40      	subs	r0, r0, r5
 8000ee0:	2802      	cmp	r0, #2
 8000ee2:	d9f5      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	e116      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff ff01 	bl	8000cf0 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	f013 0f04 	tst.w	r3, #4
 8000ef4:	f000 8098 	beq.w	8001028 <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ef8:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000f00:	d133      	bne.n	8000f6a <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000f04:	69da      	ldr	r2, [r3, #28]
 8000f06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f0a:	61da      	str	r2, [r3, #28]
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f16:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f18:	4b34      	ldr	r3, [pc, #208]	; (8000fec <HAL_RCC_OscConfig+0x2d0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f20:	d025      	beq.n	8000f6e <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f22:	68e3      	ldr	r3, [r4, #12]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d036      	beq.n	8000f96 <HAL_RCC_OscConfig+0x27a>
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d14c      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x2aa>
 8000f2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f30:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000f34:	6a1a      	ldr	r2, [r3, #32]
 8000f36:	f022 0201 	bic.w	r2, r2, #1
 8000f3a:	621a      	str	r2, [r3, #32]
 8000f3c:	6a1a      	ldr	r2, [r3, #32]
 8000f3e:	f022 0204 	bic.w	r2, r2, #4
 8000f42:	621a      	str	r2, [r3, #32]
 8000f44:	e02c      	b.n	8000fa0 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_RCC_OscConfig+0x2cc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f4c:	f7ff fb9e 	bl	800068c <HAL_GetTick>
 8000f50:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f56:	f013 0f02 	tst.w	r3, #2
 8000f5a:	d0c8      	beq.n	8000eee <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fb96 	bl	800068c <HAL_GetTick>
 8000f60:	1b40      	subs	r0, r0, r5
 8000f62:	2802      	cmp	r0, #2
 8000f64:	d9f5      	bls.n	8000f52 <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 8000f66:	2003      	movs	r0, #3
 8000f68:	e0d5      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	e7d4      	b.n	8000f18 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f6e:	4a1f      	ldr	r2, [pc, #124]	; (8000fec <HAL_RCC_OscConfig+0x2d0>)
 8000f70:	6813      	ldr	r3, [r2, #0]
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f78:	f7ff fb88 	bl	800068c <HAL_GetTick>
 8000f7c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_RCC_OscConfig+0x2d0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f86:	d1cc      	bne.n	8000f22 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f88:	f7ff fb80 	bl	800068c <HAL_GetTick>
 8000f8c:	1b80      	subs	r0, r0, r6
 8000f8e:	2864      	cmp	r0, #100	; 0x64
 8000f90:	d9f5      	bls.n	8000f7e <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8000f92:	2003      	movs	r0, #3
 8000f94:	e0bf      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000f98:	6a13      	ldr	r3, [r2, #32]
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fa0:	68e3      	ldr	r3, [r4, #12]
 8000fa2:	b37b      	cbz	r3, 8001004 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8000fa4:	f7ff fb72 	bl	800068c <HAL_GetTick>
 8000fa8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	f013 0f02 	tst.w	r3, #2
 8000fb2:	d138      	bne.n	8001026 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fb6a 	bl	800068c <HAL_GetTick>
 8000fb8:	1b80      	subs	r0, r0, r6
 8000fba:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fbe:	4298      	cmp	r0, r3
 8000fc0:	d9f3      	bls.n	8000faa <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	e0a7      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d012      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x2d4>
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_RCC_OscConfig+0x2c4>)
 8000fcc:	6a1a      	ldr	r2, [r3, #32]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	621a      	str	r2, [r3, #32]
 8000fd4:	6a1a      	ldr	r2, [r3, #32]
 8000fd6:	f022 0204 	bic.w	r2, r2, #4
 8000fda:	621a      	str	r2, [r3, #32]
 8000fdc:	e7e0      	b.n	8000fa0 <HAL_RCC_OscConfig+0x284>
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	42420000 	.word	0x42420000
 8000fe8:	42420480 	.word	0x42420480
 8000fec:	40007000 	.word	0x40007000
 8000ff0:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <HAL_RCC_OscConfig+0x408>)
 8000ff2:	6a1a      	ldr	r2, [r3, #32]
 8000ff4:	f042 0204 	orr.w	r2, r2, #4
 8000ff8:	621a      	str	r2, [r3, #32]
 8000ffa:	6a1a      	ldr	r2, [r3, #32]
 8000ffc:	f042 0201 	orr.w	r2, r2, #1
 8001000:	621a      	str	r2, [r3, #32]
 8001002:	e7cd      	b.n	8000fa0 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8001004:	f7ff fb42 	bl	800068c <HAL_GetTick>
 8001008:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100a:	4b46      	ldr	r3, [pc, #280]	; (8001124 <HAL_RCC_OscConfig+0x408>)
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	f013 0f02 	tst.w	r3, #2
 8001012:	d008      	beq.n	8001026 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001014:	f7ff fb3a 	bl	800068c <HAL_GetTick>
 8001018:	1b80      	subs	r0, r0, r6
 800101a:	f241 3388 	movw	r3, #5000	; 0x1388
 800101e:	4298      	cmp	r0, r3
 8001020:	d9f3      	bls.n	800100a <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8001022:	2003      	movs	r0, #3
 8001024:	e077      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 8001026:	b9e5      	cbnz	r5, 8001062 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001028:	69e3      	ldr	r3, [r4, #28]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d072      	beq.n	8001114 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800102e:	4a3d      	ldr	r2, [pc, #244]	; (8001124 <HAL_RCC_OscConfig+0x408>)
 8001030:	6852      	ldr	r2, [r2, #4]
 8001032:	f002 020c 	and.w	r2, r2, #12
 8001036:	2a08      	cmp	r2, #8
 8001038:	d056      	beq.n	80010e8 <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800103a:	2b02      	cmp	r3, #2
 800103c:	d017      	beq.n	800106e <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <HAL_RCC_OscConfig+0x40c>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001044:	f7ff fb22 	bl	800068c <HAL_GetTick>
 8001048:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <HAL_RCC_OscConfig+0x408>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001052:	d047      	beq.n	80010e4 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001054:	f7ff fb1a 	bl	800068c <HAL_GetTick>
 8001058:	1b00      	subs	r0, r0, r4
 800105a:	2802      	cmp	r0, #2
 800105c:	d9f5      	bls.n	800104a <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 800105e:	2003      	movs	r0, #3
 8001060:	e059      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001062:	4a30      	ldr	r2, [pc, #192]	; (8001124 <HAL_RCC_OscConfig+0x408>)
 8001064:	69d3      	ldr	r3, [r2, #28]
 8001066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800106a:	61d3      	str	r3, [r2, #28]
 800106c:	e7dc      	b.n	8001028 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <HAL_RCC_OscConfig+0x40c>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001074:	f7ff fb0a 	bl	800068c <HAL_GetTick>
 8001078:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <HAL_RCC_OscConfig+0x408>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001082:	d006      	beq.n	8001092 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001084:	f7ff fb02 	bl	800068c <HAL_GetTick>
 8001088:	1b40      	subs	r0, r0, r5
 800108a:	2802      	cmp	r0, #2
 800108c:	d9f5      	bls.n	800107a <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 800108e:	2003      	movs	r0, #3
 8001090:	e041      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001092:	6a23      	ldr	r3, [r4, #32]
 8001094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001098:	d01a      	beq.n	80010d0 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800109a:	4922      	ldr	r1, [pc, #136]	; (8001124 <HAL_RCC_OscConfig+0x408>)
 800109c:	684b      	ldr	r3, [r1, #4]
 800109e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80010a2:	6a22      	ldr	r2, [r4, #32]
 80010a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80010a6:	4302      	orrs	r2, r0
 80010a8:	4313      	orrs	r3, r2
 80010aa:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <HAL_RCC_OscConfig+0x40c>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010b2:	f7ff faeb 	bl	800068c <HAL_GetTick>
 80010b6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_RCC_OscConfig+0x408>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010c0:	d10e      	bne.n	80010e0 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c2:	f7ff fae3 	bl	800068c <HAL_GetTick>
 80010c6:	1b00      	subs	r0, r0, r4
 80010c8:	2802      	cmp	r0, #2
 80010ca:	d9f5      	bls.n	80010b8 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80010cc:	2003      	movs	r0, #3
 80010ce:	e022      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_RCC_OscConfig+0x408>)
 80010d2:	6853      	ldr	r3, [r2, #4]
 80010d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010d8:	68a1      	ldr	r1, [r4, #8]
 80010da:	430b      	orrs	r3, r1
 80010dc:	6053      	str	r3, [r2, #4]
 80010de:	e7dc      	b.n	800109a <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 80010e0:	2000      	movs	r0, #0
 80010e2:	e018      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
 80010e4:	2000      	movs	r0, #0
 80010e6:	e016      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d016      	beq.n	800111a <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <HAL_RCC_OscConfig+0x408>)
 80010ee:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80010f4:	6a22      	ldr	r2, [r4, #32]
 80010f6:	4291      	cmp	r1, r2
 80010f8:	d001      	beq.n	80010fe <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 80010fa:	2001      	movs	r0, #1
 80010fc:	e00b      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010fe:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001102:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001104:	4293      	cmp	r3, r2
 8001106:	d00a      	beq.n	800111e <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 8001108:	2001      	movs	r0, #1
 800110a:	e004      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 800110c:	2001      	movs	r0, #1
}
 800110e:	4770      	bx	lr
        return HAL_ERROR;
 8001110:	2001      	movs	r0, #1
 8001112:	e000      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8001114:	2000      	movs	r0, #0
}
 8001116:	b002      	add	sp, #8
 8001118:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800111a:	2001      	movs	r0, #1
 800111c:	e7fb      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 800111e:	2000      	movs	r0, #0
 8001120:	e7f9      	b.n	8001116 <HAL_RCC_OscConfig+0x3fa>
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	42420060 	.word	0x42420060

0800112c <HAL_RCC_GetSysClockFreq>:
{
 800112c:	b410      	push	{r4}
 800112e:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001130:	4c16      	ldr	r4, [pc, #88]	; (800118c <HAL_RCC_GetSysClockFreq+0x60>)
 8001132:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001136:	f10d 0c18 	add.w	ip, sp, #24
 800113a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800113e:	8a23      	ldrh	r3, [r4, #16]
 8001140:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_RCC_GetSysClockFreq+0x64>)
 8001146:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001148:	f003 020c 	and.w	r2, r3, #12
 800114c:	2a08      	cmp	r2, #8
 800114e:	d11a      	bne.n	8001186 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001150:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001154:	4462      	add	r2, ip
 8001156:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800115a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800115e:	d105      	bne.n	800116c <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <HAL_RCC_GetSysClockFreq+0x68>)
 8001162:	fb00 f002 	mul.w	r0, r0, r2
}
 8001166:	b007      	add	sp, #28
 8001168:	bc10      	pop	{r4}
 800116a:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_RCC_GetSysClockFreq+0x64>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001174:	4463      	add	r3, ip
 8001176:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <HAL_RCC_GetSysClockFreq+0x6c>)
 800117c:	fb00 f002 	mul.w	r0, r0, r2
 8001180:	fbb0 f0f3 	udiv	r0, r0, r3
 8001184:	e7ef      	b.n	8001166 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8001186:	4804      	ldr	r0, [pc, #16]	; (8001198 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001188:	e7ed      	b.n	8001166 <HAL_RCC_GetSysClockFreq+0x3a>
 800118a:	bf00      	nop
 800118c:	0800338c 	.word	0x0800338c
 8001190:	40021000 	.word	0x40021000
 8001194:	003d0900 	.word	0x003d0900
 8001198:	007a1200 	.word	0x007a1200

0800119c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800119c:	2800      	cmp	r0, #0
 800119e:	f000 80a3 	beq.w	80012e8 <HAL_RCC_ClockConfig+0x14c>
{
 80011a2:	b570      	push	{r4, r5, r6, lr}
 80011a4:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011a6:	4b52      	ldr	r3, [pc, #328]	; (80012f0 <HAL_RCC_ClockConfig+0x154>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	428b      	cmp	r3, r1
 80011b0:	d20c      	bcs.n	80011cc <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b2:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_RCC_ClockConfig+0x154>)
 80011b4:	6813      	ldr	r3, [r2, #0]
 80011b6:	f023 0307 	bic.w	r3, r3, #7
 80011ba:	430b      	orrs	r3, r1
 80011bc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011be:	6813      	ldr	r3, [r2, #0]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	428b      	cmp	r3, r1
 80011c6:	d001      	beq.n	80011cc <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80011c8:	2001      	movs	r0, #1
}
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	f013 0f02 	tst.w	r3, #2
 80011d2:	d017      	beq.n	8001204 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d4:	f013 0f04 	tst.w	r3, #4
 80011d8:	d004      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011da:	4a46      	ldr	r2, [pc, #280]	; (80012f4 <HAL_RCC_ClockConfig+0x158>)
 80011dc:	6853      	ldr	r3, [r2, #4]
 80011de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011e2:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	f013 0f08 	tst.w	r3, #8
 80011ea:	d004      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ec:	4a41      	ldr	r2, [pc, #260]	; (80012f4 <HAL_RCC_ClockConfig+0x158>)
 80011ee:	6853      	ldr	r3, [r2, #4]
 80011f0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011f4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f6:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <HAL_RCC_ClockConfig+0x158>)
 80011f8:	6853      	ldr	r3, [r2, #4]
 80011fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011fe:	68a0      	ldr	r0, [r4, #8]
 8001200:	4303      	orrs	r3, r0
 8001202:	6053      	str	r3, [r2, #4]
 8001204:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	f013 0f01 	tst.w	r3, #1
 800120c:	d031      	beq.n	8001272 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120e:	6863      	ldr	r3, [r4, #4]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d020      	beq.n	8001256 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001214:	2b02      	cmp	r3, #2
 8001216:	d025      	beq.n	8001264 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <HAL_RCC_ClockConfig+0x158>)
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	f012 0f02 	tst.w	r2, #2
 8001220:	d064      	beq.n	80012ec <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001222:	4934      	ldr	r1, [pc, #208]	; (80012f4 <HAL_RCC_ClockConfig+0x158>)
 8001224:	684a      	ldr	r2, [r1, #4]
 8001226:	f022 0203 	bic.w	r2, r2, #3
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800122e:	f7ff fa2d 	bl	800068c <HAL_GetTick>
 8001232:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <HAL_RCC_ClockConfig+0x158>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	6862      	ldr	r2, [r4, #4]
 800123e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001242:	d016      	beq.n	8001272 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001244:	f7ff fa22 	bl	800068c <HAL_GetTick>
 8001248:	1b80      	subs	r0, r0, r6
 800124a:	f241 3388 	movw	r3, #5000	; 0x1388
 800124e:	4298      	cmp	r0, r3
 8001250:	d9f0      	bls.n	8001234 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8001252:	2003      	movs	r0, #3
 8001254:	e7b9      	b.n	80011ca <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <HAL_RCC_ClockConfig+0x158>)
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800125e:	d1e0      	bne.n	8001222 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001260:	2001      	movs	r0, #1
 8001262:	e7b2      	b.n	80011ca <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001264:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <HAL_RCC_ClockConfig+0x158>)
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800126c:	d1d9      	bne.n	8001222 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800126e:	2001      	movs	r0, #1
 8001270:	e7ab      	b.n	80011ca <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <HAL_RCC_ClockConfig+0x154>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	42ab      	cmp	r3, r5
 800127c:	d90c      	bls.n	8001298 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <HAL_RCC_ClockConfig+0x154>)
 8001280:	6813      	ldr	r3, [r2, #0]
 8001282:	f023 0307 	bic.w	r3, r3, #7
 8001286:	432b      	orrs	r3, r5
 8001288:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128a:	6813      	ldr	r3, [r2, #0]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	42ab      	cmp	r3, r5
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8001294:	2001      	movs	r0, #1
 8001296:	e798      	b.n	80011ca <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	f013 0f04 	tst.w	r3, #4
 800129e:	d006      	beq.n	80012ae <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <HAL_RCC_ClockConfig+0x158>)
 80012a2:	6853      	ldr	r3, [r2, #4]
 80012a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012a8:	68e1      	ldr	r1, [r4, #12]
 80012aa:	430b      	orrs	r3, r1
 80012ac:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	f013 0f08 	tst.w	r3, #8
 80012b4:	d007      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_RCC_ClockConfig+0x158>)
 80012b8:	6853      	ldr	r3, [r2, #4]
 80012ba:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80012be:	6921      	ldr	r1, [r4, #16]
 80012c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012c4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012c6:	f7ff ff31 	bl	800112c <HAL_RCC_GetSysClockFreq>
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_RCC_ClockConfig+0x158>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <HAL_RCC_ClockConfig+0x15c>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	40d8      	lsrs	r0, r3
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_RCC_ClockConfig+0x160>)
 80012da:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_RCC_ClockConfig+0x164>)
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	f7ff f992 	bl	8000608 <HAL_InitTick>
  return HAL_OK;
 80012e4:	2000      	movs	r0, #0
 80012e6:	e770      	b.n	80011ca <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
}
 80012ea:	4770      	bx	lr
        return HAL_ERROR;
 80012ec:	2001      	movs	r0, #1
 80012ee:	e76c      	b.n	80011ca <HAL_RCC_ClockConfig+0x2e>
 80012f0:	40022000 	.word	0x40022000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	0800342c 	.word	0x0800342c
 80012fc:	20000074 	.word	0x20000074
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_RCC_GetHCLKFreq>:
}
 8001304:	4b01      	ldr	r3, [pc, #4]	; (800130c <HAL_RCC_GetHCLKFreq+0x8>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000074 	.word	0x20000074

08001310 <HAL_RCC_GetPCLK1Freq>:
{
 8001310:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001312:	f7ff fff7 	bl	8001304 <HAL_RCC_GetHCLKFreq>
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800131e:	4a03      	ldr	r2, [pc, #12]	; (800132c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
}
 8001322:	40d8      	lsrs	r0, r3
 8001324:	bd08      	pop	{r3, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	0800343c 	.word	0x0800343c

08001330 <HAL_RCC_GetPCLK2Freq>:
{
 8001330:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001332:	f7ff ffe7 	bl	8001304 <HAL_RCC_GetHCLKFreq>
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800133e:	4a03      	ldr	r2, [pc, #12]	; (800134c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
}
 8001342:	40d8      	lsrs	r0, r3
 8001344:	bd08      	pop	{r3, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	0800343c 	.word	0x0800343c

08001350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001350:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001352:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001354:	6a04      	ldr	r4, [r0, #32]
 8001356:	f024 0401 	bic.w	r4, r4, #1
 800135a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800135c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800135e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001362:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001366:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800136a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800136c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800136e:	6203      	str	r3, [r0, #32]
}
 8001370:	bc10      	pop	{r4}
 8001372:	4770      	bx	lr

08001374 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001374:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001376:	6a03      	ldr	r3, [r0, #32]
 8001378:	f023 0310 	bic.w	r3, r3, #16
 800137c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800137e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001380:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001382:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001386:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800138a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800138e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001392:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001394:	6203      	str	r3, [r0, #32]
}
 8001396:	bc10      	pop	{r4}
 8001398:	4770      	bx	lr

0800139a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800139a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800139c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80013a0:	4319      	orrs	r1, r3
 80013a2:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80013a6:	6081      	str	r1, [r0, #8]
}
 80013a8:	4770      	bx	lr

080013aa <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80013aa:	2302      	movs	r3, #2
 80013ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013b0:	6802      	ldr	r2, [r0, #0]
 80013b2:	6893      	ldr	r3, [r2, #8]
 80013b4:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013b8:	2b06      	cmp	r3, #6
 80013ba:	d003      	beq.n	80013c4 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 80013bc:	6813      	ldr	r3, [r2, #0]
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80013ca:	2000      	movs	r0, #0
 80013cc:	4770      	bx	lr
	...

080013d0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80013d0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013d2:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <TIM_Base_SetConfig+0x70>)
 80013d4:	4290      	cmp	r0, r2
 80013d6:	d00a      	beq.n	80013ee <TIM_Base_SetConfig+0x1e>
 80013d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013dc:	d007      	beq.n	80013ee <TIM_Base_SetConfig+0x1e>
 80013de:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80013e2:	4290      	cmp	r0, r2
 80013e4:	d003      	beq.n	80013ee <TIM_Base_SetConfig+0x1e>
 80013e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ea:	4290      	cmp	r0, r2
 80013ec:	d103      	bne.n	80013f6 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80013f2:	684a      	ldr	r2, [r1, #4]
 80013f4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <TIM_Base_SetConfig+0x70>)
 80013f8:	4290      	cmp	r0, r2
 80013fa:	d00a      	beq.n	8001412 <TIM_Base_SetConfig+0x42>
 80013fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001400:	d007      	beq.n	8001412 <TIM_Base_SetConfig+0x42>
 8001402:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001406:	4290      	cmp	r0, r2
 8001408:	d003      	beq.n	8001412 <TIM_Base_SetConfig+0x42>
 800140a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800140e:	4290      	cmp	r0, r2
 8001410:	d103      	bne.n	800141a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001416:	68ca      	ldr	r2, [r1, #12]
 8001418:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800141a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800141e:	694a      	ldr	r2, [r1, #20]
 8001420:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001422:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001424:	688b      	ldr	r3, [r1, #8]
 8001426:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001428:	680b      	ldr	r3, [r1, #0]
 800142a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <TIM_Base_SetConfig+0x70>)
 800142e:	4298      	cmp	r0, r3
 8001430:	d002      	beq.n	8001438 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8001432:	2301      	movs	r3, #1
 8001434:	6143      	str	r3, [r0, #20]
}
 8001436:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001438:	690b      	ldr	r3, [r1, #16]
 800143a:	6303      	str	r3, [r0, #48]	; 0x30
 800143c:	e7f9      	b.n	8001432 <TIM_Base_SetConfig+0x62>
 800143e:	bf00      	nop
 8001440:	40012c00 	.word	0x40012c00

08001444 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001444:	b1a8      	cbz	r0, 8001472 <HAL_TIM_Base_Init+0x2e>
{
 8001446:	b510      	push	{r4, lr}
 8001448:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800144a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800144e:	b15b      	cbz	r3, 8001468 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8001450:	2302      	movs	r3, #2
 8001452:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001456:	1d21      	adds	r1, r4, #4
 8001458:	6820      	ldr	r0, [r4, #0]
 800145a:	f7ff ffb9 	bl	80013d0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800145e:	2301      	movs	r3, #1
 8001460:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001464:	2000      	movs	r0, #0
}
 8001466:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001468:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800146c:	f000 fe0e 	bl	800208c <HAL_TIM_Base_MspInit>
 8001470:	e7ee      	b.n	8001450 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001472:	2001      	movs	r0, #1
}
 8001474:	4770      	bx	lr

08001476 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001476:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001478:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800147a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800147e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001482:	430b      	orrs	r3, r1
 8001484:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001486:	6083      	str	r3, [r0, #8]
}
 8001488:	bc10      	pop	{r4}
 800148a:	4770      	bx	lr

0800148c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800148c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001490:	2b01      	cmp	r3, #1
 8001492:	d066      	beq.n	8001562 <HAL_TIM_ConfigClockSource+0xd6>
{
 8001494:	b510      	push	{r4, lr}
 8001496:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001498:	2301      	movs	r3, #1
 800149a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800149e:	2302      	movs	r3, #2
 80014a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80014a4:	6802      	ldr	r2, [r0, #0]
 80014a6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80014ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80014b0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80014b2:	680b      	ldr	r3, [r1, #0]
 80014b4:	2b40      	cmp	r3, #64	; 0x40
 80014b6:	d04a      	beq.n	800154e <HAL_TIM_ConfigClockSource+0xc2>
 80014b8:	d913      	bls.n	80014e2 <HAL_TIM_ConfigClockSource+0x56>
 80014ba:	2b60      	cmp	r3, #96	; 0x60
 80014bc:	d03d      	beq.n	800153a <HAL_TIM_ConfigClockSource+0xae>
 80014be:	d91e      	bls.n	80014fe <HAL_TIM_ConfigClockSource+0x72>
 80014c0:	2b70      	cmp	r3, #112	; 0x70
 80014c2:	d028      	beq.n	8001516 <HAL_TIM_ConfigClockSource+0x8a>
 80014c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014c8:	d130      	bne.n	800152c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80014ca:	68cb      	ldr	r3, [r1, #12]
 80014cc:	684a      	ldr	r2, [r1, #4]
 80014ce:	6889      	ldr	r1, [r1, #8]
 80014d0:	6800      	ldr	r0, [r0, #0]
 80014d2:	f7ff ffd0 	bl	8001476 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80014d6:	6822      	ldr	r2, [r4, #0]
 80014d8:	6893      	ldr	r3, [r2, #8]
 80014da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014de:	6093      	str	r3, [r2, #8]
      break;
 80014e0:	e024      	b.n	800152c <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d006      	beq.n	80014f4 <HAL_TIM_ConfigClockSource+0x68>
 80014e6:	d904      	bls.n	80014f2 <HAL_TIM_ConfigClockSource+0x66>
 80014e8:	2b20      	cmp	r3, #32
 80014ea:	d003      	beq.n	80014f4 <HAL_TIM_ConfigClockSource+0x68>
 80014ec:	2b30      	cmp	r3, #48	; 0x30
 80014ee:	d001      	beq.n	80014f4 <HAL_TIM_ConfigClockSource+0x68>
 80014f0:	e01c      	b.n	800152c <HAL_TIM_ConfigClockSource+0xa0>
 80014f2:	b9db      	cbnz	r3, 800152c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80014f4:	4619      	mov	r1, r3
 80014f6:	6820      	ldr	r0, [r4, #0]
 80014f8:	f7ff ff4f 	bl	800139a <TIM_ITRx_SetConfig>
      break;
 80014fc:	e016      	b.n	800152c <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80014fe:	2b50      	cmp	r3, #80	; 0x50
 8001500:	d114      	bne.n	800152c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001502:	68ca      	ldr	r2, [r1, #12]
 8001504:	6849      	ldr	r1, [r1, #4]
 8001506:	6800      	ldr	r0, [r0, #0]
 8001508:	f7ff ff22 	bl	8001350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800150c:	2150      	movs	r1, #80	; 0x50
 800150e:	6820      	ldr	r0, [r4, #0]
 8001510:	f7ff ff43 	bl	800139a <TIM_ITRx_SetConfig>
      break;
 8001514:	e00a      	b.n	800152c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8001516:	68cb      	ldr	r3, [r1, #12]
 8001518:	684a      	ldr	r2, [r1, #4]
 800151a:	6889      	ldr	r1, [r1, #8]
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	f7ff ffaa 	bl	8001476 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001522:	6822      	ldr	r2, [r4, #0]
 8001524:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001526:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800152a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800152c:	2301      	movs	r3, #1
 800152e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001532:	2000      	movs	r0, #0
 8001534:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001538:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800153a:	68ca      	ldr	r2, [r1, #12]
 800153c:	6849      	ldr	r1, [r1, #4]
 800153e:	6800      	ldr	r0, [r0, #0]
 8001540:	f7ff ff18 	bl	8001374 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001544:	2160      	movs	r1, #96	; 0x60
 8001546:	6820      	ldr	r0, [r4, #0]
 8001548:	f7ff ff27 	bl	800139a <TIM_ITRx_SetConfig>
      break;
 800154c:	e7ee      	b.n	800152c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800154e:	68ca      	ldr	r2, [r1, #12]
 8001550:	6849      	ldr	r1, [r1, #4]
 8001552:	6800      	ldr	r0, [r0, #0]
 8001554:	f7ff fefc 	bl	8001350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001558:	2140      	movs	r1, #64	; 0x40
 800155a:	6820      	ldr	r0, [r4, #0]
 800155c:	f7ff ff1d 	bl	800139a <TIM_ITRx_SetConfig>
      break;
 8001560:	e7e4      	b.n	800152c <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8001562:	2002      	movs	r0, #2
}
 8001564:	4770      	bx	lr

08001566 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001566:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800156a:	2b01      	cmp	r3, #1
 800156c:	d01c      	beq.n	80015a8 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 800156e:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8001570:	2601      	movs	r6, #1
 8001572:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001576:	2302      	movs	r3, #2
 8001578:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800157c:	6802      	ldr	r2, [r0, #0]
 800157e:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001580:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001582:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001586:	680c      	ldr	r4, [r1, #0]
 8001588:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800158a:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800158e:	684b      	ldr	r3, [r1, #4]
 8001590:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001592:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001594:	6802      	ldr	r2, [r0, #0]
 8001596:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001598:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800159c:	2300      	movs	r3, #0
 800159e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80015a2:	4618      	mov	r0, r3
}
 80015a4:	bc70      	pop	{r4, r5, r6}
 80015a6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80015a8:	2002      	movs	r0, #2
}
 80015aa:	4770      	bx	lr

080015ac <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015ac:	6802      	ldr	r2, [r0, #0]
 80015ae:	68d3      	ldr	r3, [r2, #12]
 80015b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80015b4:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015b6:	6802      	ldr	r2, [r0, #0]
 80015b8:	6953      	ldr	r3, [r2, #20]
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80015c0:	2320      	movs	r3, #32
 80015c2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80015c6:	4770      	bx	lr

080015c8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80015c8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b21      	cmp	r3, #33	; 0x21
 80015d0:	d12a      	bne.n	8001628 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015d2:	6883      	ldr	r3, [r0, #8]
 80015d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d8:	d016      	beq.n	8001608 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80015da:	6a03      	ldr	r3, [r0, #32]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	6202      	str	r2, [r0, #32]
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	6803      	ldr	r3, [r0, #0]
 80015e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80015e6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80015e8:	3b01      	subs	r3, #1
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	84c3      	strh	r3, [r0, #38]	; 0x26
 80015ee:	b9eb      	cbnz	r3, 800162c <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015f0:	6802      	ldr	r2, [r0, #0]
 80015f2:	68d3      	ldr	r3, [r2, #12]
 80015f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015f8:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80015fa:	6802      	ldr	r2, [r0, #0]
 80015fc:	68d3      	ldr	r3, [r2, #12]
 80015fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001602:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8001604:	2000      	movs	r0, #0
 8001606:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001608:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	6802      	ldr	r2, [r0, #0]
 800160e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001612:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001614:	6903      	ldr	r3, [r0, #16]
 8001616:	b91b      	cbnz	r3, 8001620 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8001618:	6a03      	ldr	r3, [r0, #32]
 800161a:	3302      	adds	r3, #2
 800161c:	6203      	str	r3, [r0, #32]
 800161e:	e7e2      	b.n	80015e6 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8001620:	6a03      	ldr	r3, [r0, #32]
 8001622:	3301      	adds	r3, #1
 8001624:	6203      	str	r3, [r0, #32]
 8001626:	e7de      	b.n	80015e6 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8001628:	2002      	movs	r0, #2
 800162a:	4770      	bx	lr
    return HAL_OK;
 800162c:	2000      	movs	r0, #0
  }
}
 800162e:	4770      	bx	lr

08001630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001630:	b538      	push	{r3, r4, r5, lr}
 8001632:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001634:	6802      	ldr	r2, [r0, #0]
 8001636:	6913      	ldr	r3, [r2, #16]
 8001638:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800163c:	68c1      	ldr	r1, [r0, #12]
 800163e:	430b      	orrs	r3, r1
 8001640:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001642:	6883      	ldr	r3, [r0, #8]
 8001644:	6902      	ldr	r2, [r0, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	6942      	ldr	r2, [r0, #20]
 800164a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800164c:	6801      	ldr	r1, [r0, #0]
 800164e:	68cb      	ldr	r3, [r1, #12]
 8001650:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001654:	f023 030c 	bic.w	r3, r3, #12
 8001658:	4313      	orrs	r3, r2
 800165a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800165c:	6802      	ldr	r2, [r0, #0]
 800165e:	6953      	ldr	r3, [r2, #20]
 8001660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001664:	6981      	ldr	r1, [r0, #24]
 8001666:	430b      	orrs	r3, r1
 8001668:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800166a:	6802      	ldr	r2, [r0, #0]
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <UART_SetConfig+0xc4>)
 800166e:	429a      	cmp	r2, r3
 8001670:	d01f      	beq.n	80016b2 <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001672:	f7ff fe4d 	bl	8001310 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001676:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800167a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800167e:	6863      	ldr	r3, [r4, #4]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	fbb0 f0f3 	udiv	r0, r0, r3
 8001686:	4d1c      	ldr	r5, [pc, #112]	; (80016f8 <UART_SetConfig+0xc8>)
 8001688:	fba5 3200 	umull	r3, r2, r5, r0
 800168c:	0951      	lsrs	r1, r2, #5
 800168e:	2264      	movs	r2, #100	; 0x64
 8001690:	fb02 0211 	mls	r2, r2, r1, r0
 8001694:	0113      	lsls	r3, r2, #4
 8001696:	3332      	adds	r3, #50	; 0x32
 8001698:	fba5 2303 	umull	r2, r3, r5, r3
 800169c:	095b      	lsrs	r3, r3, #5
 800169e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016a2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	6821      	ldr	r1, [r4, #0]
 80016ac:	4413      	add	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80016b0:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80016b2:	f7ff fe3d 	bl	8001330 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016be:	6863      	ldr	r3, [r4, #4]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80016c6:	4d0c      	ldr	r5, [pc, #48]	; (80016f8 <UART_SetConfig+0xc8>)
 80016c8:	fba5 3200 	umull	r3, r2, r5, r0
 80016cc:	0951      	lsrs	r1, r2, #5
 80016ce:	2264      	movs	r2, #100	; 0x64
 80016d0:	fb02 0211 	mls	r2, r2, r1, r0
 80016d4:	0113      	lsls	r3, r2, #4
 80016d6:	3332      	adds	r3, #50	; 0x32
 80016d8:	fba5 2303 	umull	r2, r3, r5, r3
 80016dc:	095b      	lsrs	r3, r3, #5
 80016de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016e2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	6821      	ldr	r1, [r4, #0]
 80016ec:	4413      	add	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]
 80016f0:	e7de      	b.n	80016b0 <UART_SetConfig+0x80>
 80016f2:	bf00      	nop
 80016f4:	40013800 	.word	0x40013800
 80016f8:	51eb851f 	.word	0x51eb851f

080016fc <HAL_UART_Init>:
  if (huart == NULL)
 80016fc:	b358      	cbz	r0, 8001756 <HAL_UART_Init+0x5a>
{
 80016fe:	b510      	push	{r4, lr}
 8001700:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001702:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001706:	b30b      	cbz	r3, 800174c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001708:	2324      	movs	r3, #36	; 0x24
 800170a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800170e:	6822      	ldr	r2, [r4, #0]
 8001710:	68d3      	ldr	r3, [r2, #12]
 8001712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001716:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff ff89 	bl	8001630 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800171e:	6822      	ldr	r2, [r4, #0]
 8001720:	6913      	ldr	r3, [r2, #16]
 8001722:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001726:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001728:	6822      	ldr	r2, [r4, #0]
 800172a:	6953      	ldr	r3, [r2, #20]
 800172c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001730:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001732:	6822      	ldr	r2, [r4, #0]
 8001734:	68d3      	ldr	r3, [r2, #12]
 8001736:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800173a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800173c:	2000      	movs	r0, #0
 800173e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001740:	2320      	movs	r3, #32
 8001742:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001746:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800174a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800174c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001750:	f000 fcb2 	bl	80020b8 <HAL_UART_MspInit>
 8001754:	e7d8      	b.n	8001708 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001756:	2001      	movs	r0, #1
}
 8001758:	4770      	bx	lr

0800175a <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800175a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b20      	cmp	r3, #32
 8001762:	d116      	bne.n	8001792 <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8001764:	b1b9      	cbz	r1, 8001796 <HAL_UART_Transmit_IT+0x3c>
 8001766:	b1c2      	cbz	r2, 800179a <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8001768:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800176c:	2b01      	cmp	r3, #1
 800176e:	d016      	beq.n	800179e <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8001770:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001772:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8001774:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001776:	2300      	movs	r3, #0
 8001778:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800177a:	2221      	movs	r2, #33	; 0x21
 800177c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001780:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001784:	6801      	ldr	r1, [r0, #0]
 8001786:	68ca      	ldr	r2, [r1, #12]
 8001788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800178c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800178e:	4618      	mov	r0, r3
 8001790:	4770      	bx	lr
    return HAL_BUSY;
 8001792:	2002      	movs	r0, #2
 8001794:	4770      	bx	lr
      return HAL_ERROR;
 8001796:	2001      	movs	r0, #1
 8001798:	4770      	bx	lr
 800179a:	2001      	movs	r0, #1
 800179c:	4770      	bx	lr
    __HAL_LOCK(huart);
 800179e:	2002      	movs	r0, #2
}
 80017a0:	4770      	bx	lr

080017a2 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80017a2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d120      	bne.n	80017ee <HAL_UART_Receive_IT+0x4c>
    if ((pData == NULL) || (Size == 0U))
 80017ac:	b309      	cbz	r1, 80017f2 <HAL_UART_Receive_IT+0x50>
 80017ae:	b312      	cbz	r2, 80017f6 <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 80017b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d020      	beq.n	80017fa <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 80017b8:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80017ba:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 80017bc:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017be:	2300      	movs	r3, #0
 80017c0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017c2:	2222      	movs	r2, #34	; 0x22
 80017c4:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 80017c8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80017cc:	6801      	ldr	r1, [r0, #0]
 80017ce:	68ca      	ldr	r2, [r1, #12]
 80017d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017d4:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80017d6:	6801      	ldr	r1, [r0, #0]
 80017d8:	694a      	ldr	r2, [r1, #20]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80017e0:	6801      	ldr	r1, [r0, #0]
 80017e2:	68ca      	ldr	r2, [r1, #12]
 80017e4:	f042 0220 	orr.w	r2, r2, #32
 80017e8:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80017ea:	4618      	mov	r0, r3
 80017ec:	4770      	bx	lr
    return HAL_BUSY;
 80017ee:	2002      	movs	r0, #2
 80017f0:	4770      	bx	lr
      return HAL_ERROR;
 80017f2:	2001      	movs	r0, #1
 80017f4:	4770      	bx	lr
 80017f6:	2001      	movs	r0, #1
 80017f8:	4770      	bx	lr
    __HAL_LOCK(huart);
 80017fa:	2002      	movs	r0, #2
}
 80017fc:	4770      	bx	lr

080017fe <UART_EndTransmit_IT>:
{
 80017fe:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001800:	6801      	ldr	r1, [r0, #0]
 8001802:	68cb      	ldr	r3, [r1, #12]
 8001804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001808:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800180a:	2320      	movs	r3, #32
 800180c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001810:	f000 fdca 	bl	80023a8 <HAL_UART_TxCpltCallback>
}
 8001814:	2000      	movs	r0, #0
 8001816:	bd08      	pop	{r3, pc}

08001818 <UART_Receive_IT>:
{
 8001818:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800181a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b22      	cmp	r3, #34	; 0x22
 8001822:	d145      	bne.n	80018b0 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001824:	6883      	ldr	r3, [r0, #8]
 8001826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800182a:	d00e      	beq.n	800184a <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800182c:	6903      	ldr	r3, [r0, #16]
 800182e:	bb03      	cbnz	r3, 8001872 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001830:	6803      	ldr	r3, [r0, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001836:	1c59      	adds	r1, r3, #1
 8001838:	6281      	str	r1, [r0, #40]	; 0x28
 800183a:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800183c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800183e:	3b01      	subs	r3, #1
 8001840:	b29b      	uxth	r3, r3
 8001842:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001844:	b1f3      	cbz	r3, 8001884 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8001846:	2000      	movs	r0, #0
 8001848:	e033      	b.n	80018b2 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800184a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800184c:	6903      	ldr	r3, [r0, #16]
 800184e:	b943      	cbnz	r3, 8001862 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001850:	6803      	ldr	r3, [r0, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001858:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800185a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800185c:	3302      	adds	r3, #2
 800185e:	6283      	str	r3, [r0, #40]	; 0x28
 8001860:	e7ec      	b.n	800183c <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001862:	6803      	ldr	r3, [r0, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800186a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800186c:	3301      	adds	r3, #1
 800186e:	6283      	str	r3, [r0, #40]	; 0x28
 8001870:	e7e4      	b.n	800183c <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001872:	6803      	ldr	r3, [r0, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001878:	1c51      	adds	r1, r2, #1
 800187a:	6281      	str	r1, [r0, #40]	; 0x28
 800187c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001880:	7013      	strb	r3, [r2, #0]
 8001882:	e7db      	b.n	800183c <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001884:	6802      	ldr	r2, [r0, #0]
 8001886:	68d3      	ldr	r3, [r2, #12]
 8001888:	f023 0320 	bic.w	r3, r3, #32
 800188c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800188e:	6802      	ldr	r2, [r0, #0]
 8001890:	68d3      	ldr	r3, [r2, #12]
 8001892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001896:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001898:	6802      	ldr	r2, [r0, #0]
 800189a:	6953      	ldr	r3, [r2, #20]
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80018a2:	2320      	movs	r3, #32
 80018a4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80018a8:	f000 fd64 	bl	8002374 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80018ac:	2000      	movs	r0, #0
 80018ae:	e000      	b.n	80018b2 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 80018b0:	2002      	movs	r0, #2
}
 80018b2:	bd08      	pop	{r3, pc}

080018b4 <HAL_UART_ErrorCallback>:
}
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_UART_IRQHandler>:
{
 80018b8:	b510      	push	{r4, lr}
 80018ba:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80018bc:	6802      	ldr	r2, [r0, #0]
 80018be:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80018c0:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80018c2:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 80018c4:	f013 000f 	ands.w	r0, r3, #15
 80018c8:	d105      	bne.n	80018d6 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80018ca:	f013 0f20 	tst.w	r3, #32
 80018ce:	d002      	beq.n	80018d6 <HAL_UART_IRQHandler+0x1e>
 80018d0:	f011 0f20 	tst.w	r1, #32
 80018d4:	d153      	bne.n	800197e <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d067      	beq.n	80019aa <HAL_UART_IRQHandler+0xf2>
 80018da:	f012 0201 	ands.w	r2, r2, #1
 80018de:	d102      	bne.n	80018e6 <HAL_UART_IRQHandler+0x2e>
 80018e0:	f411 7f90 	tst.w	r1, #288	; 0x120
 80018e4:	d061      	beq.n	80019aa <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80018e6:	f013 0f01 	tst.w	r3, #1
 80018ea:	d006      	beq.n	80018fa <HAL_UART_IRQHandler+0x42>
 80018ec:	f411 7f80 	tst.w	r1, #256	; 0x100
 80018f0:	d003      	beq.n	80018fa <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80018f4:	f040 0001 	orr.w	r0, r0, #1
 80018f8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018fa:	f013 0f04 	tst.w	r3, #4
 80018fe:	d004      	beq.n	800190a <HAL_UART_IRQHandler+0x52>
 8001900:	b11a      	cbz	r2, 800190a <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001902:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001904:	f040 0002 	orr.w	r0, r0, #2
 8001908:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800190a:	f013 0f02 	tst.w	r3, #2
 800190e:	d004      	beq.n	800191a <HAL_UART_IRQHandler+0x62>
 8001910:	b11a      	cbz	r2, 800191a <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001912:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001914:	f040 0004 	orr.w	r0, r0, #4
 8001918:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800191a:	f013 0f08 	tst.w	r3, #8
 800191e:	d004      	beq.n	800192a <HAL_UART_IRQHandler+0x72>
 8001920:	b11a      	cbz	r2, 800192a <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001922:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001924:	f042 0208 	orr.w	r2, r2, #8
 8001928:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800192a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800192c:	2a00      	cmp	r2, #0
 800192e:	d048      	beq.n	80019c2 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001930:	f013 0f20 	tst.w	r3, #32
 8001934:	d002      	beq.n	800193c <HAL_UART_IRQHandler+0x84>
 8001936:	f011 0f20 	tst.w	r1, #32
 800193a:	d124      	bne.n	8001986 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001944:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001946:	f012 0f08 	tst.w	r2, #8
 800194a:	d100      	bne.n	800194e <HAL_UART_IRQHandler+0x96>
 800194c:	b33b      	cbz	r3, 800199e <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff fe2c 	bl	80015ac <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	f012 0f40 	tst.w	r2, #64	; 0x40
 800195c:	d01b      	beq.n	8001996 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001964:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001968:	b18b      	cbz	r3, 800198e <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800196a:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <HAL_UART_IRQHandler+0x11c>)
 800196c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800196e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001970:	f7fe ffb6 	bl	80008e0 <HAL_DMA_Abort_IT>
 8001974:	b328      	cbz	r0, 80019c2 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001976:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001978:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800197a:	4798      	blx	r3
 800197c:	e021      	b.n	80019c2 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 800197e:	4620      	mov	r0, r4
 8001980:	f7ff ff4a 	bl	8001818 <UART_Receive_IT>
      return;
 8001984:	e01d      	b.n	80019c2 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8001986:	4620      	mov	r0, r4
 8001988:	f7ff ff46 	bl	8001818 <UART_Receive_IT>
 800198c:	e7d6      	b.n	800193c <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 800198e:	4620      	mov	r0, r4
 8001990:	f7ff ff90 	bl	80018b4 <HAL_UART_ErrorCallback>
 8001994:	e015      	b.n	80019c2 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8001996:	4620      	mov	r0, r4
 8001998:	f7ff ff8c 	bl	80018b4 <HAL_UART_ErrorCallback>
 800199c:	e011      	b.n	80019c2 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 800199e:	4620      	mov	r0, r4
 80019a0:	f7ff ff88 	bl	80018b4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80019a8:	e00b      	b.n	80019c2 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80019aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019ae:	d002      	beq.n	80019b6 <HAL_UART_IRQHandler+0xfe>
 80019b0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80019b4:	d106      	bne.n	80019c4 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80019b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80019ba:	d002      	beq.n	80019c2 <HAL_UART_IRQHandler+0x10a>
 80019bc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80019c0:	d104      	bne.n	80019cc <HAL_UART_IRQHandler+0x114>
}
 80019c2:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff fdff 	bl	80015c8 <UART_Transmit_IT>
    return;
 80019ca:	e7fa      	b.n	80019c2 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 80019cc:	4620      	mov	r0, r4
 80019ce:	f7ff ff16 	bl	80017fe <UART_EndTransmit_IT>
    return;
 80019d2:	e7f6      	b.n	80019c2 <HAL_UART_IRQHandler+0x10a>
 80019d4:	080019d9 	.word	0x080019d9

080019d8 <UART_DMAAbortOnError>:
{
 80019d8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019da:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80019e0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80019e2:	f7ff ff67 	bl	80018b4 <HAL_UART_ErrorCallback>
}
 80019e6:	bd08      	pop	{r3, pc}

080019e8 <calc_checksum>:

#include "PGA460.h"

extern uint8_t pga_mem_map[127];

uint8_t calc_checksum(uint8_t* input_array, uint8_t size){
 80019e8:	b430      	push	{r4, r5}

	uint16_t carry = 0;

	for (int i = 0; i < size; i++){
 80019ea:	2400      	movs	r4, #0
	uint16_t carry = 0;
 80019ec:	4623      	mov	r3, r4
	for (int i = 0; i < size; i++){
 80019ee:	e003      	b.n	80019f8 <calc_checksum+0x10>

			carry = carry + *(input_array+i) + 1;

		}else{

			carry = carry + *(input_array+i);
 80019f0:	4413      	add	r3, r2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	e009      	b.n	8001a0a <calc_checksum+0x22>
	for (int i = 0; i < size; i++){
 80019f6:	3401      	adds	r4, #1
 80019f8:	42a1      	cmp	r1, r4
 80019fa:	dd0b      	ble.n	8001a14 <calc_checksum+0x2c>
		if ((*(input_array+i) + carry) < carry){
 80019fc:	5d02      	ldrb	r2, [r0, r4]
 80019fe:	18d5      	adds	r5, r2, r3
 8001a00:	42ab      	cmp	r3, r5
 8001a02:	ddf5      	ble.n	80019f0 <calc_checksum+0x8>
			carry = carry + *(input_array+i) + 1;
 8001a04:	b2ab      	uxth	r3, r5
 8001a06:	3301      	adds	r3, #1
 8001a08:	b29b      	uxth	r3, r3

		}
		if (carry > 0xFF){
 8001a0a:	2bff      	cmp	r3, #255	; 0xff
 8001a0c:	d9f3      	bls.n	80019f6 <calc_checksum+0xe>
		  carry = carry - 255;
 8001a0e:	3bff      	subs	r3, #255	; 0xff
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	e7f0      	b.n	80019f6 <calc_checksum+0xe>
		}
	}

	return (~carry & 0x00FF);
 8001a14:	43d8      	mvns	r0, r3

}
 8001a16:	b2c0      	uxtb	r0, r0
 8001a18:	bc30      	pop	{r4, r5}
 8001a1a:	4770      	bx	lr

08001a1c <write_reg>:

void write_reg(uint8_t address, uint8_t data){
 8001a1c:	b510      	push	{r4, lr}

	static uint8_t arr[5]={0x55,0x0a};

	arr[2] = address;
 8001a1e:	4c06      	ldr	r4, [pc, #24]	; (8001a38 <write_reg+0x1c>)
 8001a20:	70a0      	strb	r0, [r4, #2]
	arr[3] = data;
 8001a22:	70e1      	strb	r1, [r4, #3]
	arr[4] = calc_checksum((arr+1), 3);
 8001a24:	2103      	movs	r1, #3
 8001a26:	1c60      	adds	r0, r4, #1
 8001a28:	f7ff ffde 	bl	80019e8 <calc_checksum>
 8001a2c:	7120      	strb	r0, [r4, #4]

	USART_WriteData(arr, 5);
 8001a2e:	2105      	movs	r1, #5
 8001a30:	4620      	mov	r0, r4
 8001a32:	f000 fc45 	bl	80022c0 <USART_WriteData>
}
 8001a36:	bd10      	pop	{r4, pc}
 8001a38:	20000008 	.word	0x20000008

08001a3c <burst_listen>:

void burst_listen(uint8_t number){
 8001a3c:	b510      	push	{r4, lr}

	static uint8_t arr[4]={0x55,0x00};

	arr[2] = number;
 8001a3e:	4c07      	ldr	r4, [pc, #28]	; (8001a5c <burst_listen+0x20>)
 8001a40:	72a0      	strb	r0, [r4, #10]
	arr[3] = calc_checksum((arr+1), 2);
 8001a42:	2102      	movs	r1, #2
 8001a44:	f104 0009 	add.w	r0, r4, #9
 8001a48:	f7ff ffce 	bl	80019e8 <calc_checksum>
 8001a4c:	72e0      	strb	r0, [r4, #11]

	USART_WriteData(arr, 4);
 8001a4e:	2104      	movs	r1, #4
 8001a50:	f104 0008 	add.w	r0, r4, #8
 8001a54:	f000 fc34 	bl	80022c0 <USART_WriteData>
}
 8001a58:	bd10      	pop	{r4, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008

08001a60 <request_data>:

//in case of data dump, or ultrasonic measurement, address is not important
void request_data(uint8_t cmd, uint8_t address){
 8001a60:	b510      	push	{r4, lr}

	static uint8_t arr[4]={0x55};

	switch (cmd){
 8001a62:	2807      	cmp	r0, #7
 8001a64:	d00e      	beq.n	8001a84 <request_data+0x24>
 8001a66:	2809      	cmp	r0, #9
 8001a68:	d016      	beq.n	8001a98 <request_data+0x38>
 8001a6a:	2805      	cmp	r0, #5
 8001a6c:	d000      	beq.n	8001a70 <request_data+0x10>
		arr[2] = address;
		arr[3] = calc_checksum((arr+1), 2);
		USART_WriteData(arr, 4);
		break;
	}
}
 8001a6e:	bd10      	pop	{r4, pc}
		arr[1] = 0x05;
 8001a70:	4811      	ldr	r0, [pc, #68]	; (8001ab8 <request_data+0x58>)
 8001a72:	2305      	movs	r3, #5
 8001a74:	7343      	strb	r3, [r0, #13]
		arr[2] = 0xfa;
 8001a76:	23fa      	movs	r3, #250	; 0xfa
 8001a78:	7383      	strb	r3, [r0, #14]
		USART_WriteData(arr, 3);
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	300c      	adds	r0, #12
 8001a7e:	f000 fc1f 	bl	80022c0 <USART_WriteData>
		break;
 8001a82:	e7f4      	b.n	8001a6e <request_data+0xe>
		arr[1] = 0x07;
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <request_data+0x58>)
 8001a86:	2307      	movs	r3, #7
 8001a88:	7343      	strb	r3, [r0, #13]
		arr[2] = 0xf8;
 8001a8a:	23f8      	movs	r3, #248	; 0xf8
 8001a8c:	7383      	strb	r3, [r0, #14]
		USART_WriteData(arr, 3);
 8001a8e:	2103      	movs	r1, #3
 8001a90:	300c      	adds	r0, #12
 8001a92:	f000 fc15 	bl	80022c0 <USART_WriteData>
		break;
 8001a96:	e7ea      	b.n	8001a6e <request_data+0xe>
		arr[1] = 0x09;
 8001a98:	4c07      	ldr	r4, [pc, #28]	; (8001ab8 <request_data+0x58>)
 8001a9a:	2309      	movs	r3, #9
 8001a9c:	7363      	strb	r3, [r4, #13]
		arr[2] = address;
 8001a9e:	73a1      	strb	r1, [r4, #14]
		arr[3] = calc_checksum((arr+1), 2);
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	f104 000d 	add.w	r0, r4, #13
 8001aa6:	f7ff ff9f 	bl	80019e8 <calc_checksum>
 8001aaa:	73e0      	strb	r0, [r4, #15]
		USART_WriteData(arr, 4);
 8001aac:	2104      	movs	r1, #4
 8001aae:	f104 000c 	add.w	r0, r4, #12
 8001ab2:	f000 fc05 	bl	80022c0 <USART_WriteData>
}
 8001ab6:	e7da      	b.n	8001a6e <request_data+0xe>
 8001ab8:	20000008 	.word	0x20000008

08001abc <get_data>:

uint8_t* get_data(uint8_t cmd){
 8001abc:	b510      	push	{r4, lr}

	static uint8_t rcv[130];

	uint8_t size=0;

	switch (cmd){
 8001abe:	2807      	cmp	r0, #7
 8001ac0:	d00a      	beq.n	8001ad8 <get_data+0x1c>
 8001ac2:	2809      	cmp	r0, #9
 8001ac4:	d00a      	beq.n	8001adc <get_data+0x20>
 8001ac6:	2805      	cmp	r0, #5
 8001ac8:	d00a      	beq.n	8001ae0 <get_data+0x24>
	uint8_t size=0;
 8001aca:	2100      	movs	r1, #0
	case 0x09:
		size = 3;
		break;
	}

	USART_ReadData((char*)rcv, size);
 8001acc:	4c05      	ldr	r4, [pc, #20]	; (8001ae4 <get_data+0x28>)
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f000 fc30 	bl	8002334 <USART_ReadData>
	return rcv;
}
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	bd10      	pop	{r4, pc}
		size = 130;
 8001ad8:	2182      	movs	r1, #130	; 0x82
		break;
 8001ada:	e7f7      	b.n	8001acc <get_data+0x10>
		size = 3;
 8001adc:	2103      	movs	r1, #3
		break;
 8001ade:	e7f5      	b.n	8001acc <get_data+0x10>
		size = 4*1+2;
 8001ae0:	2106      	movs	r1, #6
 8001ae2:	e7f3      	b.n	8001acc <get_data+0x10>
 8001ae4:	200000f8 	.word	0x200000f8

08001ae8 <init_pga_memory>:

int8_t init_pga_memory(void){
 8001ae8:	b538      	push	{r3, r4, r5, lr}
	  uint8_t i=0;
	  for(uint8_t add_offset=0; add_offset<91;add_offset++){
 8001aea:	2400      	movs	r4, #0
	  uint8_t i=0;
 8001aec:	4625      	mov	r5, r4
	  for(uint8_t add_offset=0; add_offset<91;add_offset++){
 8001aee:	e002      	b.n	8001af6 <init_pga_memory+0xe>
		  HAL_Delay(60);
		 write_reg(i,*(pga_mem_map+add_offset));

		  switch(i){
		  case 0x2b:
			  i = 0x40;
 8001af0:	2540      	movs	r5, #64	; 0x40
	  for(uint8_t add_offset=0; add_offset<91;add_offset++){
 8001af2:	3401      	adds	r4, #1
 8001af4:	b2e4      	uxtb	r4, r4
 8001af6:	2c5a      	cmp	r4, #90	; 0x5a
 8001af8:	d810      	bhi.n	8001b1c <init_pga_memory+0x34>
		  HAL_Delay(60);
 8001afa:	203c      	movs	r0, #60	; 0x3c
 8001afc:	f7fe fdcc 	bl	8000698 <HAL_Delay>
		 write_reg(i,*(pga_mem_map+add_offset));
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <init_pga_memory+0x98>)
 8001b02:	5d19      	ldrb	r1, [r3, r4]
 8001b04:	4628      	mov	r0, r5
 8001b06:	f7ff ff89 	bl	8001a1c <write_reg>
		  switch(i){
 8001b0a:	2d2b      	cmp	r5, #43	; 0x2b
 8001b0c:	d0f0      	beq.n	8001af0 <init_pga_memory+0x8>
 8001b0e:	2d4d      	cmp	r5, #77	; 0x4d
 8001b10:	d002      	beq.n	8001b18 <init_pga_memory+0x30>
			  break;
		  case 0x4d:
			  i=0x5f;
			  break;
		  default:
			  i++;
 8001b12:	3501      	adds	r5, #1
 8001b14:	b2ed      	uxtb	r5, r5
			  break;
 8001b16:	e7ec      	b.n	8001af2 <init_pga_memory+0xa>
			  i=0x5f;
 8001b18:	255f      	movs	r5, #95	; 0x5f
 8001b1a:	e7ea      	b.n	8001af2 <init_pga_memory+0xa>
		  }
	  }
	  uint8_t* resp;

	  request_data(0x09, 0x4c);
 8001b1c:	214c      	movs	r1, #76	; 0x4c
 8001b1e:	2009      	movs	r0, #9
 8001b20:	f7ff ff9e 	bl	8001a60 <request_data>
	  HAL_Delay(1);
 8001b24:	2001      	movs	r0, #1
 8001b26:	f7fe fdb7 	bl	8000698 <HAL_Delay>
	  resp = get_data(0x09);
 8001b2a:	2009      	movs	r0, #9
 8001b2c:	f7ff ffc6 	bl	8001abc <get_data>
	  if((*resp != 0x40) | ((*(resp+1)&0x0f) != 0x00)) return -1;
 8001b30:	7802      	ldrb	r2, [r0, #0]
 8001b32:	7843      	ldrb	r3, [r0, #1]
 8001b34:	f013 030f 	ands.w	r3, r3, #15
 8001b38:	bf18      	it	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2a40      	cmp	r2, #64	; 0x40
 8001b3e:	bf18      	it	ne
 8001b40:	f043 0301 	orrne.w	r3, r3, #1
 8001b44:	b9cb      	cbnz	r3, 8001b7a <init_pga_memory+0x92>

	  request_data(0x09, 0x4d);
 8001b46:	214d      	movs	r1, #77	; 0x4d
 8001b48:	2009      	movs	r0, #9
 8001b4a:	f7ff ff89 	bl	8001a60 <request_data>
	  HAL_Delay(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7fe fda2 	bl	8000698 <HAL_Delay>
	  resp = get_data(0x09);
 8001b54:	2009      	movs	r0, #9
 8001b56:	f7ff ffb1 	bl	8001abc <get_data>
	  if((*resp != 0x40) | ((*(resp+1)&0x7f) != 0x00)) return -1;
 8001b5a:	7802      	ldrb	r2, [r0, #0]
 8001b5c:	7843      	ldrb	r3, [r0, #1]
 8001b5e:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8001b62:	bf18      	it	ne
 8001b64:	2301      	movne	r3, #1
 8001b66:	2a40      	cmp	r2, #64	; 0x40
 8001b68:	bf18      	it	ne
 8001b6a:	f043 0301 	orrne.w	r3, r3, #1
 8001b6e:	b90b      	cbnz	r3, 8001b74 <init_pga_memory+0x8c>

	  return 0;
 8001b70:	2000      	movs	r0, #0
}
 8001b72:	bd38      	pop	{r3, r4, r5, pc}
	  if((*resp != 0x40) | ((*(resp+1)&0x7f) != 0x00)) return -1;
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	e7fb      	b.n	8001b72 <init_pga_memory+0x8a>
	  if((*resp != 0x40) | ((*(resp+1)&0x0f) != 0x00)) return -1;
 8001b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7e:	e7f8      	b.n	8001b72 <init_pga_memory+0x8a>
 8001b80:	20000018 	.word	0x20000018

08001b84 <init_single>:
void init_single(TIM_HandleTypeDef *htim){
 8001b84:	b510      	push	{r4, lr}
 8001b86:	4604      	mov	r4, r0
	htim->Init.Prescaler = 21;//43;
 8001b88:	2315      	movs	r3, #21
 8001b8a:	6043      	str	r3, [r0, #4]
	  if (HAL_TIM_Base_Init(htim) != HAL_OK)
 8001b8c:	f7ff fc5a 	bl	8001444 <HAL_TIM_Base_Init>
 8001b90:	b938      	cbnz	r0, 8001ba2 <init_single+0x1e>
	  {
	    Error_Handler();
	  }
	HAL_TIM_Base_Start(htim);
 8001b92:	4620      	mov	r0, r4
 8001b94:	f7ff fc09 	bl	80013aa <HAL_TIM_Base_Start>

	write_reg(0x40,0x00);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2040      	movs	r0, #64	; 0x40
 8001b9c:	f7ff ff3e 	bl	8001a1c <write_reg>
}
 8001ba0:	bd10      	pop	{r4, pc}
	    Error_Handler();
 8001ba2:	f000 f94d 	bl	8001e40 <Error_Handler>
 8001ba6:	e7f4      	b.n	8001b92 <init_single+0xe>

08001ba8 <single>:

}

uint8_t stage=0;

void single(uint16_t time){
 8001ba8:	b510      	push	{r4, lr}
 8001baa:	4604      	mov	r4, r0



	if(time>0&&time<10&&stage==0){
 8001bac:	1e43      	subs	r3, r0, #1
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d803      	bhi.n	8001bbc <single+0x14>
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <single+0x74>)
 8001bb6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001bba:	b193      	cbz	r3, 8001be2 <single+0x3a>
		burst_listen(1);
		stage=1;
		USART_ClearRx();
	}

	if(time>62259&&stage==1){
 8001bbc:	f24f 3333 	movw	r3, #62259	; 0xf333
 8001bc0:	429c      	cmp	r4, r3
 8001bc2:	d904      	bls.n	8001bce <single+0x26>
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <single+0x74>)
 8001bc6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d013      	beq.n	8001bf6 <single+0x4e>
		request_data(0x05,0x00);
		stage=2;
	}

	if(time>65520&&stage==2){
 8001bce:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001bd2:	429c      	cmp	r4, r3
 8001bd4:	d904      	bls.n	8001be0 <single+0x38>
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <single+0x74>)
 8001bd8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d013      	beq.n	8001c08 <single+0x60>
		single_callback(get_data(0x05));
		stage=0;
	}
}
 8001be0:	bd10      	pop	{r4, pc}
		burst_listen(1);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7ff ff2a 	bl	8001a3c <burst_listen>
		stage=1;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <single+0x74>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		USART_ClearRx();
 8001bf0:	f000 fbb8 	bl	8002364 <USART_ClearRx>
 8001bf4:	e7e2      	b.n	8001bbc <single+0x14>
		request_data(0x05,0x00);
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2005      	movs	r0, #5
 8001bfa:	f7ff ff31 	bl	8001a60 <request_data>
		stage=2;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <single+0x74>)
 8001c00:	2202      	movs	r2, #2
 8001c02:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8001c06:	e7e2      	b.n	8001bce <single+0x26>
		single_callback(get_data(0x05));
 8001c08:	2005      	movs	r0, #5
 8001c0a:	f7ff ff57 	bl	8001abc <get_data>
 8001c0e:	f000 f8b1 	bl	8001d74 <single_callback>
		stage=0;
 8001c12:	4b02      	ldr	r3, [pc, #8]	; (8001c1c <single+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8001c1a:	e7e1      	b.n	8001be0 <single+0x38>
 8001c1c:	200000f8 	.word	0x200000f8

08001c20 <CORE_EnterCriticalSection>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
#include "main.h"


void CORE_EnterCriticalSection(void){	
	__disable_irq();
}
 8001c22:	4770      	bx	lr

08001c24 <CORE_ExitCriticalSection>:
  __ASM volatile ("cpsie i" : : : "memory");
 8001c24:	b662      	cpsie	i

void CORE_ExitCriticalSection(void) {
	__enable_irq();
}
 8001c26:	4770      	bx	lr

08001c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c28:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <MX_GPIO_Init+0x2c>)
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	f042 0204 	orr.w	r2, r2, #4
 8001c32:	619a      	str	r2, [r3, #24]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	f002 0204 	and.w	r2, r2, #4
 8001c3a:	9200      	str	r2, [sp, #0]
 8001c3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	699a      	ldr	r2, [r3, #24]
 8001c40:	f042 0208 	orr.w	r2, r2, #8
 8001c44:	619a      	str	r2, [r3, #24]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	9b01      	ldr	r3, [sp, #4]

}
 8001c50:	b002      	add	sp, #8
 8001c52:	4770      	bx	lr
 8001c54:	40021000 	.word	0x40021000

08001c58 <MX_USART1_UART_Init>:
{
 8001c58:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001c5a:	4808      	ldr	r0, [pc, #32]	; (8001c7c <MX_USART1_UART_Init+0x24>)
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <MX_USART1_UART_Init+0x28>)
 8001c5e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001c60:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001c64:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c66:	2300      	movs	r3, #0
 8001c68:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c6a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c6c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c6e:	220c      	movs	r2, #12
 8001c70:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c76:	f7ff fd41 	bl	80016fc <HAL_UART_Init>
}
 8001c7a:	bd08      	pop	{r3, pc}
 8001c7c:	20000a44 	.word	0x20000a44
 8001c80:	40013800 	.word	0x40013800

08001c84 <MX_USART2_UART_Init>:
{
 8001c84:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001c86:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <MX_USART2_UART_Init+0x24>)
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MX_USART2_UART_Init+0x28>)
 8001c8a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001c8c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001c90:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c92:	2300      	movs	r3, #0
 8001c94:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c96:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c98:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ca2:	f7ff fd2b 	bl	80016fc <HAL_UART_Init>
}
 8001ca6:	bd08      	pop	{r3, pc}
 8001ca8:	20000acc 	.word	0x20000acc
 8001cac:	40004400 	.word	0x40004400

08001cb0 <MX_CAN_Init>:
{
 8001cb0:	b508      	push	{r3, lr}
  hcan.Instance = CAN1;
 8001cb2:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <MX_CAN_Init+0x30>)
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_CAN_Init+0x34>)
 8001cb6:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 8;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001cc0:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001cc2:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001cc6:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001cc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ccc:	6142      	str	r2, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001cce:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001cd0:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001cd2:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001cd4:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001cd6:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001cd8:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001cda:	f7fe fcf1 	bl	80006c0 <HAL_CAN_Init>
}
 8001cde:	bd08      	pop	{r3, pc}
 8001ce0:	20000a18 	.word	0x20000a18
 8001ce4:	40006400 	.word	0x40006400

08001ce8 <MX_I2C1_Init>:
{
 8001ce8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8001cea:	4809      	ldr	r0, [pc, #36]	; (8001d10 <MX_I2C1_Init+0x28>)
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_I2C1_Init+0x2c>)
 8001cee:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_I2C1_Init+0x30>)
 8001cf2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cf8:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cfe:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d00:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d02:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d04:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d06:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d08:	f7fe ff22 	bl	8000b50 <HAL_I2C_Init>
}
 8001d0c:	bd08      	pop	{r3, pc}
 8001d0e:	bf00      	nop
 8001d10:	200009c4 	.word	0x200009c4
 8001d14:	40005400 	.word	0x40005400
 8001d18:	000186a0 	.word	0x000186a0

08001d1c <MX_TIM1_Init>:
{
 8001d1c:	b530      	push	{r4, r5, lr}
 8001d1e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d20:	2400      	movs	r4, #0
 8001d22:	9402      	str	r4, [sp, #8]
 8001d24:	9403      	str	r4, [sp, #12]
 8001d26:	9404      	str	r4, [sp, #16]
 8001d28:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2a:	9400      	str	r4, [sp, #0]
 8001d2c:	9401      	str	r4, [sp, #4]
  htim1.Instance = TIM1;
 8001d2e:	4d0f      	ldr	r5, [pc, #60]	; (8001d6c <MX_TIM1_Init+0x50>)
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <MX_TIM1_Init+0x54>)
 8001d32:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 21;
 8001d34:	2315      	movs	r3, #21
 8001d36:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 65535;
 8001d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d3e:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d40:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d42:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d44:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d46:	4628      	mov	r0, r5
 8001d48:	f7ff fb7c 	bl	8001444 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d50:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d52:	a902      	add	r1, sp, #8
 8001d54:	4628      	mov	r0, r5
 8001d56:	f7ff fb99 	bl	800148c <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5c:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d5e:	4669      	mov	r1, sp
 8001d60:	4628      	mov	r0, r5
 8001d62:	f7ff fc00 	bl	8001566 <HAL_TIMEx_MasterConfigSynchronization>
}
 8001d66:	b007      	add	sp, #28
 8001d68:	bd30      	pop	{r4, r5, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000a88 	.word	0x20000a88
 8001d70:	40012c00 	.word	0x40012c00

08001d74 <single_callback>:
void single_callback(uint8_t* rcv){
 8001d74:	b508      	push	{r3, lr}
	dist = 300*((float)(*(rcv+1)<<8|*(rcv+2)))/2000000;
 8001d76:	7842      	ldrb	r2, [r0, #1]
 8001d78:	7880      	ldrb	r0, [r0, #2]
 8001d7a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8001d7e:	f7fe fa9f 	bl	80002c0 <__aeabi_i2f>
 8001d82:	4904      	ldr	r1, [pc, #16]	; (8001d94 <single_callback+0x20>)
 8001d84:	f7fe faf0 	bl	8000368 <__aeabi_fmul>
 8001d88:	4903      	ldr	r1, [pc, #12]	; (8001d98 <single_callback+0x24>)
 8001d8a:	f7fe fba1 	bl	80004d0 <__aeabi_fdiv>
 8001d8e:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <single_callback+0x28>)
 8001d90:	6018      	str	r0, [r3, #0]
}
 8001d92:	bd08      	pop	{r3, pc}
 8001d94:	43960000 	.word	0x43960000
 8001d98:	49f42400 	.word	0x49f42400
 8001d9c:	20000a40 	.word	0x20000a40

08001da0 <SystemClock_Config>:
{
 8001da0:	b530      	push	{r4, r5, lr}
 8001da2:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da4:	2220      	movs	r2, #32
 8001da6:	2100      	movs	r1, #0
 8001da8:	a807      	add	r0, sp, #28
 8001daa:	f000 fbb9 	bl	8002520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dae:	2400      	movs	r4, #0
 8001db0:	9401      	str	r4, [sp, #4]
 8001db2:	9402      	str	r4, [sp, #8]
 8001db4:	9403      	str	r4, [sp, #12]
 8001db6:	9404      	str	r4, [sp, #16]
 8001db8:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dba:	2502      	movs	r5, #2
 8001dbc:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc6:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8001dc8:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 8001dcc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dce:	a806      	add	r0, sp, #24
 8001dd0:	f7fe ffa4 	bl	8000d1c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd8:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dda:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ddc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001de0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de2:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001de4:	4629      	mov	r1, r5
 8001de6:	a801      	add	r0, sp, #4
 8001de8:	f7ff f9d8 	bl	800119c <HAL_RCC_ClockConfig>
}
 8001dec:	b011      	add	sp, #68	; 0x44
 8001dee:	bd30      	pop	{r4, r5, pc}

08001df0 <main>:
{
 8001df0:	b508      	push	{r3, lr}
  HAL_Init();
 8001df2:	f7fe fc2d 	bl	8000650 <HAL_Init>
  SystemClock_Config();
 8001df6:	f7ff ffd3 	bl	8001da0 <SystemClock_Config>
  MX_GPIO_Init();
 8001dfa:	f7ff ff15 	bl	8001c28 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001dfe:	f7ff ff2b 	bl	8001c58 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e02:	f7ff ff3f 	bl	8001c84 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8001e06:	f7ff ff53 	bl	8001cb0 <MX_CAN_Init>
  MX_I2C1_Init();
 8001e0a:	f7ff ff6d 	bl	8001ce8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001e0e:	f7ff ff85 	bl	8001d1c <MX_TIM1_Init>
  USART_Init();
 8001e12:	f000 fae9 	bl	80023e8 <USART_Init>
  init_pga_memory();
 8001e16:	f7ff fe67 	bl	8001ae8 <init_pga_memory>
  init_single(&htim1);
 8001e1a:	4806      	ldr	r0, [pc, #24]	; (8001e34 <main+0x44>)
 8001e1c:	f7ff feb2 	bl	8001b84 <init_single>
	single(TIM1->CNT);
 8001e20:	4c05      	ldr	r4, [pc, #20]	; (8001e38 <main+0x48>)
 8001e22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e24:	b280      	uxth	r0, r0
 8001e26:	f7ff febf 	bl	8001ba8 <single>
timmy = TIM1->CNT;
 8001e2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <main+0x4c>)
 8001e2e:	801a      	strh	r2, [r3, #0]
 8001e30:	e7f6      	b.n	8001e20 <main+0x30>
 8001e32:	bf00      	nop
 8001e34:	20000a88 	.word	0x20000a88
 8001e38:	40012c00 	.word	0x40012c00
 8001e3c:	20000ac8 	.word	0x20000ac8

08001e40 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e40:	4770      	bx	lr
	...

08001e44 <RingBuffer_Init>:
        ;
    }
}

bool RingBuffer_Init(RingBuffer *ringBuffer, char *dataBuffer, size_t dataBufferSize) 
{
 8001e44:	b508      	push	{r3, lr}
	assert(ringBuffer);
 8001e46:	b148      	cbz	r0, 8001e5c <RingBuffer_Init+0x18>
	assert(dataBuffer);
 8001e48:	b171      	cbz	r1, 8001e68 <RingBuffer_Init+0x24>
	assert(dataBufferSize > 0);
 8001e4a:	b19a      	cbz	r2, 8001e74 <RingBuffer_Init+0x30>
	
	if ((ringBuffer) && (dataBuffer) && (dataBufferSize > 0)) {
	  
	  ringBuffer->ptr=dataBuffer;
 8001e4c:	6041      	str	r1, [r0, #4]
	  ringBuffer->size=dataBufferSize;
 8001e4e:	6002      	str	r2, [r0, #0]
	  ringBuffer->head=0;
 8001e50:	2200      	movs	r2, #0
 8001e52:	6082      	str	r2, [r0, #8]
	  ringBuffer->tail=0;
 8001e54:	60c2      	str	r2, [r0, #12]
	  ringBuffer->count=0;
 8001e56:	6102      	str	r2, [r0, #16]
	  return true;
	}
	
	return false;
}
 8001e58:	2001      	movs	r0, #1
 8001e5a:	bd08      	pop	{r3, pc}
	assert(ringBuffer);
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <RingBuffer_Init+0x3c>)
 8001e5e:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <RingBuffer_Init+0x40>)
 8001e60:	210f      	movs	r1, #15
 8001e62:	4809      	ldr	r0, [pc, #36]	; (8001e88 <RingBuffer_Init+0x44>)
 8001e64:	f000 fb02 	bl	800246c <__assert_func>
	assert(dataBuffer);
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <RingBuffer_Init+0x48>)
 8001e6a:	4a06      	ldr	r2, [pc, #24]	; (8001e84 <RingBuffer_Init+0x40>)
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	4806      	ldr	r0, [pc, #24]	; (8001e88 <RingBuffer_Init+0x44>)
 8001e70:	f000 fafc 	bl	800246c <__assert_func>
	assert(dataBufferSize > 0);
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <RingBuffer_Init+0x4c>)
 8001e76:	4a03      	ldr	r2, [pc, #12]	; (8001e84 <RingBuffer_Init+0x40>)
 8001e78:	2111      	movs	r1, #17
 8001e7a:	4803      	ldr	r0, [pc, #12]	; (8001e88 <RingBuffer_Init+0x44>)
 8001e7c:	f000 faf6 	bl	800246c <__assert_func>
 8001e80:	08003494 	.word	0x08003494
 8001e84:	080033a0 	.word	0x080033a0
 8001e88:	080034a0 	.word	0x080034a0
 8001e8c:	080034b8 	.word	0x080034b8
 8001e90:	080034c4 	.word	0x080034c4

08001e94 <RingBuffer_Clear>:

bool RingBuffer_Clear(RingBuffer *ringBuffer)
{
 8001e94:	b508      	push	{r3, lr}
	assert(ringBuffer);
 8001e96:	b128      	cbz	r0, 8001ea4 <RingBuffer_Clear+0x10>
	
	if (ringBuffer) {
        ringBuffer->count  = 0;
 8001e98:	2200      	movs	r2, #0
 8001e9a:	6102      	str	r2, [r0, #16]
        ringBuffer->head   = 0;
 8001e9c:	6082      	str	r2, [r0, #8]
        ringBuffer->tail   = 0;
 8001e9e:	60c2      	str	r2, [r0, #12]
        return true;
	}
	return false;
}
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	bd08      	pop	{r3, pc}
	assert(ringBuffer);
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <RingBuffer_Clear+0x1c>)
 8001ea6:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <RingBuffer_Clear+0x20>)
 8001ea8:	2122      	movs	r1, #34	; 0x22
 8001eaa:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <RingBuffer_Clear+0x24>)
 8001eac:	f000 fade 	bl	800246c <__assert_func>
 8001eb0:	08003494 	.word	0x08003494
 8001eb4:	080033b0 	.word	0x080033b0
 8001eb8:	080034a0 	.word	0x080034a0

08001ebc <RingBuffer_PutChar>:
	return 0;	
}


bool RingBuffer_PutChar(RingBuffer *ringBuffer, char c)
{
 8001ebc:	b508      	push	{r3, lr}
	assert(ringBuffer);
 8001ebe:	b198      	cbz	r0, 8001ee8 <RingBuffer_PutChar+0x2c>
 8001ec0:	4603      	mov	r3, r0
	
	if (ringBuffer) {
		if (ringBuffer->count < ringBuffer->size)
 8001ec2:	6900      	ldr	r0, [r0, #16]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4290      	cmp	r0, r2
 8001ec8:	da17      	bge.n	8001efa <RingBuffer_PutChar+0x3e>
        {
          ringBuffer->ptr[ringBuffer->head] = c;
 8001eca:	6858      	ldr	r0, [r3, #4]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	5481      	strb	r1, [r0, r2]
          if(ringBuffer->head==ringBuffer->size-1) {
 8001ed0:	6899      	ldr	r1, [r3, #8]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	3a01      	subs	r2, #1
 8001ed6:	4291      	cmp	r1, r2
 8001ed8:	d00c      	beq.n	8001ef4 <RingBuffer_PutChar+0x38>
						ringBuffer->head=0;
					} else {
						ringBuffer->head++;
 8001eda:	3101      	adds	r1, #1
 8001edc:	6099      	str	r1, [r3, #8]
					}          
          ++ringBuffer->count;
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	3201      	adds	r2, #1
 8001ee2:	611a      	str	r2, [r3, #16]
          return true;
 8001ee4:	2001      	movs	r0, #1
        }
	}
	return false;
}
 8001ee6:	bd08      	pop	{r3, pc}
	assert(ringBuffer);
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <RingBuffer_PutChar+0x44>)
 8001eea:	4a06      	ldr	r2, [pc, #24]	; (8001f04 <RingBuffer_PutChar+0x48>)
 8001eec:	214f      	movs	r1, #79	; 0x4f
 8001eee:	4806      	ldr	r0, [pc, #24]	; (8001f08 <RingBuffer_PutChar+0x4c>)
 8001ef0:	f000 fabc 	bl	800246c <__assert_func>
						ringBuffer->head=0;
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	e7f1      	b.n	8001ede <RingBuffer_PutChar+0x22>
	return false;
 8001efa:	2000      	movs	r0, #0
 8001efc:	e7f3      	b.n	8001ee6 <RingBuffer_PutChar+0x2a>
 8001efe:	bf00      	nop
 8001f00:	08003494 	.word	0x08003494
 8001f04:	08003404 	.word	0x08003404
 8001f08:	080034a0 	.word	0x080034a0

08001f0c <RingBuffer_GetChar>:

bool RingBuffer_GetChar(RingBuffer *ringBuffer, char *c)
{
 8001f0c:	b508      	push	{r3, lr}
	assert(ringBuffer);
 8001f0e:	b1a0      	cbz	r0, 8001f3a <RingBuffer_GetChar+0x2e>
 8001f10:	4603      	mov	r3, r0
	assert(c);
 8001f12:	b1c1      	cbz	r1, 8001f46 <RingBuffer_GetChar+0x3a>
	
  if ((ringBuffer) && (c)) {
    if (ringBuffer->count>0)
 8001f14:	6902      	ldr	r2, [r0, #16]
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	dd1e      	ble.n	8001f58 <RingBuffer_GetChar+0x4c>
    {
      *c = ringBuffer->ptr[ringBuffer->tail];
 8001f1a:	6840      	ldr	r0, [r0, #4]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	5c82      	ldrb	r2, [r0, r2]
 8001f20:	700a      	strb	r2, [r1, #0]
       if(ringBuffer->tail==ringBuffer->size-1) {
 8001f22:	68d9      	ldr	r1, [r3, #12]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	3a01      	subs	r2, #1
 8001f28:	4291      	cmp	r1, r2
 8001f2a:	d012      	beq.n	8001f52 <RingBuffer_GetChar+0x46>
				 ringBuffer->tail=0;
			 } else {
				 ringBuffer->tail++;
 8001f2c:	3101      	adds	r1, #1
 8001f2e:	60d9      	str	r1, [r3, #12]
			 }
      --ringBuffer->count;
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	3a01      	subs	r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
			return true;
 8001f36:	2001      	movs	r0, #1
    }		
	}
	return false;
}
 8001f38:	bd08      	pop	{r3, pc}
	assert(ringBuffer);
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <RingBuffer_GetChar+0x50>)
 8001f3c:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <RingBuffer_GetChar+0x54>)
 8001f3e:	2163      	movs	r1, #99	; 0x63
 8001f40:	4808      	ldr	r0, [pc, #32]	; (8001f64 <RingBuffer_GetChar+0x58>)
 8001f42:	f000 fa93 	bl	800246c <__assert_func>
	assert(c);
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <RingBuffer_GetChar+0x5c>)
 8001f48:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <RingBuffer_GetChar+0x54>)
 8001f4a:	2164      	movs	r1, #100	; 0x64
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <RingBuffer_GetChar+0x58>)
 8001f4e:	f000 fa8d 	bl	800246c <__assert_func>
				 ringBuffer->tail=0;
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	e7eb      	b.n	8001f30 <RingBuffer_GetChar+0x24>
	return false;
 8001f58:	2000      	movs	r0, #0
 8001f5a:	e7ed      	b.n	8001f38 <RingBuffer_GetChar+0x2c>
 8001f5c:	08003494 	.word	0x08003494
 8001f60:	08003418 	.word	0x08003418
 8001f64:	080034a0 	.word	0x080034a0
 8001f68:	080034d8 	.word	0x080034d8

08001f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f6c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_MspInit+0x3c>)
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	619a      	str	r2, [r3, #24]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	f002 0201 	and.w	r2, r2, #1
 8001f7e:	9200      	str	r2, [sp, #0]
 8001f80:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	69da      	ldr	r2, [r3, #28]
 8001f84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f88:	61da      	str	r2, [r3, #28]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f94:	4a05      	ldr	r2, [pc, #20]	; (8001fac <HAL_MspInit+0x40>)
 8001f96:	6853      	ldr	r3, [r2, #4]
 8001f98:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa2:	b002      	add	sp, #8
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010000 	.word	0x40010000

08001fb0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001fb0:	b530      	push	{r4, r5, lr}
 8001fb2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9302      	str	r3, [sp, #8]
 8001fb8:	9303      	str	r3, [sp, #12]
 8001fba:	9304      	str	r3, [sp, #16]
 8001fbc:	9305      	str	r3, [sp, #20]
  if(hcan->Instance==CAN1)
 8001fbe:	6802      	ldr	r2, [r0, #0]
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_CAN_MspInit+0x70>)
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d001      	beq.n	8001fca <HAL_CAN_MspInit+0x1a>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001fc6:	b007      	add	sp, #28
 8001fc8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001fca:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001fce:	69da      	ldr	r2, [r3, #28]
 8001fd0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001fd4:	61da      	str	r2, [r3, #28]
 8001fd6:	69da      	ldr	r2, [r3, #28]
 8001fd8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001fdc:	9200      	str	r2, [sp, #0]
 8001fde:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	f042 0204 	orr.w	r2, r2, #4
 8001fe6:	619a      	str	r2, [r3, #24]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ff2:	ac06      	add	r4, sp, #24
 8001ff4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ff8:	f844 3d10 	str.w	r3, [r4, #-16]!
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	4d09      	ldr	r5, [pc, #36]	; (8002024 <HAL_CAN_MspInit+0x74>)
 8001ffe:	4621      	mov	r1, r4
 8002000:	4628      	mov	r0, r5
 8002002:	f7fe fcb9 	bl	8000978 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	4621      	mov	r1, r4
 8002016:	4628      	mov	r0, r5
 8002018:	f7fe fcae 	bl	8000978 <HAL_GPIO_Init>
}
 800201c:	e7d3      	b.n	8001fc6 <HAL_CAN_MspInit+0x16>
 800201e:	bf00      	nop
 8002020:	40006400 	.word	0x40006400
 8002024:	40010800 	.word	0x40010800

08002028 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002028:	b510      	push	{r4, lr}
 800202a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	2300      	movs	r3, #0
 800202e:	9302      	str	r3, [sp, #8]
 8002030:	9303      	str	r3, [sp, #12]
 8002032:	9304      	str	r3, [sp, #16]
 8002034:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8002036:	6802      	ldr	r2, [r0, #0]
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_I2C_MspInit+0x58>)
 800203a:	429a      	cmp	r2, r3
 800203c:	d001      	beq.n	8002042 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800203e:	b006      	add	sp, #24
 8002040:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	4c10      	ldr	r4, [pc, #64]	; (8002084 <HAL_I2C_MspInit+0x5c>)
 8002044:	69a3      	ldr	r3, [r4, #24]
 8002046:	f043 0308 	orr.w	r3, r3, #8
 800204a:	61a3      	str	r3, [r4, #24]
 800204c:	69a3      	ldr	r3, [r4, #24]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002056:	23c0      	movs	r3, #192	; 0xc0
 8002058:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800205a:	2312      	movs	r3, #18
 800205c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	a902      	add	r1, sp, #8
 8002064:	4808      	ldr	r0, [pc, #32]	; (8002088 <HAL_I2C_MspInit+0x60>)
 8002066:	f7fe fc87 	bl	8000978 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800206a:	69e3      	ldr	r3, [r4, #28]
 800206c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002070:	61e3      	str	r3, [r4, #28]
 8002072:	69e3      	ldr	r3, [r4, #28]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	9b01      	ldr	r3, [sp, #4]
}
 800207c:	e7df      	b.n	800203e <HAL_I2C_MspInit+0x16>
 800207e:	bf00      	nop
 8002080:	40005400 	.word	0x40005400
 8002084:	40021000 	.word	0x40021000
 8002088:	40010c00 	.word	0x40010c00

0800208c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 800208c:	6802      	ldr	r2, [r0, #0]
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_TIM_Base_MspInit+0x28>)
 8002090:	429a      	cmp	r2, r3
 8002092:	d000      	beq.n	8002096 <HAL_TIM_Base_MspInit+0xa>
 8002094:	4770      	bx	lr
{
 8002096:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002098:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a2:	619a      	str	r2, [r3, #24]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020ae:	b002      	add	sp, #8
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40012c00 	.word	0x40012c00

080020b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b8:	b530      	push	{r4, r5, lr}
 80020ba:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	2300      	movs	r3, #0
 80020be:	9304      	str	r3, [sp, #16]
 80020c0:	9305      	str	r3, [sp, #20]
 80020c2:	9306      	str	r3, [sp, #24]
 80020c4:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80020c6:	6803      	ldr	r3, [r0, #0]
 80020c8:	4a34      	ldr	r2, [pc, #208]	; (800219c <HAL_UART_MspInit+0xe4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d004      	beq.n	80020d8 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80020ce:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <HAL_UART_MspInit+0xe8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d033      	beq.n	800213c <HAL_UART_MspInit+0x84>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020d4:	b009      	add	sp, #36	; 0x24
 80020d6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80020d8:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <HAL_UART_MspInit+0xec>)
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020e0:	619a      	str	r2, [r3, #24]
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80020e8:	9200      	str	r2, [sp, #0]
 80020ea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	f042 0204 	orr.w	r2, r2, #4
 80020f2:	619a      	str	r2, [r3, #24]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002102:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	4d26      	ldr	r5, [pc, #152]	; (80021a8 <HAL_UART_MspInit+0xf0>)
 800210e:	a904      	add	r1, sp, #16
 8002110:	4628      	mov	r0, r5
 8002112:	f7fe fc31 	bl	8000978 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800211a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211c:	2400      	movs	r4, #0
 800211e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	a904      	add	r1, sp, #16
 8002124:	4628      	mov	r0, r5
 8002126:	f7fe fc27 	bl	8000978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800212a:	4622      	mov	r2, r4
 800212c:	4621      	mov	r1, r4
 800212e:	2025      	movs	r0, #37	; 0x25
 8002130:	f7fe fb7e 	bl	8000830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002134:	2025      	movs	r0, #37	; 0x25
 8002136:	f7fe fbaf 	bl	8000898 <HAL_NVIC_EnableIRQ>
 800213a:	e7cb      	b.n	80020d4 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_UART_MspInit+0xec>)
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002144:	61da      	str	r2, [r3, #28]
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800214c:	9202      	str	r2, [sp, #8]
 800214e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	f042 0204 	orr.w	r2, r2, #4
 8002156:	619a      	str	r2, [r3, #24]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	9303      	str	r3, [sp, #12]
 8002160:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002162:	2304      	movs	r3, #4
 8002164:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	4d0e      	ldr	r5, [pc, #56]	; (80021a8 <HAL_UART_MspInit+0xf0>)
 8002170:	a904      	add	r1, sp, #16
 8002172:	4628      	mov	r0, r5
 8002174:	f7fe fc00 	bl	8000978 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002178:	2308      	movs	r3, #8
 800217a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217c:	2400      	movs	r4, #0
 800217e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	a904      	add	r1, sp, #16
 8002184:	4628      	mov	r0, r5
 8002186:	f7fe fbf7 	bl	8000978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800218a:	4622      	mov	r2, r4
 800218c:	4621      	mov	r1, r4
 800218e:	2026      	movs	r0, #38	; 0x26
 8002190:	f7fe fb4e 	bl	8000830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002194:	2026      	movs	r0, #38	; 0x26
 8002196:	f7fe fb7f 	bl	8000898 <HAL_NVIC_EnableIRQ>
}
 800219a:	e79b      	b.n	80020d4 <HAL_UART_MspInit+0x1c>
 800219c:	40013800 	.word	0x40013800
 80021a0:	40004400 	.word	0x40004400
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010800 	.word	0x40010800

080021ac <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021ac:	4770      	bx	lr

080021ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ae:	e7fe      	b.n	80021ae <HardFault_Handler>

080021b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b0:	e7fe      	b.n	80021b0 <MemManage_Handler>

080021b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b2:	e7fe      	b.n	80021b2 <BusFault_Handler>

080021b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b4:	e7fe      	b.n	80021b4 <UsageFault_Handler>

080021b6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b6:	4770      	bx	lr

080021b8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b8:	4770      	bx	lr

080021ba <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ba:	4770      	bx	lr

080021bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021be:	f7fe fa59 	bl	8000674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c2:	bd08      	pop	{r3, pc}

080021c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021c6:	4802      	ldr	r0, [pc, #8]	; (80021d0 <USART1_IRQHandler+0xc>)
 80021c8:	f7ff fb76 	bl	80018b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021cc:	bd08      	pop	{r3, pc}
 80021ce:	bf00      	nop
 80021d0:	20000a44 	.word	0x20000a44

080021d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021d6:	4802      	ldr	r0, [pc, #8]	; (80021e0 <USART2_IRQHandler+0xc>)
 80021d8:	f7ff fb6e 	bl	80018b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021dc:	bd08      	pop	{r3, pc}
 80021de:	bf00      	nop
 80021e0:	20000acc 	.word	0x20000acc

080021e4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80021e4:	2001      	movs	r0, #1
 80021e6:	4770      	bx	lr

080021e8 <_kill>:

int _kill(int pid, int sig)
{
 80021e8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80021ea:	f000 f95d 	bl	80024a8 <__errno>
 80021ee:	2316      	movs	r3, #22
 80021f0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80021f2:	f04f 30ff 	mov.w	r0, #4294967295
 80021f6:	bd08      	pop	{r3, pc}

080021f8 <_exit>:

void _exit (int status)
{
 80021f8:	b508      	push	{r3, lr}
	_kill(status, -1);
 80021fa:	f04f 31ff 	mov.w	r1, #4294967295
 80021fe:	f7ff fff3 	bl	80021e8 <_kill>
 8002202:	e7fe      	b.n	8002202 <_exit+0xa>

08002204 <_read>:
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002204:	b570      	push	{r4, r5, r6, lr}
 8002206:	460d      	mov	r5, r1
 8002208:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220a:	2400      	movs	r4, #0
 800220c:	e004      	b.n	8002218 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 800220e:	f3af 8000 	nop.w
 8002212:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002214:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8002216:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002218:	42b4      	cmp	r4, r6
 800221a:	dbf8      	blt.n	800220e <_read+0xa>
	}

return len;
}
 800221c:	4630      	mov	r0, r6
 800221e:	bd70      	pop	{r4, r5, r6, pc}

08002220 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002220:	b508      	push	{r3, lr}
 8002222:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002224:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <_sbrk+0x34>)
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	b142      	cbz	r2, 800223c <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <_sbrk+0x34>)
 800222c:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800222e:	4403      	add	r3, r0
 8002230:	466a      	mov	r2, sp
 8002232:	4293      	cmp	r3, r2
 8002234:	d806      	bhi.n	8002244 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002236:	4a07      	ldr	r2, [pc, #28]	; (8002254 <_sbrk+0x34>)
 8002238:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800223a:	bd08      	pop	{r3, pc}
		heap_end = &end;
 800223c:	4a05      	ldr	r2, [pc, #20]	; (8002254 <_sbrk+0x34>)
 800223e:	4906      	ldr	r1, [pc, #24]	; (8002258 <_sbrk+0x38>)
 8002240:	6011      	str	r1, [r2, #0]
 8002242:	e7f2      	b.n	800222a <_sbrk+0xa>
		errno = ENOMEM;
 8002244:	f000 f930 	bl	80024a8 <__errno>
 8002248:	230c      	movs	r3, #12
 800224a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	e7f3      	b.n	800223a <_sbrk+0x1a>
 8002252:	bf00      	nop
 8002254:	2000017c 	.word	0x2000017c
 8002258:	20000b10 	.word	0x20000b10

0800225c <_close>:

int _close(int file)
{
	return -1;
}
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	4770      	bx	lr

08002262 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002266:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002268:	2000      	movs	r0, #0
 800226a:	4770      	bx	lr

0800226c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800226c:	2001      	movs	r0, #1
 800226e:	4770      	bx	lr

08002270 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002270:	2000      	movs	r0, #0
 8002272:	4770      	bx	lr

08002274 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <SystemInit+0x40>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	f042 0201 	orr.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <SystemInit+0x44>)
 8002282:	400a      	ands	r2, r1
 8002284:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800228c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002290:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002298:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80022a0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80022a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80022a6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SystemInit+0x48>)
 80022aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ae:	609a      	str	r2, [r3, #8]
#endif 
}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	f8ff0000 	.word	0xf8ff0000
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <USART_WriteData>:
int _write(int file, char *ptr, int len) {
	USART_WriteData(ptr,len);
	return len;
}

size_t USART_WriteData(const void *data, size_t dataSize){
 80022c0:	b570      	push	{r4, r5, r6, lr}
 80022c2:	4606      	mov	r6, r0
 80022c4:	460d      	mov	r5, r1
	size_t i = 0;
 80022c6:	2400      	movs	r4, #0
	
	static char c;


	for(;i<dataSize;i++)
 80022c8:	42ac      	cmp	r4, r5
 80022ca:	d20e      	bcs.n	80022ea <USART_WriteData+0x2a>
	{
		
		CORE_EnterCriticalSection();
 80022cc:	f7ff fca8 	bl	8001c20 <CORE_EnterCriticalSection>
		if(!RingBuffer_PutChar(&USART_RingBuffer_Tx, *((char*)data+i)) ) {
 80022d0:	5d31      	ldrb	r1, [r6, r4]
 80022d2:	4812      	ldr	r0, [pc, #72]	; (800231c <USART_WriteData+0x5c>)
 80022d4:	f7ff fdf2 	bl	8001ebc <RingBuffer_PutChar>
 80022d8:	b118      	cbz	r0, 80022e2 <USART_WriteData+0x22>
			CORE_ExitCriticalSection();
			return false;
		}
		CORE_ExitCriticalSection();
 80022da:	f7ff fca3 	bl	8001c24 <CORE_ExitCriticalSection>
	for(;i<dataSize;i++)
 80022de:	3401      	adds	r4, #1
 80022e0:	e7f2      	b.n	80022c8 <USART_WriteData+0x8>
			CORE_ExitCriticalSection();
 80022e2:	f7ff fc9f 	bl	8001c24 <CORE_ExitCriticalSection>
			return false;
 80022e6:	2400      	movs	r4, #0
 80022e8:	e006      	b.n	80022f8 <USART_WriteData+0x38>
	}
	CORE_EnterCriticalSection();
 80022ea:	f7ff fc99 	bl	8001c20 <CORE_EnterCriticalSection>
	if(!flag){
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <USART_WriteData+0x5c>)
 80022f0:	7d1b      	ldrb	r3, [r3, #20]
 80022f2:	b11b      	cbz	r3, 80022fc <USART_WriteData+0x3c>
		RingBuffer_GetChar(&USART_RingBuffer_Tx, &c );
		HAL_UART_Transmit_IT(&HUARTx, &c,1);
		flag=1;
	}
	CORE_ExitCriticalSection();
 80022f4:	f7ff fc96 	bl	8001c24 <CORE_ExitCriticalSection>
	return i;
}
 80022f8:	4620      	mov	r0, r4
 80022fa:	bd70      	pop	{r4, r5, r6, pc}
		RingBuffer_GetChar(&USART_RingBuffer_Tx, &c );
 80022fc:	4d07      	ldr	r5, [pc, #28]	; (800231c <USART_WriteData+0x5c>)
 80022fe:	f105 0615 	add.w	r6, r5, #21
 8002302:	4631      	mov	r1, r6
 8002304:	4628      	mov	r0, r5
 8002306:	f7ff fe01 	bl	8001f0c <RingBuffer_GetChar>
		HAL_UART_Transmit_IT(&HUARTx, &c,1);
 800230a:	2201      	movs	r2, #1
 800230c:	4631      	mov	r1, r6
 800230e:	4804      	ldr	r0, [pc, #16]	; (8002320 <USART_WriteData+0x60>)
 8002310:	f7ff fa23 	bl	800175a <HAL_UART_Transmit_IT>
		flag=1;
 8002314:	2301      	movs	r3, #1
 8002316:	752b      	strb	r3, [r5, #20]
 8002318:	e7ec      	b.n	80022f4 <USART_WriteData+0x34>
 800231a:	bf00      	nop
 800231c:	20000184 	.word	0x20000184
 8002320:	20000a44 	.word	0x20000a44

08002324 <_write>:
int _write(int file, char *ptr, int len) {
 8002324:	b510      	push	{r4, lr}
 8002326:	4608      	mov	r0, r1
 8002328:	4614      	mov	r4, r2
	USART_WriteData(ptr,len);
 800232a:	4611      	mov	r1, r2
 800232c:	f7ff ffc8 	bl	80022c0 <USART_WriteData>
}
 8002330:	4620      	mov	r0, r4
 8002332:	bd10      	pop	{r4, pc}

08002334 <USART_ReadData>:
	
	return true;
}


size_t USART_ReadData(char *data, size_t maxSize){
 8002334:	b570      	push	{r4, r5, r6, lr}
 8002336:	4606      	mov	r6, r0
 8002338:	460d      	mov	r5, r1
	size_t i = 0;
 800233a:	2400      	movs	r4, #0
	
	for(;i<maxSize;i++)
 800233c:	42ac      	cmp	r4, r5
 800233e:	d20c      	bcs.n	800235a <USART_ReadData+0x26>
	{	
		CORE_EnterCriticalSection();
 8002340:	f7ff fc6e 	bl	8001c20 <CORE_EnterCriticalSection>
		if(!RingBuffer_GetChar(&USART_RingBuffer_Rx, &data[i] )) {
 8002344:	1931      	adds	r1, r6, r4
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <USART_ReadData+0x2c>)
 8002348:	f7ff fde0 	bl	8001f0c <RingBuffer_GetChar>
 800234c:	b118      	cbz	r0, 8002356 <USART_ReadData+0x22>
			CORE_ExitCriticalSection();	
			break;
		}
		CORE_ExitCriticalSection();	
 800234e:	f7ff fc69 	bl	8001c24 <CORE_ExitCriticalSection>
	for(;i<maxSize;i++)
 8002352:	3401      	adds	r4, #1
 8002354:	e7f2      	b.n	800233c <USART_ReadData+0x8>
			CORE_ExitCriticalSection();	
 8002356:	f7ff fc65 	bl	8001c24 <CORE_ExitCriticalSection>
	}
	return i;
}
 800235a:	4620      	mov	r0, r4
 800235c:	bd70      	pop	{r4, r5, r6, pc}
 800235e:	bf00      	nop
 8002360:	2000019c 	.word	0x2000019c

08002364 <USART_ClearRx>:

void USART_ClearRx(void){
 8002364:	b508      	push	{r3, lr}
	RingBuffer_Clear(&USART_RingBuffer_Rx);
 8002366:	4802      	ldr	r0, [pc, #8]	; (8002370 <USART_ClearRx+0xc>)
 8002368:	f7ff fd94 	bl	8001e94 <RingBuffer_Clear>
}
 800236c:	bd08      	pop	{r3, pc}
 800236e:	bf00      	nop
 8002370:	2000019c 	.word	0x2000019c

08002374 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){

	if(huart->Instance==HUARTx.Instance){
 8002374:	6802      	ldr	r2, [r0, #0]
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_UART_RxCpltCallback+0x2c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d000      	beq.n	8002380 <HAL_UART_RxCpltCallback+0xc>
 800237e:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002380:	b510      	push	{r4, lr}

		RingBuffer_PutChar(&USART_RingBuffer_Rx, rcv_char);
 8002382:	4c08      	ldr	r4, [pc, #32]	; (80023a4 <HAL_UART_RxCpltCallback+0x30>)
 8002384:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8002388:	f104 0018 	add.w	r0, r4, #24
 800238c:	f7ff fd96 	bl	8001ebc <RingBuffer_PutChar>
		HAL_UART_Receive_IT(&HUARTx,&rcv_char,1);
 8002390:	2201      	movs	r2, #1
 8002392:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <HAL_UART_RxCpltCallback+0x2c>)
 8002398:	f7ff fa03 	bl	80017a2 <HAL_UART_Receive_IT>

	}

}
 800239c:	bd10      	pop	{r4, pc}
 800239e:	bf00      	nop
 80023a0:	20000a44 	.word	0x20000a44
 80023a4:	20000184 	.word	0x20000184

080023a8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){

	if(huart->Instance==HUARTx.Instance){
 80023a8:	6802      	ldr	r2, [r0, #0]
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_UART_TxCpltCallback+0x38>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d000      	beq.n	80023b4 <HAL_UART_TxCpltCallback+0xc>
 80023b2:	4770      	bx	lr
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80023b4:	b510      	push	{r4, lr}
		static char c;

		if(RingBuffer_GetChar(&USART_RingBuffer_Tx, &c) == true)
 80023b6:	480b      	ldr	r0, [pc, #44]	; (80023e4 <HAL_UART_TxCpltCallback+0x3c>)
 80023b8:	f100 012d 	add.w	r1, r0, #45	; 0x2d
 80023bc:	f7ff fda6 	bl	8001f0c <RingBuffer_GetChar>
 80023c0:	b918      	cbnz	r0, 80023ca <HAL_UART_TxCpltCallback+0x22>
		{
			//c=*"a";
			HAL_UART_Transmit_IT(&HUARTx, &c,1);
			flag=1;
		}else flag=0;
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_UART_TxCpltCallback+0x3c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	751a      	strb	r2, [r3, #20]

	}

}
 80023c8:	bd10      	pop	{r4, pc}
			HAL_UART_Transmit_IT(&HUARTx, &c,1);
 80023ca:	4c06      	ldr	r4, [pc, #24]	; (80023e4 <HAL_UART_TxCpltCallback+0x3c>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	f104 012d 	add.w	r1, r4, #45	; 0x2d
 80023d2:	4803      	ldr	r0, [pc, #12]	; (80023e0 <HAL_UART_TxCpltCallback+0x38>)
 80023d4:	f7ff f9c1 	bl	800175a <HAL_UART_Transmit_IT>
			flag=1;
 80023d8:	2301      	movs	r3, #1
 80023da:	7523      	strb	r3, [r4, #20]
 80023dc:	e7f4      	b.n	80023c8 <HAL_UART_TxCpltCallback+0x20>
 80023de:	bf00      	nop
 80023e0:	20000a44 	.word	0x20000a44
 80023e4:	20000184 	.word	0x20000184

080023e8 <USART_Init>:


/**
  * This function initialize ring buffers, USART device and enable receive interrupt.  
  */
void USART_Init(void){
 80023e8:	b510      	push	{r4, lr}
	// initialize ring buffers
	RingBuffer_Init(&USART_RingBuffer_Tx, RingBufferData_Tx, sizeof(RingBufferData_Tx));
 80023ea:	4c0b      	ldr	r4, [pc, #44]	; (8002418 <USART_Init+0x30>)
 80023ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80023f4:	4620      	mov	r0, r4
 80023f6:	f7ff fd25 	bl	8001e44 <RingBuffer_Init>
	RingBuffer_Init(&USART_RingBuffer_Rx, RingBufferData_Rx, sizeof(RingBufferData_Rx));
 80023fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023fe:	f504 6186 	add.w	r1, r4, #1072	; 0x430
 8002402:	f104 0018 	add.w	r0, r4, #24
 8002406:	f7ff fd1d 	bl	8001e44 <RingBuffer_Init>
	
	HAL_UART_Receive_IT(&HUARTx,&rcv_char,1);
 800240a:	2201      	movs	r2, #1
 800240c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <USART_Init+0x34>)
 8002412:	f7ff f9c6 	bl	80017a2 <HAL_UART_Receive_IT>


}
 8002416:	bd10      	pop	{r4, pc}
 8002418:	20000184 	.word	0x20000184
 800241c:	20000a44 	.word	0x20000a44

08002420 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002420:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002422:	e003      	b.n	800242c <LoopCopyDataInit>

08002424 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002426:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002428:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800242a:	3104      	adds	r1, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800242c:	480a      	ldr	r0, [pc, #40]	; (8002458 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002430:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002432:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002434:	d3f6      	bcc.n	8002424 <CopyDataInit>
  ldr r2, =_sbss
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002438:	e002      	b.n	8002440 <LoopFillZerobss>

0800243a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800243c:	f842 3b04 	str.w	r3, [r2], #4

08002440 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002442:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002444:	d3f9      	bcc.n	800243a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002446:	f7ff ff15 	bl	8002274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244a:	f000 f845 	bl	80024d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800244e:	f7ff fccf 	bl	8001df0 <main>
  bx lr
 8002452:	4770      	bx	lr
  ldr r3, =_sidata
 8002454:	080035b8 	.word	0x080035b8
  ldr r0, =_sdata
 8002458:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800245c:	200000dc 	.word	0x200000dc
  ldr r2, =_sbss
 8002460:	200000dc 	.word	0x200000dc
  ldr r3, = _ebss
 8002464:	20000b10 	.word	0x20000b10

08002468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC1_2_IRQHandler>
	...

0800246c <__assert_func>:
 800246c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800246e:	461c      	mov	r4, r3
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <__assert_func+0x2c>)
 8002472:	4605      	mov	r5, r0
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68d8      	ldr	r0, [r3, #12]
 8002478:	b152      	cbz	r2, 8002490 <__assert_func+0x24>
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <__assert_func+0x30>)
 800247c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002480:	9100      	str	r1, [sp, #0]
 8002482:	462b      	mov	r3, r5
 8002484:	4622      	mov	r2, r4
 8002486:	4906      	ldr	r1, [pc, #24]	; (80024a0 <__assert_func+0x34>)
 8002488:	f000 f814 	bl	80024b4 <fiprintf>
 800248c:	f000 fbd6 	bl	8002c3c <abort>
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <__assert_func+0x38>)
 8002492:	461a      	mov	r2, r3
 8002494:	e7f2      	b.n	800247c <__assert_func+0x10>
 8002496:	bf00      	nop
 8002498:	20000078 	.word	0x20000078
 800249c:	080034dc 	.word	0x080034dc
 80024a0:	080034e9 	.word	0x080034e9
 80024a4:	08003517 	.word	0x08003517

080024a8 <__errno>:
 80024a8:	4b01      	ldr	r3, [pc, #4]	; (80024b0 <__errno+0x8>)
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000078 	.word	0x20000078

080024b4 <fiprintf>:
 80024b4:	b40e      	push	{r1, r2, r3}
 80024b6:	b503      	push	{r0, r1, lr}
 80024b8:	4601      	mov	r1, r0
 80024ba:	ab03      	add	r3, sp, #12
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <fiprintf+0x20>)
 80024be:	f853 2b04 	ldr.w	r2, [r3], #4
 80024c2:	6800      	ldr	r0, [r0, #0]
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	f000 f85b 	bl	8002580 <_vfiprintf_r>
 80024ca:	b002      	add	sp, #8
 80024cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80024d0:	b003      	add	sp, #12
 80024d2:	4770      	bx	lr
 80024d4:	20000078 	.word	0x20000078

080024d8 <__libc_init_array>:
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	2500      	movs	r5, #0
 80024dc:	4e0c      	ldr	r6, [pc, #48]	; (8002510 <__libc_init_array+0x38>)
 80024de:	4c0d      	ldr	r4, [pc, #52]	; (8002514 <__libc_init_array+0x3c>)
 80024e0:	1ba4      	subs	r4, r4, r6
 80024e2:	10a4      	asrs	r4, r4, #2
 80024e4:	42a5      	cmp	r5, r4
 80024e6:	d109      	bne.n	80024fc <__libc_init_array+0x24>
 80024e8:	f000 ff44 	bl	8003374 <_init>
 80024ec:	2500      	movs	r5, #0
 80024ee:	4e0a      	ldr	r6, [pc, #40]	; (8002518 <__libc_init_array+0x40>)
 80024f0:	4c0a      	ldr	r4, [pc, #40]	; (800251c <__libc_init_array+0x44>)
 80024f2:	1ba4      	subs	r4, r4, r6
 80024f4:	10a4      	asrs	r4, r4, #2
 80024f6:	42a5      	cmp	r5, r4
 80024f8:	d105      	bne.n	8002506 <__libc_init_array+0x2e>
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002500:	4798      	blx	r3
 8002502:	3501      	adds	r5, #1
 8002504:	e7ee      	b.n	80024e4 <__libc_init_array+0xc>
 8002506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800250a:	4798      	blx	r3
 800250c:	3501      	adds	r5, #1
 800250e:	e7f2      	b.n	80024f6 <__libc_init_array+0x1e>
 8002510:	080035b0 	.word	0x080035b0
 8002514:	080035b0 	.word	0x080035b0
 8002518:	080035b0 	.word	0x080035b0
 800251c:	080035b4 	.word	0x080035b4

08002520 <memset>:
 8002520:	4603      	mov	r3, r0
 8002522:	4402      	add	r2, r0
 8002524:	4293      	cmp	r3, r2
 8002526:	d100      	bne.n	800252a <memset+0xa>
 8002528:	4770      	bx	lr
 800252a:	f803 1b01 	strb.w	r1, [r3], #1
 800252e:	e7f9      	b.n	8002524 <memset+0x4>

08002530 <__sfputc_r>:
 8002530:	6893      	ldr	r3, [r2, #8]
 8002532:	b410      	push	{r4}
 8002534:	3b01      	subs	r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	6093      	str	r3, [r2, #8]
 800253a:	da07      	bge.n	800254c <__sfputc_r+0x1c>
 800253c:	6994      	ldr	r4, [r2, #24]
 800253e:	42a3      	cmp	r3, r4
 8002540:	db01      	blt.n	8002546 <__sfputc_r+0x16>
 8002542:	290a      	cmp	r1, #10
 8002544:	d102      	bne.n	800254c <__sfputc_r+0x1c>
 8002546:	bc10      	pop	{r4}
 8002548:	f000 bab8 	b.w	8002abc <__swbuf_r>
 800254c:	6813      	ldr	r3, [r2, #0]
 800254e:	1c58      	adds	r0, r3, #1
 8002550:	6010      	str	r0, [r2, #0]
 8002552:	7019      	strb	r1, [r3, #0]
 8002554:	4608      	mov	r0, r1
 8002556:	bc10      	pop	{r4}
 8002558:	4770      	bx	lr

0800255a <__sfputs_r>:
 800255a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255c:	4606      	mov	r6, r0
 800255e:	460f      	mov	r7, r1
 8002560:	4614      	mov	r4, r2
 8002562:	18d5      	adds	r5, r2, r3
 8002564:	42ac      	cmp	r4, r5
 8002566:	d101      	bne.n	800256c <__sfputs_r+0x12>
 8002568:	2000      	movs	r0, #0
 800256a:	e007      	b.n	800257c <__sfputs_r+0x22>
 800256c:	463a      	mov	r2, r7
 800256e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002572:	4630      	mov	r0, r6
 8002574:	f7ff ffdc 	bl	8002530 <__sfputc_r>
 8002578:	1c43      	adds	r3, r0, #1
 800257a:	d1f3      	bne.n	8002564 <__sfputs_r+0xa>
 800257c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002580 <_vfiprintf_r>:
 8002580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002584:	460c      	mov	r4, r1
 8002586:	b09d      	sub	sp, #116	; 0x74
 8002588:	4617      	mov	r7, r2
 800258a:	461d      	mov	r5, r3
 800258c:	4606      	mov	r6, r0
 800258e:	b118      	cbz	r0, 8002598 <_vfiprintf_r+0x18>
 8002590:	6983      	ldr	r3, [r0, #24]
 8002592:	b90b      	cbnz	r3, 8002598 <_vfiprintf_r+0x18>
 8002594:	f000 fc4a 	bl	8002e2c <__sinit>
 8002598:	4b7c      	ldr	r3, [pc, #496]	; (800278c <_vfiprintf_r+0x20c>)
 800259a:	429c      	cmp	r4, r3
 800259c:	d158      	bne.n	8002650 <_vfiprintf_r+0xd0>
 800259e:	6874      	ldr	r4, [r6, #4]
 80025a0:	89a3      	ldrh	r3, [r4, #12]
 80025a2:	0718      	lsls	r0, r3, #28
 80025a4:	d55e      	bpl.n	8002664 <_vfiprintf_r+0xe4>
 80025a6:	6923      	ldr	r3, [r4, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d05b      	beq.n	8002664 <_vfiprintf_r+0xe4>
 80025ac:	2300      	movs	r3, #0
 80025ae:	9309      	str	r3, [sp, #36]	; 0x24
 80025b0:	2320      	movs	r3, #32
 80025b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025b6:	2330      	movs	r3, #48	; 0x30
 80025b8:	f04f 0b01 	mov.w	fp, #1
 80025bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025c0:	9503      	str	r5, [sp, #12]
 80025c2:	46b8      	mov	r8, r7
 80025c4:	4645      	mov	r5, r8
 80025c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80025ca:	b10b      	cbz	r3, 80025d0 <_vfiprintf_r+0x50>
 80025cc:	2b25      	cmp	r3, #37	; 0x25
 80025ce:	d154      	bne.n	800267a <_vfiprintf_r+0xfa>
 80025d0:	ebb8 0a07 	subs.w	sl, r8, r7
 80025d4:	d00b      	beq.n	80025ee <_vfiprintf_r+0x6e>
 80025d6:	4653      	mov	r3, sl
 80025d8:	463a      	mov	r2, r7
 80025da:	4621      	mov	r1, r4
 80025dc:	4630      	mov	r0, r6
 80025de:	f7ff ffbc 	bl	800255a <__sfputs_r>
 80025e2:	3001      	adds	r0, #1
 80025e4:	f000 80c2 	beq.w	800276c <_vfiprintf_r+0x1ec>
 80025e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025ea:	4453      	add	r3, sl
 80025ec:	9309      	str	r3, [sp, #36]	; 0x24
 80025ee:	f898 3000 	ldrb.w	r3, [r8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80ba 	beq.w	800276c <_vfiprintf_r+0x1ec>
 80025f8:	2300      	movs	r3, #0
 80025fa:	f04f 32ff 	mov.w	r2, #4294967295
 80025fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002602:	9304      	str	r3, [sp, #16]
 8002604:	9307      	str	r3, [sp, #28]
 8002606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800260a:	931a      	str	r3, [sp, #104]	; 0x68
 800260c:	46a8      	mov	r8, r5
 800260e:	2205      	movs	r2, #5
 8002610:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002614:	485e      	ldr	r0, [pc, #376]	; (8002790 <_vfiprintf_r+0x210>)
 8002616:	f000 fcf7 	bl	8003008 <memchr>
 800261a:	9b04      	ldr	r3, [sp, #16]
 800261c:	bb78      	cbnz	r0, 800267e <_vfiprintf_r+0xfe>
 800261e:	06d9      	lsls	r1, r3, #27
 8002620:	bf44      	itt	mi
 8002622:	2220      	movmi	r2, #32
 8002624:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002628:	071a      	lsls	r2, r3, #28
 800262a:	bf44      	itt	mi
 800262c:	222b      	movmi	r2, #43	; 0x2b
 800262e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002632:	782a      	ldrb	r2, [r5, #0]
 8002634:	2a2a      	cmp	r2, #42	; 0x2a
 8002636:	d02a      	beq.n	800268e <_vfiprintf_r+0x10e>
 8002638:	46a8      	mov	r8, r5
 800263a:	2000      	movs	r0, #0
 800263c:	250a      	movs	r5, #10
 800263e:	9a07      	ldr	r2, [sp, #28]
 8002640:	4641      	mov	r1, r8
 8002642:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002646:	3b30      	subs	r3, #48	; 0x30
 8002648:	2b09      	cmp	r3, #9
 800264a:	d969      	bls.n	8002720 <_vfiprintf_r+0x1a0>
 800264c:	b360      	cbz	r0, 80026a8 <_vfiprintf_r+0x128>
 800264e:	e024      	b.n	800269a <_vfiprintf_r+0x11a>
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <_vfiprintf_r+0x214>)
 8002652:	429c      	cmp	r4, r3
 8002654:	d101      	bne.n	800265a <_vfiprintf_r+0xda>
 8002656:	68b4      	ldr	r4, [r6, #8]
 8002658:	e7a2      	b.n	80025a0 <_vfiprintf_r+0x20>
 800265a:	4b4f      	ldr	r3, [pc, #316]	; (8002798 <_vfiprintf_r+0x218>)
 800265c:	429c      	cmp	r4, r3
 800265e:	bf08      	it	eq
 8002660:	68f4      	ldreq	r4, [r6, #12]
 8002662:	e79d      	b.n	80025a0 <_vfiprintf_r+0x20>
 8002664:	4621      	mov	r1, r4
 8002666:	4630      	mov	r0, r6
 8002668:	f000 fa7a 	bl	8002b60 <__swsetup_r>
 800266c:	2800      	cmp	r0, #0
 800266e:	d09d      	beq.n	80025ac <_vfiprintf_r+0x2c>
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	b01d      	add	sp, #116	; 0x74
 8002676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800267a:	46a8      	mov	r8, r5
 800267c:	e7a2      	b.n	80025c4 <_vfiprintf_r+0x44>
 800267e:	4a44      	ldr	r2, [pc, #272]	; (8002790 <_vfiprintf_r+0x210>)
 8002680:	4645      	mov	r5, r8
 8002682:	1a80      	subs	r0, r0, r2
 8002684:	fa0b f000 	lsl.w	r0, fp, r0
 8002688:	4318      	orrs	r0, r3
 800268a:	9004      	str	r0, [sp, #16]
 800268c:	e7be      	b.n	800260c <_vfiprintf_r+0x8c>
 800268e:	9a03      	ldr	r2, [sp, #12]
 8002690:	1d11      	adds	r1, r2, #4
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	9103      	str	r1, [sp, #12]
 8002696:	2a00      	cmp	r2, #0
 8002698:	db01      	blt.n	800269e <_vfiprintf_r+0x11e>
 800269a:	9207      	str	r2, [sp, #28]
 800269c:	e004      	b.n	80026a8 <_vfiprintf_r+0x128>
 800269e:	4252      	negs	r2, r2
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	9207      	str	r2, [sp, #28]
 80026a6:	9304      	str	r3, [sp, #16]
 80026a8:	f898 3000 	ldrb.w	r3, [r8]
 80026ac:	2b2e      	cmp	r3, #46	; 0x2e
 80026ae:	d10e      	bne.n	80026ce <_vfiprintf_r+0x14e>
 80026b0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80026b4:	2b2a      	cmp	r3, #42	; 0x2a
 80026b6:	d138      	bne.n	800272a <_vfiprintf_r+0x1aa>
 80026b8:	9b03      	ldr	r3, [sp, #12]
 80026ba:	f108 0802 	add.w	r8, r8, #2
 80026be:	1d1a      	adds	r2, r3, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	9203      	str	r2, [sp, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bfb8      	it	lt
 80026c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80026cc:	9305      	str	r3, [sp, #20]
 80026ce:	4d33      	ldr	r5, [pc, #204]	; (800279c <_vfiprintf_r+0x21c>)
 80026d0:	2203      	movs	r2, #3
 80026d2:	f898 1000 	ldrb.w	r1, [r8]
 80026d6:	4628      	mov	r0, r5
 80026d8:	f000 fc96 	bl	8003008 <memchr>
 80026dc:	b140      	cbz	r0, 80026f0 <_vfiprintf_r+0x170>
 80026de:	2340      	movs	r3, #64	; 0x40
 80026e0:	1b40      	subs	r0, r0, r5
 80026e2:	fa03 f000 	lsl.w	r0, r3, r0
 80026e6:	9b04      	ldr	r3, [sp, #16]
 80026e8:	f108 0801 	add.w	r8, r8, #1
 80026ec:	4303      	orrs	r3, r0
 80026ee:	9304      	str	r3, [sp, #16]
 80026f0:	f898 1000 	ldrb.w	r1, [r8]
 80026f4:	2206      	movs	r2, #6
 80026f6:	482a      	ldr	r0, [pc, #168]	; (80027a0 <_vfiprintf_r+0x220>)
 80026f8:	f108 0701 	add.w	r7, r8, #1
 80026fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002700:	f000 fc82 	bl	8003008 <memchr>
 8002704:	2800      	cmp	r0, #0
 8002706:	d037      	beq.n	8002778 <_vfiprintf_r+0x1f8>
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <_vfiprintf_r+0x224>)
 800270a:	bb1b      	cbnz	r3, 8002754 <_vfiprintf_r+0x1d4>
 800270c:	9b03      	ldr	r3, [sp, #12]
 800270e:	3307      	adds	r3, #7
 8002710:	f023 0307 	bic.w	r3, r3, #7
 8002714:	3308      	adds	r3, #8
 8002716:	9303      	str	r3, [sp, #12]
 8002718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800271a:	444b      	add	r3, r9
 800271c:	9309      	str	r3, [sp, #36]	; 0x24
 800271e:	e750      	b.n	80025c2 <_vfiprintf_r+0x42>
 8002720:	fb05 3202 	mla	r2, r5, r2, r3
 8002724:	2001      	movs	r0, #1
 8002726:	4688      	mov	r8, r1
 8002728:	e78a      	b.n	8002640 <_vfiprintf_r+0xc0>
 800272a:	2300      	movs	r3, #0
 800272c:	250a      	movs	r5, #10
 800272e:	4619      	mov	r1, r3
 8002730:	f108 0801 	add.w	r8, r8, #1
 8002734:	9305      	str	r3, [sp, #20]
 8002736:	4640      	mov	r0, r8
 8002738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800273c:	3a30      	subs	r2, #48	; 0x30
 800273e:	2a09      	cmp	r2, #9
 8002740:	d903      	bls.n	800274a <_vfiprintf_r+0x1ca>
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0c3      	beq.n	80026ce <_vfiprintf_r+0x14e>
 8002746:	9105      	str	r1, [sp, #20]
 8002748:	e7c1      	b.n	80026ce <_vfiprintf_r+0x14e>
 800274a:	fb05 2101 	mla	r1, r5, r1, r2
 800274e:	2301      	movs	r3, #1
 8002750:	4680      	mov	r8, r0
 8002752:	e7f0      	b.n	8002736 <_vfiprintf_r+0x1b6>
 8002754:	ab03      	add	r3, sp, #12
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	4622      	mov	r2, r4
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <_vfiprintf_r+0x228>)
 800275c:	a904      	add	r1, sp, #16
 800275e:	4630      	mov	r0, r6
 8002760:	f3af 8000 	nop.w
 8002764:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002768:	4681      	mov	r9, r0
 800276a:	d1d5      	bne.n	8002718 <_vfiprintf_r+0x198>
 800276c:	89a3      	ldrh	r3, [r4, #12]
 800276e:	065b      	lsls	r3, r3, #25
 8002770:	f53f af7e 	bmi.w	8002670 <_vfiprintf_r+0xf0>
 8002774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002776:	e77d      	b.n	8002674 <_vfiprintf_r+0xf4>
 8002778:	ab03      	add	r3, sp, #12
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4622      	mov	r2, r4
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <_vfiprintf_r+0x228>)
 8002780:	a904      	add	r1, sp, #16
 8002782:	4630      	mov	r0, r6
 8002784:	f000 f888 	bl	8002898 <_printf_i>
 8002788:	e7ec      	b.n	8002764 <_vfiprintf_r+0x1e4>
 800278a:	bf00      	nop
 800278c:	08003570 	.word	0x08003570
 8002790:	0800351c 	.word	0x0800351c
 8002794:	08003590 	.word	0x08003590
 8002798:	08003550 	.word	0x08003550
 800279c:	08003522 	.word	0x08003522
 80027a0:	08003526 	.word	0x08003526
 80027a4:	00000000 	.word	0x00000000
 80027a8:	0800255b 	.word	0x0800255b

080027ac <_printf_common>:
 80027ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b0:	4691      	mov	r9, r2
 80027b2:	461f      	mov	r7, r3
 80027b4:	688a      	ldr	r2, [r1, #8]
 80027b6:	690b      	ldr	r3, [r1, #16]
 80027b8:	4606      	mov	r6, r0
 80027ba:	4293      	cmp	r3, r2
 80027bc:	bfb8      	it	lt
 80027be:	4613      	movlt	r3, r2
 80027c0:	f8c9 3000 	str.w	r3, [r9]
 80027c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027c8:	460c      	mov	r4, r1
 80027ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027ce:	b112      	cbz	r2, 80027d6 <_printf_common+0x2a>
 80027d0:	3301      	adds	r3, #1
 80027d2:	f8c9 3000 	str.w	r3, [r9]
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	0699      	lsls	r1, r3, #26
 80027da:	bf42      	ittt	mi
 80027dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80027e0:	3302      	addmi	r3, #2
 80027e2:	f8c9 3000 	strmi.w	r3, [r9]
 80027e6:	6825      	ldr	r5, [r4, #0]
 80027e8:	f015 0506 	ands.w	r5, r5, #6
 80027ec:	d107      	bne.n	80027fe <_printf_common+0x52>
 80027ee:	f104 0a19 	add.w	sl, r4, #25
 80027f2:	68e3      	ldr	r3, [r4, #12]
 80027f4:	f8d9 2000 	ldr.w	r2, [r9]
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	42ab      	cmp	r3, r5
 80027fc:	dc29      	bgt.n	8002852 <_printf_common+0xa6>
 80027fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	3300      	adds	r3, #0
 8002806:	bf18      	it	ne
 8002808:	2301      	movne	r3, #1
 800280a:	0692      	lsls	r2, r2, #26
 800280c:	d42e      	bmi.n	800286c <_printf_common+0xc0>
 800280e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002812:	4639      	mov	r1, r7
 8002814:	4630      	mov	r0, r6
 8002816:	47c0      	blx	r8
 8002818:	3001      	adds	r0, #1
 800281a:	d021      	beq.n	8002860 <_printf_common+0xb4>
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	68e5      	ldr	r5, [r4, #12]
 8002820:	f003 0306 	and.w	r3, r3, #6
 8002824:	2b04      	cmp	r3, #4
 8002826:	bf18      	it	ne
 8002828:	2500      	movne	r5, #0
 800282a:	f8d9 2000 	ldr.w	r2, [r9]
 800282e:	f04f 0900 	mov.w	r9, #0
 8002832:	bf08      	it	eq
 8002834:	1aad      	subeq	r5, r5, r2
 8002836:	68a3      	ldr	r3, [r4, #8]
 8002838:	6922      	ldr	r2, [r4, #16]
 800283a:	bf08      	it	eq
 800283c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002840:	4293      	cmp	r3, r2
 8002842:	bfc4      	itt	gt
 8002844:	1a9b      	subgt	r3, r3, r2
 8002846:	18ed      	addgt	r5, r5, r3
 8002848:	341a      	adds	r4, #26
 800284a:	454d      	cmp	r5, r9
 800284c:	d11a      	bne.n	8002884 <_printf_common+0xd8>
 800284e:	2000      	movs	r0, #0
 8002850:	e008      	b.n	8002864 <_printf_common+0xb8>
 8002852:	2301      	movs	r3, #1
 8002854:	4652      	mov	r2, sl
 8002856:	4639      	mov	r1, r7
 8002858:	4630      	mov	r0, r6
 800285a:	47c0      	blx	r8
 800285c:	3001      	adds	r0, #1
 800285e:	d103      	bne.n	8002868 <_printf_common+0xbc>
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002868:	3501      	adds	r5, #1
 800286a:	e7c2      	b.n	80027f2 <_printf_common+0x46>
 800286c:	2030      	movs	r0, #48	; 0x30
 800286e:	18e1      	adds	r1, r4, r3
 8002870:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800287a:	4422      	add	r2, r4
 800287c:	3302      	adds	r3, #2
 800287e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002882:	e7c4      	b.n	800280e <_printf_common+0x62>
 8002884:	2301      	movs	r3, #1
 8002886:	4622      	mov	r2, r4
 8002888:	4639      	mov	r1, r7
 800288a:	4630      	mov	r0, r6
 800288c:	47c0      	blx	r8
 800288e:	3001      	adds	r0, #1
 8002890:	d0e6      	beq.n	8002860 <_printf_common+0xb4>
 8002892:	f109 0901 	add.w	r9, r9, #1
 8002896:	e7d8      	b.n	800284a <_printf_common+0x9e>

08002898 <_printf_i>:
 8002898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800289c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80028a0:	460c      	mov	r4, r1
 80028a2:	7e09      	ldrb	r1, [r1, #24]
 80028a4:	b085      	sub	sp, #20
 80028a6:	296e      	cmp	r1, #110	; 0x6e
 80028a8:	4617      	mov	r7, r2
 80028aa:	4606      	mov	r6, r0
 80028ac:	4698      	mov	r8, r3
 80028ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80028b0:	f000 80b3 	beq.w	8002a1a <_printf_i+0x182>
 80028b4:	d822      	bhi.n	80028fc <_printf_i+0x64>
 80028b6:	2963      	cmp	r1, #99	; 0x63
 80028b8:	d036      	beq.n	8002928 <_printf_i+0x90>
 80028ba:	d80a      	bhi.n	80028d2 <_printf_i+0x3a>
 80028bc:	2900      	cmp	r1, #0
 80028be:	f000 80b9 	beq.w	8002a34 <_printf_i+0x19c>
 80028c2:	2958      	cmp	r1, #88	; 0x58
 80028c4:	f000 8083 	beq.w	80029ce <_printf_i+0x136>
 80028c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80028d0:	e032      	b.n	8002938 <_printf_i+0xa0>
 80028d2:	2964      	cmp	r1, #100	; 0x64
 80028d4:	d001      	beq.n	80028da <_printf_i+0x42>
 80028d6:	2969      	cmp	r1, #105	; 0x69
 80028d8:	d1f6      	bne.n	80028c8 <_printf_i+0x30>
 80028da:	6820      	ldr	r0, [r4, #0]
 80028dc:	6813      	ldr	r3, [r2, #0]
 80028de:	0605      	lsls	r5, r0, #24
 80028e0:	f103 0104 	add.w	r1, r3, #4
 80028e4:	d52a      	bpl.n	800293c <_printf_i+0xa4>
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6011      	str	r1, [r2, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da03      	bge.n	80028f6 <_printf_i+0x5e>
 80028ee:	222d      	movs	r2, #45	; 0x2d
 80028f0:	425b      	negs	r3, r3
 80028f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80028f6:	486f      	ldr	r0, [pc, #444]	; (8002ab4 <_printf_i+0x21c>)
 80028f8:	220a      	movs	r2, #10
 80028fa:	e039      	b.n	8002970 <_printf_i+0xd8>
 80028fc:	2973      	cmp	r1, #115	; 0x73
 80028fe:	f000 809d 	beq.w	8002a3c <_printf_i+0x1a4>
 8002902:	d808      	bhi.n	8002916 <_printf_i+0x7e>
 8002904:	296f      	cmp	r1, #111	; 0x6f
 8002906:	d020      	beq.n	800294a <_printf_i+0xb2>
 8002908:	2970      	cmp	r1, #112	; 0x70
 800290a:	d1dd      	bne.n	80028c8 <_printf_i+0x30>
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	f043 0320 	orr.w	r3, r3, #32
 8002912:	6023      	str	r3, [r4, #0]
 8002914:	e003      	b.n	800291e <_printf_i+0x86>
 8002916:	2975      	cmp	r1, #117	; 0x75
 8002918:	d017      	beq.n	800294a <_printf_i+0xb2>
 800291a:	2978      	cmp	r1, #120	; 0x78
 800291c:	d1d4      	bne.n	80028c8 <_printf_i+0x30>
 800291e:	2378      	movs	r3, #120	; 0x78
 8002920:	4865      	ldr	r0, [pc, #404]	; (8002ab8 <_printf_i+0x220>)
 8002922:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002926:	e055      	b.n	80029d4 <_printf_i+0x13c>
 8002928:	6813      	ldr	r3, [r2, #0]
 800292a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800292e:	1d19      	adds	r1, r3, #4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6011      	str	r1, [r2, #0]
 8002934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002938:	2301      	movs	r3, #1
 800293a:	e08c      	b.n	8002a56 <_printf_i+0x1be>
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002942:	6011      	str	r1, [r2, #0]
 8002944:	bf18      	it	ne
 8002946:	b21b      	sxthne	r3, r3
 8002948:	e7cf      	b.n	80028ea <_printf_i+0x52>
 800294a:	6813      	ldr	r3, [r2, #0]
 800294c:	6825      	ldr	r5, [r4, #0]
 800294e:	1d18      	adds	r0, r3, #4
 8002950:	6010      	str	r0, [r2, #0]
 8002952:	0628      	lsls	r0, r5, #24
 8002954:	d501      	bpl.n	800295a <_printf_i+0xc2>
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	e002      	b.n	8002960 <_printf_i+0xc8>
 800295a:	0668      	lsls	r0, r5, #25
 800295c:	d5fb      	bpl.n	8002956 <_printf_i+0xbe>
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	296f      	cmp	r1, #111	; 0x6f
 8002962:	bf14      	ite	ne
 8002964:	220a      	movne	r2, #10
 8002966:	2208      	moveq	r2, #8
 8002968:	4852      	ldr	r0, [pc, #328]	; (8002ab4 <_printf_i+0x21c>)
 800296a:	2100      	movs	r1, #0
 800296c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002970:	6865      	ldr	r5, [r4, #4]
 8002972:	2d00      	cmp	r5, #0
 8002974:	60a5      	str	r5, [r4, #8]
 8002976:	f2c0 8095 	blt.w	8002aa4 <_printf_i+0x20c>
 800297a:	6821      	ldr	r1, [r4, #0]
 800297c:	f021 0104 	bic.w	r1, r1, #4
 8002980:	6021      	str	r1, [r4, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d13d      	bne.n	8002a02 <_printf_i+0x16a>
 8002986:	2d00      	cmp	r5, #0
 8002988:	f040 808e 	bne.w	8002aa8 <_printf_i+0x210>
 800298c:	4665      	mov	r5, ip
 800298e:	2a08      	cmp	r2, #8
 8002990:	d10b      	bne.n	80029aa <_printf_i+0x112>
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	07db      	lsls	r3, r3, #31
 8002996:	d508      	bpl.n	80029aa <_printf_i+0x112>
 8002998:	6923      	ldr	r3, [r4, #16]
 800299a:	6862      	ldr	r2, [r4, #4]
 800299c:	429a      	cmp	r2, r3
 800299e:	bfde      	ittt	le
 80029a0:	2330      	movle	r3, #48	; 0x30
 80029a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029aa:	ebac 0305 	sub.w	r3, ip, r5
 80029ae:	6123      	str	r3, [r4, #16]
 80029b0:	f8cd 8000 	str.w	r8, [sp]
 80029b4:	463b      	mov	r3, r7
 80029b6:	aa03      	add	r2, sp, #12
 80029b8:	4621      	mov	r1, r4
 80029ba:	4630      	mov	r0, r6
 80029bc:	f7ff fef6 	bl	80027ac <_printf_common>
 80029c0:	3001      	adds	r0, #1
 80029c2:	d14d      	bne.n	8002a60 <_printf_i+0x1c8>
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
 80029c8:	b005      	add	sp, #20
 80029ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029ce:	4839      	ldr	r0, [pc, #228]	; (8002ab4 <_printf_i+0x21c>)
 80029d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80029d4:	6813      	ldr	r3, [r2, #0]
 80029d6:	6821      	ldr	r1, [r4, #0]
 80029d8:	1d1d      	adds	r5, r3, #4
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6015      	str	r5, [r2, #0]
 80029de:	060a      	lsls	r2, r1, #24
 80029e0:	d50b      	bpl.n	80029fa <_printf_i+0x162>
 80029e2:	07ca      	lsls	r2, r1, #31
 80029e4:	bf44      	itt	mi
 80029e6:	f041 0120 	orrmi.w	r1, r1, #32
 80029ea:	6021      	strmi	r1, [r4, #0]
 80029ec:	b91b      	cbnz	r3, 80029f6 <_printf_i+0x15e>
 80029ee:	6822      	ldr	r2, [r4, #0]
 80029f0:	f022 0220 	bic.w	r2, r2, #32
 80029f4:	6022      	str	r2, [r4, #0]
 80029f6:	2210      	movs	r2, #16
 80029f8:	e7b7      	b.n	800296a <_printf_i+0xd2>
 80029fa:	064d      	lsls	r5, r1, #25
 80029fc:	bf48      	it	mi
 80029fe:	b29b      	uxthmi	r3, r3
 8002a00:	e7ef      	b.n	80029e2 <_printf_i+0x14a>
 8002a02:	4665      	mov	r5, ip
 8002a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a08:	fb02 3311 	mls	r3, r2, r1, r3
 8002a0c:	5cc3      	ldrb	r3, [r0, r3]
 8002a0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a12:	460b      	mov	r3, r1
 8002a14:	2900      	cmp	r1, #0
 8002a16:	d1f5      	bne.n	8002a04 <_printf_i+0x16c>
 8002a18:	e7b9      	b.n	800298e <_printf_i+0xf6>
 8002a1a:	6813      	ldr	r3, [r2, #0]
 8002a1c:	6825      	ldr	r5, [r4, #0]
 8002a1e:	1d18      	adds	r0, r3, #4
 8002a20:	6961      	ldr	r1, [r4, #20]
 8002a22:	6010      	str	r0, [r2, #0]
 8002a24:	0628      	lsls	r0, r5, #24
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	d501      	bpl.n	8002a2e <_printf_i+0x196>
 8002a2a:	6019      	str	r1, [r3, #0]
 8002a2c:	e002      	b.n	8002a34 <_printf_i+0x19c>
 8002a2e:	066a      	lsls	r2, r5, #25
 8002a30:	d5fb      	bpl.n	8002a2a <_printf_i+0x192>
 8002a32:	8019      	strh	r1, [r3, #0]
 8002a34:	2300      	movs	r3, #0
 8002a36:	4665      	mov	r5, ip
 8002a38:	6123      	str	r3, [r4, #16]
 8002a3a:	e7b9      	b.n	80029b0 <_printf_i+0x118>
 8002a3c:	6813      	ldr	r3, [r2, #0]
 8002a3e:	1d19      	adds	r1, r3, #4
 8002a40:	6011      	str	r1, [r2, #0]
 8002a42:	681d      	ldr	r5, [r3, #0]
 8002a44:	6862      	ldr	r2, [r4, #4]
 8002a46:	2100      	movs	r1, #0
 8002a48:	4628      	mov	r0, r5
 8002a4a:	f000 fadd 	bl	8003008 <memchr>
 8002a4e:	b108      	cbz	r0, 8002a54 <_printf_i+0x1bc>
 8002a50:	1b40      	subs	r0, r0, r5
 8002a52:	6060      	str	r0, [r4, #4]
 8002a54:	6863      	ldr	r3, [r4, #4]
 8002a56:	6123      	str	r3, [r4, #16]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a5e:	e7a7      	b.n	80029b0 <_printf_i+0x118>
 8002a60:	6923      	ldr	r3, [r4, #16]
 8002a62:	462a      	mov	r2, r5
 8002a64:	4639      	mov	r1, r7
 8002a66:	4630      	mov	r0, r6
 8002a68:	47c0      	blx	r8
 8002a6a:	3001      	adds	r0, #1
 8002a6c:	d0aa      	beq.n	80029c4 <_printf_i+0x12c>
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	079b      	lsls	r3, r3, #30
 8002a72:	d413      	bmi.n	8002a9c <_printf_i+0x204>
 8002a74:	68e0      	ldr	r0, [r4, #12]
 8002a76:	9b03      	ldr	r3, [sp, #12]
 8002a78:	4298      	cmp	r0, r3
 8002a7a:	bfb8      	it	lt
 8002a7c:	4618      	movlt	r0, r3
 8002a7e:	e7a3      	b.n	80029c8 <_printf_i+0x130>
 8002a80:	2301      	movs	r3, #1
 8002a82:	464a      	mov	r2, r9
 8002a84:	4639      	mov	r1, r7
 8002a86:	4630      	mov	r0, r6
 8002a88:	47c0      	blx	r8
 8002a8a:	3001      	adds	r0, #1
 8002a8c:	d09a      	beq.n	80029c4 <_printf_i+0x12c>
 8002a8e:	3501      	adds	r5, #1
 8002a90:	68e3      	ldr	r3, [r4, #12]
 8002a92:	9a03      	ldr	r2, [sp, #12]
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	42ab      	cmp	r3, r5
 8002a98:	dcf2      	bgt.n	8002a80 <_printf_i+0x1e8>
 8002a9a:	e7eb      	b.n	8002a74 <_printf_i+0x1dc>
 8002a9c:	2500      	movs	r5, #0
 8002a9e:	f104 0919 	add.w	r9, r4, #25
 8002aa2:	e7f5      	b.n	8002a90 <_printf_i+0x1f8>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ac      	bne.n	8002a02 <_printf_i+0x16a>
 8002aa8:	7803      	ldrb	r3, [r0, #0]
 8002aaa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002aae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ab2:	e76c      	b.n	800298e <_printf_i+0xf6>
 8002ab4:	0800352d 	.word	0x0800352d
 8002ab8:	0800353e 	.word	0x0800353e

08002abc <__swbuf_r>:
 8002abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002abe:	460e      	mov	r6, r1
 8002ac0:	4614      	mov	r4, r2
 8002ac2:	4605      	mov	r5, r0
 8002ac4:	b118      	cbz	r0, 8002ace <__swbuf_r+0x12>
 8002ac6:	6983      	ldr	r3, [r0, #24]
 8002ac8:	b90b      	cbnz	r3, 8002ace <__swbuf_r+0x12>
 8002aca:	f000 f9af 	bl	8002e2c <__sinit>
 8002ace:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <__swbuf_r+0x98>)
 8002ad0:	429c      	cmp	r4, r3
 8002ad2:	d12a      	bne.n	8002b2a <__swbuf_r+0x6e>
 8002ad4:	686c      	ldr	r4, [r5, #4]
 8002ad6:	69a3      	ldr	r3, [r4, #24]
 8002ad8:	60a3      	str	r3, [r4, #8]
 8002ada:	89a3      	ldrh	r3, [r4, #12]
 8002adc:	071a      	lsls	r2, r3, #28
 8002ade:	d52e      	bpl.n	8002b3e <__swbuf_r+0x82>
 8002ae0:	6923      	ldr	r3, [r4, #16]
 8002ae2:	b363      	cbz	r3, 8002b3e <__swbuf_r+0x82>
 8002ae4:	6923      	ldr	r3, [r4, #16]
 8002ae6:	6820      	ldr	r0, [r4, #0]
 8002ae8:	b2f6      	uxtb	r6, r6
 8002aea:	1ac0      	subs	r0, r0, r3
 8002aec:	6963      	ldr	r3, [r4, #20]
 8002aee:	4637      	mov	r7, r6
 8002af0:	4283      	cmp	r3, r0
 8002af2:	dc04      	bgt.n	8002afe <__swbuf_r+0x42>
 8002af4:	4621      	mov	r1, r4
 8002af6:	4628      	mov	r0, r5
 8002af8:	f000 f92e 	bl	8002d58 <_fflush_r>
 8002afc:	bb28      	cbnz	r0, 8002b4a <__swbuf_r+0x8e>
 8002afe:	68a3      	ldr	r3, [r4, #8]
 8002b00:	3001      	adds	r0, #1
 8002b02:	3b01      	subs	r3, #1
 8002b04:	60a3      	str	r3, [r4, #8]
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	6022      	str	r2, [r4, #0]
 8002b0c:	701e      	strb	r6, [r3, #0]
 8002b0e:	6963      	ldr	r3, [r4, #20]
 8002b10:	4283      	cmp	r3, r0
 8002b12:	d004      	beq.n	8002b1e <__swbuf_r+0x62>
 8002b14:	89a3      	ldrh	r3, [r4, #12]
 8002b16:	07db      	lsls	r3, r3, #31
 8002b18:	d519      	bpl.n	8002b4e <__swbuf_r+0x92>
 8002b1a:	2e0a      	cmp	r6, #10
 8002b1c:	d117      	bne.n	8002b4e <__swbuf_r+0x92>
 8002b1e:	4621      	mov	r1, r4
 8002b20:	4628      	mov	r0, r5
 8002b22:	f000 f919 	bl	8002d58 <_fflush_r>
 8002b26:	b190      	cbz	r0, 8002b4e <__swbuf_r+0x92>
 8002b28:	e00f      	b.n	8002b4a <__swbuf_r+0x8e>
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <__swbuf_r+0x9c>)
 8002b2c:	429c      	cmp	r4, r3
 8002b2e:	d101      	bne.n	8002b34 <__swbuf_r+0x78>
 8002b30:	68ac      	ldr	r4, [r5, #8]
 8002b32:	e7d0      	b.n	8002ad6 <__swbuf_r+0x1a>
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <__swbuf_r+0xa0>)
 8002b36:	429c      	cmp	r4, r3
 8002b38:	bf08      	it	eq
 8002b3a:	68ec      	ldreq	r4, [r5, #12]
 8002b3c:	e7cb      	b.n	8002ad6 <__swbuf_r+0x1a>
 8002b3e:	4621      	mov	r1, r4
 8002b40:	4628      	mov	r0, r5
 8002b42:	f000 f80d 	bl	8002b60 <__swsetup_r>
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d0cc      	beq.n	8002ae4 <__swbuf_r+0x28>
 8002b4a:	f04f 37ff 	mov.w	r7, #4294967295
 8002b4e:	4638      	mov	r0, r7
 8002b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b52:	bf00      	nop
 8002b54:	08003570 	.word	0x08003570
 8002b58:	08003590 	.word	0x08003590
 8002b5c:	08003550 	.word	0x08003550

08002b60 <__swsetup_r>:
 8002b60:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <__swsetup_r+0xcc>)
 8002b62:	b570      	push	{r4, r5, r6, lr}
 8002b64:	681d      	ldr	r5, [r3, #0]
 8002b66:	4606      	mov	r6, r0
 8002b68:	460c      	mov	r4, r1
 8002b6a:	b125      	cbz	r5, 8002b76 <__swsetup_r+0x16>
 8002b6c:	69ab      	ldr	r3, [r5, #24]
 8002b6e:	b913      	cbnz	r3, 8002b76 <__swsetup_r+0x16>
 8002b70:	4628      	mov	r0, r5
 8002b72:	f000 f95b 	bl	8002e2c <__sinit>
 8002b76:	4b2e      	ldr	r3, [pc, #184]	; (8002c30 <__swsetup_r+0xd0>)
 8002b78:	429c      	cmp	r4, r3
 8002b7a:	d10f      	bne.n	8002b9c <__swsetup_r+0x3c>
 8002b7c:	686c      	ldr	r4, [r5, #4]
 8002b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	0715      	lsls	r5, r2, #28
 8002b86:	d42c      	bmi.n	8002be2 <__swsetup_r+0x82>
 8002b88:	06d0      	lsls	r0, r2, #27
 8002b8a:	d411      	bmi.n	8002bb0 <__swsetup_r+0x50>
 8002b8c:	2209      	movs	r2, #9
 8002b8e:	6032      	str	r2, [r6, #0]
 8002b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b94:	81a3      	strh	r3, [r4, #12]
 8002b96:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9a:	e03e      	b.n	8002c1a <__swsetup_r+0xba>
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <__swsetup_r+0xd4>)
 8002b9e:	429c      	cmp	r4, r3
 8002ba0:	d101      	bne.n	8002ba6 <__swsetup_r+0x46>
 8002ba2:	68ac      	ldr	r4, [r5, #8]
 8002ba4:	e7eb      	b.n	8002b7e <__swsetup_r+0x1e>
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <__swsetup_r+0xd8>)
 8002ba8:	429c      	cmp	r4, r3
 8002baa:	bf08      	it	eq
 8002bac:	68ec      	ldreq	r4, [r5, #12]
 8002bae:	e7e6      	b.n	8002b7e <__swsetup_r+0x1e>
 8002bb0:	0751      	lsls	r1, r2, #29
 8002bb2:	d512      	bpl.n	8002bda <__swsetup_r+0x7a>
 8002bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bb6:	b141      	cbz	r1, 8002bca <__swsetup_r+0x6a>
 8002bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bbc:	4299      	cmp	r1, r3
 8002bbe:	d002      	beq.n	8002bc6 <__swsetup_r+0x66>
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	f000 fa2f 	bl	8003024 <_free_r>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	6363      	str	r3, [r4, #52]	; 0x34
 8002bca:	89a3      	ldrh	r3, [r4, #12]
 8002bcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002bd0:	81a3      	strh	r3, [r4, #12]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	6063      	str	r3, [r4, #4]
 8002bd6:	6923      	ldr	r3, [r4, #16]
 8002bd8:	6023      	str	r3, [r4, #0]
 8002bda:	89a3      	ldrh	r3, [r4, #12]
 8002bdc:	f043 0308 	orr.w	r3, r3, #8
 8002be0:	81a3      	strh	r3, [r4, #12]
 8002be2:	6923      	ldr	r3, [r4, #16]
 8002be4:	b94b      	cbnz	r3, 8002bfa <__swsetup_r+0x9a>
 8002be6:	89a3      	ldrh	r3, [r4, #12]
 8002be8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf0:	d003      	beq.n	8002bfa <__swsetup_r+0x9a>
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	f000 f9c7 	bl	8002f88 <__smakebuf_r>
 8002bfa:	89a2      	ldrh	r2, [r4, #12]
 8002bfc:	f012 0301 	ands.w	r3, r2, #1
 8002c00:	d00c      	beq.n	8002c1c <__swsetup_r+0xbc>
 8002c02:	2300      	movs	r3, #0
 8002c04:	60a3      	str	r3, [r4, #8]
 8002c06:	6963      	ldr	r3, [r4, #20]
 8002c08:	425b      	negs	r3, r3
 8002c0a:	61a3      	str	r3, [r4, #24]
 8002c0c:	6923      	ldr	r3, [r4, #16]
 8002c0e:	b953      	cbnz	r3, 8002c26 <__swsetup_r+0xc6>
 8002c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002c18:	d1ba      	bne.n	8002b90 <__swsetup_r+0x30>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	0792      	lsls	r2, r2, #30
 8002c1e:	bf58      	it	pl
 8002c20:	6963      	ldrpl	r3, [r4, #20]
 8002c22:	60a3      	str	r3, [r4, #8]
 8002c24:	e7f2      	b.n	8002c0c <__swsetup_r+0xac>
 8002c26:	2000      	movs	r0, #0
 8002c28:	e7f7      	b.n	8002c1a <__swsetup_r+0xba>
 8002c2a:	bf00      	nop
 8002c2c:	20000078 	.word	0x20000078
 8002c30:	08003570 	.word	0x08003570
 8002c34:	08003590 	.word	0x08003590
 8002c38:	08003550 	.word	0x08003550

08002c3c <abort>:
 8002c3c:	b508      	push	{r3, lr}
 8002c3e:	2006      	movs	r0, #6
 8002c40:	f000 face 	bl	80031e0 <raise>
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7ff fad7 	bl	80021f8 <_exit>
	...

08002c4c <__sflush_r>:
 8002c4c:	898a      	ldrh	r2, [r1, #12]
 8002c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c52:	4605      	mov	r5, r0
 8002c54:	0710      	lsls	r0, r2, #28
 8002c56:	460c      	mov	r4, r1
 8002c58:	d458      	bmi.n	8002d0c <__sflush_r+0xc0>
 8002c5a:	684b      	ldr	r3, [r1, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	dc05      	bgt.n	8002c6c <__sflush_r+0x20>
 8002c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	dc02      	bgt.n	8002c6c <__sflush_r+0x20>
 8002c66:	2000      	movs	r0, #0
 8002c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c6e:	2e00      	cmp	r6, #0
 8002c70:	d0f9      	beq.n	8002c66 <__sflush_r+0x1a>
 8002c72:	2300      	movs	r3, #0
 8002c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002c78:	682f      	ldr	r7, [r5, #0]
 8002c7a:	6a21      	ldr	r1, [r4, #32]
 8002c7c:	602b      	str	r3, [r5, #0]
 8002c7e:	d032      	beq.n	8002ce6 <__sflush_r+0x9a>
 8002c80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c82:	89a3      	ldrh	r3, [r4, #12]
 8002c84:	075a      	lsls	r2, r3, #29
 8002c86:	d505      	bpl.n	8002c94 <__sflush_r+0x48>
 8002c88:	6863      	ldr	r3, [r4, #4]
 8002c8a:	1ac0      	subs	r0, r0, r3
 8002c8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c8e:	b10b      	cbz	r3, 8002c94 <__sflush_r+0x48>
 8002c90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c92:	1ac0      	subs	r0, r0, r3
 8002c94:	2300      	movs	r3, #0
 8002c96:	4602      	mov	r2, r0
 8002c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c9a:	6a21      	ldr	r1, [r4, #32]
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	47b0      	blx	r6
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	89a3      	ldrh	r3, [r4, #12]
 8002ca4:	d106      	bne.n	8002cb4 <__sflush_r+0x68>
 8002ca6:	6829      	ldr	r1, [r5, #0]
 8002ca8:	291d      	cmp	r1, #29
 8002caa:	d848      	bhi.n	8002d3e <__sflush_r+0xf2>
 8002cac:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <__sflush_r+0x108>)
 8002cae:	40ca      	lsrs	r2, r1
 8002cb0:	07d6      	lsls	r6, r2, #31
 8002cb2:	d544      	bpl.n	8002d3e <__sflush_r+0xf2>
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	6062      	str	r2, [r4, #4]
 8002cb8:	6922      	ldr	r2, [r4, #16]
 8002cba:	04d9      	lsls	r1, r3, #19
 8002cbc:	6022      	str	r2, [r4, #0]
 8002cbe:	d504      	bpl.n	8002cca <__sflush_r+0x7e>
 8002cc0:	1c42      	adds	r2, r0, #1
 8002cc2:	d101      	bne.n	8002cc8 <__sflush_r+0x7c>
 8002cc4:	682b      	ldr	r3, [r5, #0]
 8002cc6:	b903      	cbnz	r3, 8002cca <__sflush_r+0x7e>
 8002cc8:	6560      	str	r0, [r4, #84]	; 0x54
 8002cca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ccc:	602f      	str	r7, [r5, #0]
 8002cce:	2900      	cmp	r1, #0
 8002cd0:	d0c9      	beq.n	8002c66 <__sflush_r+0x1a>
 8002cd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cd6:	4299      	cmp	r1, r3
 8002cd8:	d002      	beq.n	8002ce0 <__sflush_r+0x94>
 8002cda:	4628      	mov	r0, r5
 8002cdc:	f000 f9a2 	bl	8003024 <_free_r>
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	6360      	str	r0, [r4, #52]	; 0x34
 8002ce4:	e7c0      	b.n	8002c68 <__sflush_r+0x1c>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4628      	mov	r0, r5
 8002cea:	47b0      	blx	r6
 8002cec:	1c41      	adds	r1, r0, #1
 8002cee:	d1c8      	bne.n	8002c82 <__sflush_r+0x36>
 8002cf0:	682b      	ldr	r3, [r5, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0c5      	beq.n	8002c82 <__sflush_r+0x36>
 8002cf6:	2b1d      	cmp	r3, #29
 8002cf8:	d001      	beq.n	8002cfe <__sflush_r+0xb2>
 8002cfa:	2b16      	cmp	r3, #22
 8002cfc:	d101      	bne.n	8002d02 <__sflush_r+0xb6>
 8002cfe:	602f      	str	r7, [r5, #0]
 8002d00:	e7b1      	b.n	8002c66 <__sflush_r+0x1a>
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d08:	81a3      	strh	r3, [r4, #12]
 8002d0a:	e7ad      	b.n	8002c68 <__sflush_r+0x1c>
 8002d0c:	690f      	ldr	r7, [r1, #16]
 8002d0e:	2f00      	cmp	r7, #0
 8002d10:	d0a9      	beq.n	8002c66 <__sflush_r+0x1a>
 8002d12:	0793      	lsls	r3, r2, #30
 8002d14:	bf18      	it	ne
 8002d16:	2300      	movne	r3, #0
 8002d18:	680e      	ldr	r6, [r1, #0]
 8002d1a:	bf08      	it	eq
 8002d1c:	694b      	ldreq	r3, [r1, #20]
 8002d1e:	eba6 0807 	sub.w	r8, r6, r7
 8002d22:	600f      	str	r7, [r1, #0]
 8002d24:	608b      	str	r3, [r1, #8]
 8002d26:	f1b8 0f00 	cmp.w	r8, #0
 8002d2a:	dd9c      	ble.n	8002c66 <__sflush_r+0x1a>
 8002d2c:	4643      	mov	r3, r8
 8002d2e:	463a      	mov	r2, r7
 8002d30:	6a21      	ldr	r1, [r4, #32]
 8002d32:	4628      	mov	r0, r5
 8002d34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d36:	47b0      	blx	r6
 8002d38:	2800      	cmp	r0, #0
 8002d3a:	dc06      	bgt.n	8002d4a <__sflush_r+0xfe>
 8002d3c:	89a3      	ldrh	r3, [r4, #12]
 8002d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d42:	81a3      	strh	r3, [r4, #12]
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	e78e      	b.n	8002c68 <__sflush_r+0x1c>
 8002d4a:	4407      	add	r7, r0
 8002d4c:	eba8 0800 	sub.w	r8, r8, r0
 8002d50:	e7e9      	b.n	8002d26 <__sflush_r+0xda>
 8002d52:	bf00      	nop
 8002d54:	20400001 	.word	0x20400001

08002d58 <_fflush_r>:
 8002d58:	b538      	push	{r3, r4, r5, lr}
 8002d5a:	690b      	ldr	r3, [r1, #16]
 8002d5c:	4605      	mov	r5, r0
 8002d5e:	460c      	mov	r4, r1
 8002d60:	b1db      	cbz	r3, 8002d9a <_fflush_r+0x42>
 8002d62:	b118      	cbz	r0, 8002d6c <_fflush_r+0x14>
 8002d64:	6983      	ldr	r3, [r0, #24]
 8002d66:	b90b      	cbnz	r3, 8002d6c <_fflush_r+0x14>
 8002d68:	f000 f860 	bl	8002e2c <__sinit>
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <_fflush_r+0x48>)
 8002d6e:	429c      	cmp	r4, r3
 8002d70:	d109      	bne.n	8002d86 <_fflush_r+0x2e>
 8002d72:	686c      	ldr	r4, [r5, #4]
 8002d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d78:	b17b      	cbz	r3, 8002d9a <_fflush_r+0x42>
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d82:	f7ff bf63 	b.w	8002c4c <__sflush_r>
 8002d86:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <_fflush_r+0x4c>)
 8002d88:	429c      	cmp	r4, r3
 8002d8a:	d101      	bne.n	8002d90 <_fflush_r+0x38>
 8002d8c:	68ac      	ldr	r4, [r5, #8]
 8002d8e:	e7f1      	b.n	8002d74 <_fflush_r+0x1c>
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <_fflush_r+0x50>)
 8002d92:	429c      	cmp	r4, r3
 8002d94:	bf08      	it	eq
 8002d96:	68ec      	ldreq	r4, [r5, #12]
 8002d98:	e7ec      	b.n	8002d74 <_fflush_r+0x1c>
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	bd38      	pop	{r3, r4, r5, pc}
 8002d9e:	bf00      	nop
 8002da0:	08003570 	.word	0x08003570
 8002da4:	08003590 	.word	0x08003590
 8002da8:	08003550 	.word	0x08003550

08002dac <std>:
 8002dac:	2300      	movs	r3, #0
 8002dae:	b510      	push	{r4, lr}
 8002db0:	4604      	mov	r4, r0
 8002db2:	e9c0 3300 	strd	r3, r3, [r0]
 8002db6:	6083      	str	r3, [r0, #8]
 8002db8:	8181      	strh	r1, [r0, #12]
 8002dba:	6643      	str	r3, [r0, #100]	; 0x64
 8002dbc:	81c2      	strh	r2, [r0, #14]
 8002dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dc2:	6183      	str	r3, [r0, #24]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	305c      	adds	r0, #92	; 0x5c
 8002dca:	f7ff fba9 	bl	8002520 <memset>
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <std+0x38>)
 8002dd0:	6224      	str	r4, [r4, #32]
 8002dd2:	6263      	str	r3, [r4, #36]	; 0x24
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <std+0x3c>)
 8002dd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <std+0x40>)
 8002dda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <std+0x44>)
 8002dde:	6323      	str	r3, [r4, #48]	; 0x30
 8002de0:	bd10      	pop	{r4, pc}
 8002de2:	bf00      	nop
 8002de4:	08003219 	.word	0x08003219
 8002de8:	0800323b 	.word	0x0800323b
 8002dec:	08003273 	.word	0x08003273
 8002df0:	08003297 	.word	0x08003297

08002df4 <_cleanup_r>:
 8002df4:	4901      	ldr	r1, [pc, #4]	; (8002dfc <_cleanup_r+0x8>)
 8002df6:	f000 b885 	b.w	8002f04 <_fwalk_reent>
 8002dfa:	bf00      	nop
 8002dfc:	08002d59 	.word	0x08002d59

08002e00 <__sfmoreglue>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	2568      	movs	r5, #104	; 0x68
 8002e04:	1e4a      	subs	r2, r1, #1
 8002e06:	4355      	muls	r5, r2
 8002e08:	460e      	mov	r6, r1
 8002e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e0e:	f000 f955 	bl	80030bc <_malloc_r>
 8002e12:	4604      	mov	r4, r0
 8002e14:	b140      	cbz	r0, 8002e28 <__sfmoreglue+0x28>
 8002e16:	2100      	movs	r1, #0
 8002e18:	e9c0 1600 	strd	r1, r6, [r0]
 8002e1c:	300c      	adds	r0, #12
 8002e1e:	60a0      	str	r0, [r4, #8]
 8002e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e24:	f7ff fb7c 	bl	8002520 <memset>
 8002e28:	4620      	mov	r0, r4
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}

08002e2c <__sinit>:
 8002e2c:	6983      	ldr	r3, [r0, #24]
 8002e2e:	b510      	push	{r4, lr}
 8002e30:	4604      	mov	r4, r0
 8002e32:	bb33      	cbnz	r3, 8002e82 <__sinit+0x56>
 8002e34:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002e38:	6503      	str	r3, [r0, #80]	; 0x50
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <__sinit+0x58>)
 8002e3c:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <__sinit+0x5c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6282      	str	r2, [r0, #40]	; 0x28
 8002e42:	4298      	cmp	r0, r3
 8002e44:	bf04      	itt	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	6183      	streq	r3, [r0, #24]
 8002e4a:	f000 f81f 	bl	8002e8c <__sfp>
 8002e4e:	6060      	str	r0, [r4, #4]
 8002e50:	4620      	mov	r0, r4
 8002e52:	f000 f81b 	bl	8002e8c <__sfp>
 8002e56:	60a0      	str	r0, [r4, #8]
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f000 f817 	bl	8002e8c <__sfp>
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60e0      	str	r0, [r4, #12]
 8002e62:	2104      	movs	r1, #4
 8002e64:	6860      	ldr	r0, [r4, #4]
 8002e66:	f7ff ffa1 	bl	8002dac <std>
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	2109      	movs	r1, #9
 8002e6e:	68a0      	ldr	r0, [r4, #8]
 8002e70:	f7ff ff9c 	bl	8002dac <std>
 8002e74:	2202      	movs	r2, #2
 8002e76:	2112      	movs	r1, #18
 8002e78:	68e0      	ldr	r0, [r4, #12]
 8002e7a:	f7ff ff97 	bl	8002dac <std>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61a3      	str	r3, [r4, #24]
 8002e82:	bd10      	pop	{r4, pc}
 8002e84:	08003518 	.word	0x08003518
 8002e88:	08002df5 	.word	0x08002df5

08002e8c <__sfp>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <__sfp+0x70>)
 8002e90:	4607      	mov	r7, r0
 8002e92:	681e      	ldr	r6, [r3, #0]
 8002e94:	69b3      	ldr	r3, [r6, #24]
 8002e96:	b913      	cbnz	r3, 8002e9e <__sfp+0x12>
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f7ff ffc7 	bl	8002e2c <__sinit>
 8002e9e:	3648      	adds	r6, #72	; 0x48
 8002ea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	d503      	bpl.n	8002eb0 <__sfp+0x24>
 8002ea8:	6833      	ldr	r3, [r6, #0]
 8002eaa:	b133      	cbz	r3, 8002eba <__sfp+0x2e>
 8002eac:	6836      	ldr	r6, [r6, #0]
 8002eae:	e7f7      	b.n	8002ea0 <__sfp+0x14>
 8002eb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002eb4:	b16d      	cbz	r5, 8002ed2 <__sfp+0x46>
 8002eb6:	3468      	adds	r4, #104	; 0x68
 8002eb8:	e7f4      	b.n	8002ea4 <__sfp+0x18>
 8002eba:	2104      	movs	r1, #4
 8002ebc:	4638      	mov	r0, r7
 8002ebe:	f7ff ff9f 	bl	8002e00 <__sfmoreglue>
 8002ec2:	6030      	str	r0, [r6, #0]
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d1f1      	bne.n	8002eac <__sfp+0x20>
 8002ec8:	230c      	movs	r3, #12
 8002eca:	4604      	mov	r4, r0
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	4620      	mov	r0, r4
 8002ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <__sfp+0x74>)
 8002ed4:	6665      	str	r5, [r4, #100]	; 0x64
 8002ed6:	e9c4 5500 	strd	r5, r5, [r4]
 8002eda:	60a5      	str	r5, [r4, #8]
 8002edc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002ee0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002eec:	f7ff fb18 	bl	8002520 <memset>
 8002ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ef8:	e7e9      	b.n	8002ece <__sfp+0x42>
 8002efa:	bf00      	nop
 8002efc:	08003518 	.word	0x08003518
 8002f00:	ffff0001 	.word	0xffff0001

08002f04 <_fwalk_reent>:
 8002f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f08:	4680      	mov	r8, r0
 8002f0a:	4689      	mov	r9, r1
 8002f0c:	2600      	movs	r6, #0
 8002f0e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f12:	b914      	cbnz	r4, 8002f1a <_fwalk_reent+0x16>
 8002f14:	4630      	mov	r0, r6
 8002f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002f1e:	3f01      	subs	r7, #1
 8002f20:	d501      	bpl.n	8002f26 <_fwalk_reent+0x22>
 8002f22:	6824      	ldr	r4, [r4, #0]
 8002f24:	e7f5      	b.n	8002f12 <_fwalk_reent+0xe>
 8002f26:	89ab      	ldrh	r3, [r5, #12]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d907      	bls.n	8002f3c <_fwalk_reent+0x38>
 8002f2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f30:	3301      	adds	r3, #1
 8002f32:	d003      	beq.n	8002f3c <_fwalk_reent+0x38>
 8002f34:	4629      	mov	r1, r5
 8002f36:	4640      	mov	r0, r8
 8002f38:	47c8      	blx	r9
 8002f3a:	4306      	orrs	r6, r0
 8002f3c:	3568      	adds	r5, #104	; 0x68
 8002f3e:	e7ee      	b.n	8002f1e <_fwalk_reent+0x1a>

08002f40 <__swhatbuf_r>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	460e      	mov	r6, r1
 8002f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f48:	b096      	sub	sp, #88	; 0x58
 8002f4a:	2900      	cmp	r1, #0
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	da07      	bge.n	8002f62 <__swhatbuf_r+0x22>
 8002f52:	2300      	movs	r3, #0
 8002f54:	602b      	str	r3, [r5, #0]
 8002f56:	89b3      	ldrh	r3, [r6, #12]
 8002f58:	061a      	lsls	r2, r3, #24
 8002f5a:	d410      	bmi.n	8002f7e <__swhatbuf_r+0x3e>
 8002f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f60:	e00e      	b.n	8002f80 <__swhatbuf_r+0x40>
 8002f62:	466a      	mov	r2, sp
 8002f64:	f000 f9be 	bl	80032e4 <_fstat_r>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	dbf2      	blt.n	8002f52 <__swhatbuf_r+0x12>
 8002f6c:	9a01      	ldr	r2, [sp, #4]
 8002f6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f76:	425a      	negs	r2, r3
 8002f78:	415a      	adcs	r2, r3
 8002f7a:	602a      	str	r2, [r5, #0]
 8002f7c:	e7ee      	b.n	8002f5c <__swhatbuf_r+0x1c>
 8002f7e:	2340      	movs	r3, #64	; 0x40
 8002f80:	2000      	movs	r0, #0
 8002f82:	6023      	str	r3, [r4, #0]
 8002f84:	b016      	add	sp, #88	; 0x58
 8002f86:	bd70      	pop	{r4, r5, r6, pc}

08002f88 <__smakebuf_r>:
 8002f88:	898b      	ldrh	r3, [r1, #12]
 8002f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f8c:	079d      	lsls	r5, r3, #30
 8002f8e:	4606      	mov	r6, r0
 8002f90:	460c      	mov	r4, r1
 8002f92:	d507      	bpl.n	8002fa4 <__smakebuf_r+0x1c>
 8002f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f98:	6023      	str	r3, [r4, #0]
 8002f9a:	6123      	str	r3, [r4, #16]
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	6163      	str	r3, [r4, #20]
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	ab01      	add	r3, sp, #4
 8002fa6:	466a      	mov	r2, sp
 8002fa8:	f7ff ffca 	bl	8002f40 <__swhatbuf_r>
 8002fac:	9900      	ldr	r1, [sp, #0]
 8002fae:	4605      	mov	r5, r0
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	f000 f883 	bl	80030bc <_malloc_r>
 8002fb6:	b948      	cbnz	r0, 8002fcc <__smakebuf_r+0x44>
 8002fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fbc:	059a      	lsls	r2, r3, #22
 8002fbe:	d4ef      	bmi.n	8002fa0 <__smakebuf_r+0x18>
 8002fc0:	f023 0303 	bic.w	r3, r3, #3
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	81a3      	strh	r3, [r4, #12]
 8002fca:	e7e3      	b.n	8002f94 <__smakebuf_r+0xc>
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <__smakebuf_r+0x7c>)
 8002fce:	62b3      	str	r3, [r6, #40]	; 0x28
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	6020      	str	r0, [r4, #0]
 8002fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd8:	81a3      	strh	r3, [r4, #12]
 8002fda:	9b00      	ldr	r3, [sp, #0]
 8002fdc:	6120      	str	r0, [r4, #16]
 8002fde:	6163      	str	r3, [r4, #20]
 8002fe0:	9b01      	ldr	r3, [sp, #4]
 8002fe2:	b15b      	cbz	r3, 8002ffc <__smakebuf_r+0x74>
 8002fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f000 f98d 	bl	8003308 <_isatty_r>
 8002fee:	b128      	cbz	r0, 8002ffc <__smakebuf_r+0x74>
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	f023 0303 	bic.w	r3, r3, #3
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	81a3      	strh	r3, [r4, #12]
 8002ffc:	89a3      	ldrh	r3, [r4, #12]
 8002ffe:	431d      	orrs	r5, r3
 8003000:	81a5      	strh	r5, [r4, #12]
 8003002:	e7cd      	b.n	8002fa0 <__smakebuf_r+0x18>
 8003004:	08002df5 	.word	0x08002df5

08003008 <memchr>:
 8003008:	b510      	push	{r4, lr}
 800300a:	b2c9      	uxtb	r1, r1
 800300c:	4402      	add	r2, r0
 800300e:	4290      	cmp	r0, r2
 8003010:	4603      	mov	r3, r0
 8003012:	d101      	bne.n	8003018 <memchr+0x10>
 8003014:	2300      	movs	r3, #0
 8003016:	e003      	b.n	8003020 <memchr+0x18>
 8003018:	781c      	ldrb	r4, [r3, #0]
 800301a:	3001      	adds	r0, #1
 800301c:	428c      	cmp	r4, r1
 800301e:	d1f6      	bne.n	800300e <memchr+0x6>
 8003020:	4618      	mov	r0, r3
 8003022:	bd10      	pop	{r4, pc}

08003024 <_free_r>:
 8003024:	b538      	push	{r3, r4, r5, lr}
 8003026:	4605      	mov	r5, r0
 8003028:	2900      	cmp	r1, #0
 800302a:	d043      	beq.n	80030b4 <_free_r+0x90>
 800302c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003030:	1f0c      	subs	r4, r1, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	bfb8      	it	lt
 8003036:	18e4      	addlt	r4, r4, r3
 8003038:	f000 f988 	bl	800334c <__malloc_lock>
 800303c:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <_free_r+0x94>)
 800303e:	6813      	ldr	r3, [r2, #0]
 8003040:	4610      	mov	r0, r2
 8003042:	b933      	cbnz	r3, 8003052 <_free_r+0x2e>
 8003044:	6063      	str	r3, [r4, #4]
 8003046:	6014      	str	r4, [r2, #0]
 8003048:	4628      	mov	r0, r5
 800304a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800304e:	f000 b97e 	b.w	800334e <__malloc_unlock>
 8003052:	42a3      	cmp	r3, r4
 8003054:	d90b      	bls.n	800306e <_free_r+0x4a>
 8003056:	6821      	ldr	r1, [r4, #0]
 8003058:	1862      	adds	r2, r4, r1
 800305a:	4293      	cmp	r3, r2
 800305c:	bf01      	itttt	eq
 800305e:	681a      	ldreq	r2, [r3, #0]
 8003060:	685b      	ldreq	r3, [r3, #4]
 8003062:	1852      	addeq	r2, r2, r1
 8003064:	6022      	streq	r2, [r4, #0]
 8003066:	6063      	str	r3, [r4, #4]
 8003068:	6004      	str	r4, [r0, #0]
 800306a:	e7ed      	b.n	8003048 <_free_r+0x24>
 800306c:	4613      	mov	r3, r2
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	b10a      	cbz	r2, 8003076 <_free_r+0x52>
 8003072:	42a2      	cmp	r2, r4
 8003074:	d9fa      	bls.n	800306c <_free_r+0x48>
 8003076:	6819      	ldr	r1, [r3, #0]
 8003078:	1858      	adds	r0, r3, r1
 800307a:	42a0      	cmp	r0, r4
 800307c:	d10b      	bne.n	8003096 <_free_r+0x72>
 800307e:	6820      	ldr	r0, [r4, #0]
 8003080:	4401      	add	r1, r0
 8003082:	1858      	adds	r0, r3, r1
 8003084:	4282      	cmp	r2, r0
 8003086:	6019      	str	r1, [r3, #0]
 8003088:	d1de      	bne.n	8003048 <_free_r+0x24>
 800308a:	6810      	ldr	r0, [r2, #0]
 800308c:	6852      	ldr	r2, [r2, #4]
 800308e:	4401      	add	r1, r0
 8003090:	6019      	str	r1, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	e7d8      	b.n	8003048 <_free_r+0x24>
 8003096:	d902      	bls.n	800309e <_free_r+0x7a>
 8003098:	230c      	movs	r3, #12
 800309a:	602b      	str	r3, [r5, #0]
 800309c:	e7d4      	b.n	8003048 <_free_r+0x24>
 800309e:	6820      	ldr	r0, [r4, #0]
 80030a0:	1821      	adds	r1, r4, r0
 80030a2:	428a      	cmp	r2, r1
 80030a4:	bf01      	itttt	eq
 80030a6:	6811      	ldreq	r1, [r2, #0]
 80030a8:	6852      	ldreq	r2, [r2, #4]
 80030aa:	1809      	addeq	r1, r1, r0
 80030ac:	6021      	streq	r1, [r4, #0]
 80030ae:	6062      	str	r2, [r4, #4]
 80030b0:	605c      	str	r4, [r3, #4]
 80030b2:	e7c9      	b.n	8003048 <_free_r+0x24>
 80030b4:	bd38      	pop	{r3, r4, r5, pc}
 80030b6:	bf00      	nop
 80030b8:	200009b4 	.word	0x200009b4

080030bc <_malloc_r>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	1ccd      	adds	r5, r1, #3
 80030c0:	f025 0503 	bic.w	r5, r5, #3
 80030c4:	3508      	adds	r5, #8
 80030c6:	2d0c      	cmp	r5, #12
 80030c8:	bf38      	it	cc
 80030ca:	250c      	movcc	r5, #12
 80030cc:	2d00      	cmp	r5, #0
 80030ce:	4606      	mov	r6, r0
 80030d0:	db01      	blt.n	80030d6 <_malloc_r+0x1a>
 80030d2:	42a9      	cmp	r1, r5
 80030d4:	d903      	bls.n	80030de <_malloc_r+0x22>
 80030d6:	230c      	movs	r3, #12
 80030d8:	6033      	str	r3, [r6, #0]
 80030da:	2000      	movs	r0, #0
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	f000 f935 	bl	800334c <__malloc_lock>
 80030e2:	4a21      	ldr	r2, [pc, #132]	; (8003168 <_malloc_r+0xac>)
 80030e4:	6814      	ldr	r4, [r2, #0]
 80030e6:	4621      	mov	r1, r4
 80030e8:	b991      	cbnz	r1, 8003110 <_malloc_r+0x54>
 80030ea:	4c20      	ldr	r4, [pc, #128]	; (800316c <_malloc_r+0xb0>)
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	b91b      	cbnz	r3, 80030f8 <_malloc_r+0x3c>
 80030f0:	4630      	mov	r0, r6
 80030f2:	f000 f83d 	bl	8003170 <_sbrk_r>
 80030f6:	6020      	str	r0, [r4, #0]
 80030f8:	4629      	mov	r1, r5
 80030fa:	4630      	mov	r0, r6
 80030fc:	f000 f838 	bl	8003170 <_sbrk_r>
 8003100:	1c43      	adds	r3, r0, #1
 8003102:	d124      	bne.n	800314e <_malloc_r+0x92>
 8003104:	230c      	movs	r3, #12
 8003106:	4630      	mov	r0, r6
 8003108:	6033      	str	r3, [r6, #0]
 800310a:	f000 f920 	bl	800334e <__malloc_unlock>
 800310e:	e7e4      	b.n	80030da <_malloc_r+0x1e>
 8003110:	680b      	ldr	r3, [r1, #0]
 8003112:	1b5b      	subs	r3, r3, r5
 8003114:	d418      	bmi.n	8003148 <_malloc_r+0x8c>
 8003116:	2b0b      	cmp	r3, #11
 8003118:	d90f      	bls.n	800313a <_malloc_r+0x7e>
 800311a:	600b      	str	r3, [r1, #0]
 800311c:	18cc      	adds	r4, r1, r3
 800311e:	50cd      	str	r5, [r1, r3]
 8003120:	4630      	mov	r0, r6
 8003122:	f000 f914 	bl	800334e <__malloc_unlock>
 8003126:	f104 000b 	add.w	r0, r4, #11
 800312a:	1d23      	adds	r3, r4, #4
 800312c:	f020 0007 	bic.w	r0, r0, #7
 8003130:	1ac3      	subs	r3, r0, r3
 8003132:	d0d3      	beq.n	80030dc <_malloc_r+0x20>
 8003134:	425a      	negs	r2, r3
 8003136:	50e2      	str	r2, [r4, r3]
 8003138:	e7d0      	b.n	80030dc <_malloc_r+0x20>
 800313a:	684b      	ldr	r3, [r1, #4]
 800313c:	428c      	cmp	r4, r1
 800313e:	bf16      	itet	ne
 8003140:	6063      	strne	r3, [r4, #4]
 8003142:	6013      	streq	r3, [r2, #0]
 8003144:	460c      	movne	r4, r1
 8003146:	e7eb      	b.n	8003120 <_malloc_r+0x64>
 8003148:	460c      	mov	r4, r1
 800314a:	6849      	ldr	r1, [r1, #4]
 800314c:	e7cc      	b.n	80030e8 <_malloc_r+0x2c>
 800314e:	1cc4      	adds	r4, r0, #3
 8003150:	f024 0403 	bic.w	r4, r4, #3
 8003154:	42a0      	cmp	r0, r4
 8003156:	d005      	beq.n	8003164 <_malloc_r+0xa8>
 8003158:	1a21      	subs	r1, r4, r0
 800315a:	4630      	mov	r0, r6
 800315c:	f000 f808 	bl	8003170 <_sbrk_r>
 8003160:	3001      	adds	r0, #1
 8003162:	d0cf      	beq.n	8003104 <_malloc_r+0x48>
 8003164:	6025      	str	r5, [r4, #0]
 8003166:	e7db      	b.n	8003120 <_malloc_r+0x64>
 8003168:	200009b4 	.word	0x200009b4
 800316c:	200009b8 	.word	0x200009b8

08003170 <_sbrk_r>:
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	2300      	movs	r3, #0
 8003174:	4c05      	ldr	r4, [pc, #20]	; (800318c <_sbrk_r+0x1c>)
 8003176:	4605      	mov	r5, r0
 8003178:	4608      	mov	r0, r1
 800317a:	6023      	str	r3, [r4, #0]
 800317c:	f7ff f850 	bl	8002220 <_sbrk>
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	d102      	bne.n	800318a <_sbrk_r+0x1a>
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	b103      	cbz	r3, 800318a <_sbrk_r+0x1a>
 8003188:	602b      	str	r3, [r5, #0]
 800318a:	bd38      	pop	{r3, r4, r5, pc}
 800318c:	20000b0c 	.word	0x20000b0c

08003190 <_raise_r>:
 8003190:	291f      	cmp	r1, #31
 8003192:	b538      	push	{r3, r4, r5, lr}
 8003194:	4604      	mov	r4, r0
 8003196:	460d      	mov	r5, r1
 8003198:	d904      	bls.n	80031a4 <_raise_r+0x14>
 800319a:	2316      	movs	r3, #22
 800319c:	6003      	str	r3, [r0, #0]
 800319e:	f04f 30ff 	mov.w	r0, #4294967295
 80031a2:	bd38      	pop	{r3, r4, r5, pc}
 80031a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80031a6:	b112      	cbz	r2, 80031ae <_raise_r+0x1e>
 80031a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80031ac:	b94b      	cbnz	r3, 80031c2 <_raise_r+0x32>
 80031ae:	4620      	mov	r0, r4
 80031b0:	f000 f830 	bl	8003214 <_getpid_r>
 80031b4:	462a      	mov	r2, r5
 80031b6:	4601      	mov	r1, r0
 80031b8:	4620      	mov	r0, r4
 80031ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031be:	f000 b817 	b.w	80031f0 <_kill_r>
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d00a      	beq.n	80031dc <_raise_r+0x4c>
 80031c6:	1c59      	adds	r1, r3, #1
 80031c8:	d103      	bne.n	80031d2 <_raise_r+0x42>
 80031ca:	2316      	movs	r3, #22
 80031cc:	6003      	str	r3, [r0, #0]
 80031ce:	2001      	movs	r0, #1
 80031d0:	e7e7      	b.n	80031a2 <_raise_r+0x12>
 80031d2:	2400      	movs	r4, #0
 80031d4:	4628      	mov	r0, r5
 80031d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80031da:	4798      	blx	r3
 80031dc:	2000      	movs	r0, #0
 80031de:	e7e0      	b.n	80031a2 <_raise_r+0x12>

080031e0 <raise>:
 80031e0:	4b02      	ldr	r3, [pc, #8]	; (80031ec <raise+0xc>)
 80031e2:	4601      	mov	r1, r0
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	f7ff bfd3 	b.w	8003190 <_raise_r>
 80031ea:	bf00      	nop
 80031ec:	20000078 	.word	0x20000078

080031f0 <_kill_r>:
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	2300      	movs	r3, #0
 80031f4:	4c06      	ldr	r4, [pc, #24]	; (8003210 <_kill_r+0x20>)
 80031f6:	4605      	mov	r5, r0
 80031f8:	4608      	mov	r0, r1
 80031fa:	4611      	mov	r1, r2
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	f7fe fff3 	bl	80021e8 <_kill>
 8003202:	1c43      	adds	r3, r0, #1
 8003204:	d102      	bne.n	800320c <_kill_r+0x1c>
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	b103      	cbz	r3, 800320c <_kill_r+0x1c>
 800320a:	602b      	str	r3, [r5, #0]
 800320c:	bd38      	pop	{r3, r4, r5, pc}
 800320e:	bf00      	nop
 8003210:	20000b0c 	.word	0x20000b0c

08003214 <_getpid_r>:
 8003214:	f7fe bfe6 	b.w	80021e4 <_getpid>

08003218 <__sread>:
 8003218:	b510      	push	{r4, lr}
 800321a:	460c      	mov	r4, r1
 800321c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003220:	f000 f896 	bl	8003350 <_read_r>
 8003224:	2800      	cmp	r0, #0
 8003226:	bfab      	itete	ge
 8003228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800322a:	89a3      	ldrhlt	r3, [r4, #12]
 800322c:	181b      	addge	r3, r3, r0
 800322e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003232:	bfac      	ite	ge
 8003234:	6563      	strge	r3, [r4, #84]	; 0x54
 8003236:	81a3      	strhlt	r3, [r4, #12]
 8003238:	bd10      	pop	{r4, pc}

0800323a <__swrite>:
 800323a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800323e:	461f      	mov	r7, r3
 8003240:	898b      	ldrh	r3, [r1, #12]
 8003242:	4605      	mov	r5, r0
 8003244:	05db      	lsls	r3, r3, #23
 8003246:	460c      	mov	r4, r1
 8003248:	4616      	mov	r6, r2
 800324a:	d505      	bpl.n	8003258 <__swrite+0x1e>
 800324c:	2302      	movs	r3, #2
 800324e:	2200      	movs	r2, #0
 8003250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003254:	f000 f868 	bl	8003328 <_lseek_r>
 8003258:	89a3      	ldrh	r3, [r4, #12]
 800325a:	4632      	mov	r2, r6
 800325c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003260:	81a3      	strh	r3, [r4, #12]
 8003262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003266:	463b      	mov	r3, r7
 8003268:	4628      	mov	r0, r5
 800326a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800326e:	f000 b817 	b.w	80032a0 <_write_r>

08003272 <__sseek>:
 8003272:	b510      	push	{r4, lr}
 8003274:	460c      	mov	r4, r1
 8003276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800327a:	f000 f855 	bl	8003328 <_lseek_r>
 800327e:	1c43      	adds	r3, r0, #1
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	bf15      	itete	ne
 8003284:	6560      	strne	r0, [r4, #84]	; 0x54
 8003286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800328a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800328e:	81a3      	strheq	r3, [r4, #12]
 8003290:	bf18      	it	ne
 8003292:	81a3      	strhne	r3, [r4, #12]
 8003294:	bd10      	pop	{r4, pc}

08003296 <__sclose>:
 8003296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800329a:	f000 b813 	b.w	80032c4 <_close_r>
	...

080032a0 <_write_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	4605      	mov	r5, r0
 80032a4:	4608      	mov	r0, r1
 80032a6:	4611      	mov	r1, r2
 80032a8:	2200      	movs	r2, #0
 80032aa:	4c05      	ldr	r4, [pc, #20]	; (80032c0 <_write_r+0x20>)
 80032ac:	6022      	str	r2, [r4, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f7ff f838 	bl	8002324 <_write>
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d102      	bne.n	80032be <_write_r+0x1e>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	b103      	cbz	r3, 80032be <_write_r+0x1e>
 80032bc:	602b      	str	r3, [r5, #0]
 80032be:	bd38      	pop	{r3, r4, r5, pc}
 80032c0:	20000b0c 	.word	0x20000b0c

080032c4 <_close_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	2300      	movs	r3, #0
 80032c8:	4c05      	ldr	r4, [pc, #20]	; (80032e0 <_close_r+0x1c>)
 80032ca:	4605      	mov	r5, r0
 80032cc:	4608      	mov	r0, r1
 80032ce:	6023      	str	r3, [r4, #0]
 80032d0:	f7fe ffc4 	bl	800225c <_close>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	d102      	bne.n	80032de <_close_r+0x1a>
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	b103      	cbz	r3, 80032de <_close_r+0x1a>
 80032dc:	602b      	str	r3, [r5, #0]
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	20000b0c 	.word	0x20000b0c

080032e4 <_fstat_r>:
 80032e4:	b538      	push	{r3, r4, r5, lr}
 80032e6:	2300      	movs	r3, #0
 80032e8:	4c06      	ldr	r4, [pc, #24]	; (8003304 <_fstat_r+0x20>)
 80032ea:	4605      	mov	r5, r0
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	f7fe ffb6 	bl	8002262 <_fstat>
 80032f6:	1c43      	adds	r3, r0, #1
 80032f8:	d102      	bne.n	8003300 <_fstat_r+0x1c>
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	b103      	cbz	r3, 8003300 <_fstat_r+0x1c>
 80032fe:	602b      	str	r3, [r5, #0]
 8003300:	bd38      	pop	{r3, r4, r5, pc}
 8003302:	bf00      	nop
 8003304:	20000b0c 	.word	0x20000b0c

08003308 <_isatty_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	2300      	movs	r3, #0
 800330c:	4c05      	ldr	r4, [pc, #20]	; (8003324 <_isatty_r+0x1c>)
 800330e:	4605      	mov	r5, r0
 8003310:	4608      	mov	r0, r1
 8003312:	6023      	str	r3, [r4, #0]
 8003314:	f7fe ffaa 	bl	800226c <_isatty>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d102      	bne.n	8003322 <_isatty_r+0x1a>
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	b103      	cbz	r3, 8003322 <_isatty_r+0x1a>
 8003320:	602b      	str	r3, [r5, #0]
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	20000b0c 	.word	0x20000b0c

08003328 <_lseek_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	4605      	mov	r5, r0
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	2200      	movs	r2, #0
 8003332:	4c05      	ldr	r4, [pc, #20]	; (8003348 <_lseek_r+0x20>)
 8003334:	6022      	str	r2, [r4, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	f7fe ff9a 	bl	8002270 <_lseek>
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	d102      	bne.n	8003346 <_lseek_r+0x1e>
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	b103      	cbz	r3, 8003346 <_lseek_r+0x1e>
 8003344:	602b      	str	r3, [r5, #0]
 8003346:	bd38      	pop	{r3, r4, r5, pc}
 8003348:	20000b0c 	.word	0x20000b0c

0800334c <__malloc_lock>:
 800334c:	4770      	bx	lr

0800334e <__malloc_unlock>:
 800334e:	4770      	bx	lr

08003350 <_read_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	4605      	mov	r5, r0
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	2200      	movs	r2, #0
 800335a:	4c05      	ldr	r4, [pc, #20]	; (8003370 <_read_r+0x20>)
 800335c:	6022      	str	r2, [r4, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	f7fe ff50 	bl	8002204 <_read>
 8003364:	1c43      	adds	r3, r0, #1
 8003366:	d102      	bne.n	800336e <_read_r+0x1e>
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	b103      	cbz	r3, 800336e <_read_r+0x1e>
 800336c:	602b      	str	r3, [r5, #0]
 800336e:	bd38      	pop	{r3, r4, r5, pc}
 8003370:	20000b0c 	.word	0x20000b0c

08003374 <_init>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr

08003380 <_fini>:
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	bf00      	nop
 8003384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003386:	bc08      	pop	{r3}
 8003388:	469e      	mov	lr, r3
 800338a:	4770      	bx	lr
