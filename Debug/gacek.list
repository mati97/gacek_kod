
gacek.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000cc  20000000  08002f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a2c  200000cc  08003058  000200cc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000af8  08003058  00020af8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001523a  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a05  00000000  00000000  0003532f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c97f  00000000  00000000  00037d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010f8  00000000  00000000  000446b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001090  00000000  00000000  000457b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00016846  00000000  00000000  00046840  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d2b8  00000000  00000000  0005d086  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00077f87  00000000  00000000  0006a33e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000e22c5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003628  00000000  00000000  000e2340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d48 	.word	0x08002d48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08002d48 	.word	0x08002d48

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f948 	bl	80003f8 <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f8fb 	bl	8000374 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b03      	ldr	r3, [pc, #12]	; (800018c <HAL_InitTick+0x40>)
 8000180:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000064 	.word	0x20000064

08000194 <HAL_Init>:
{
 8000194:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000196:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
 8000198:	6813      	ldr	r3, [r2, #0]
 800019a:	f043 0310 	orr.w	r3, r3, #16
 800019e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a0:	2003      	movs	r0, #3
 80001a2:	f000 f8d5 	bl	8000350 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fbec 	bl	8001988 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	6811      	ldr	r1, [r2, #0]
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <HAL_IncTick+0x14>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200009ac 	.word	0x200009ac
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200009ac 	.word	0x200009ac

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ea:	d002      	beq.n	80001f2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <HAL_Delay+0x24>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f2:	f7ff ffed 	bl	80001d0 <HAL_GetTick>
 80001f6:	1b40      	subs	r0, r0, r5
 80001f8:	42a0      	cmp	r0, r4
 80001fa:	d3fa      	bcc.n	80001f2 <HAL_Delay+0x16>
  {
  }
}
 80001fc:	bd38      	pop	{r3, r4, r5, pc}
 80001fe:	bf00      	nop
 8000200:	20000000 	.word	0x20000000

08000204 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000204:	2800      	cmp	r0, #0
 8000206:	f000 80a1 	beq.w	800034c <HAL_CAN_Init+0x148>
{
 800020a:	b538      	push	{r3, r4, r5, lr}
 800020c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800020e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000212:	b1d3      	cbz	r3, 800024a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000214:	6822      	ldr	r2, [r4, #0]
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	f023 0302 	bic.w	r3, r3, #2
 800021c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800021e:	f7ff ffd7 	bl	80001d0 <HAL_GetTick>
 8000222:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000224:	6823      	ldr	r3, [r4, #0]
 8000226:	685a      	ldr	r2, [r3, #4]
 8000228:	f012 0f02 	tst.w	r2, #2
 800022c:	d010      	beq.n	8000250 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800022e:	f7ff ffcf 	bl	80001d0 <HAL_GetTick>
 8000232:	1b40      	subs	r0, r0, r5
 8000234:	280a      	cmp	r0, #10
 8000236:	d9f5      	bls.n	8000224 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800023e:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000240:	2305      	movs	r3, #5
 8000242:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000246:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000248:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800024a:	f001 fbbf 	bl	80019cc <HAL_CAN_MspInit>
 800024e:	e7e1      	b.n	8000214 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	f042 0201 	orr.w	r2, r2, #1
 8000256:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000258:	f7ff ffba 	bl	80001d0 <HAL_GetTick>
 800025c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800025e:	6823      	ldr	r3, [r4, #0]
 8000260:	685a      	ldr	r2, [r3, #4]
 8000262:	f012 0f01 	tst.w	r2, #1
 8000266:	d10d      	bne.n	8000284 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000268:	f7ff ffb2 	bl	80001d0 <HAL_GetTick>
 800026c:	1b40      	subs	r0, r0, r5
 800026e:	280a      	cmp	r0, #10
 8000270:	d9f5      	bls.n	800025e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000278:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800027a:	2305      	movs	r3, #5
 800027c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000280:	2001      	movs	r0, #1
 8000282:	e7e1      	b.n	8000248 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000284:	7e22      	ldrb	r2, [r4, #24]
 8000286:	2a01      	cmp	r2, #1
 8000288:	d03d      	beq.n	8000306 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000290:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000292:	7e63      	ldrb	r3, [r4, #25]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d03b      	beq.n	8000310 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000298:	6822      	ldr	r2, [r4, #0]
 800029a:	6813      	ldr	r3, [r2, #0]
 800029c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002a0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80002a2:	7ea3      	ldrb	r3, [r4, #26]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d039      	beq.n	800031c <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002a8:	6822      	ldr	r2, [r4, #0]
 80002aa:	6813      	ldr	r3, [r2, #0]
 80002ac:	f023 0320 	bic.w	r3, r3, #32
 80002b0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80002b2:	7ee3      	ldrb	r3, [r4, #27]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d037      	beq.n	8000328 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80002b8:	6822      	ldr	r2, [r4, #0]
 80002ba:	6813      	ldr	r3, [r2, #0]
 80002bc:	f043 0310 	orr.w	r3, r3, #16
 80002c0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80002c2:	7f23      	ldrb	r3, [r4, #28]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d035      	beq.n	8000334 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80002c8:	6822      	ldr	r2, [r4, #0]
 80002ca:	6813      	ldr	r3, [r2, #0]
 80002cc:	f023 0308 	bic.w	r3, r3, #8
 80002d0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80002d2:	7f63      	ldrb	r3, [r4, #29]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d033      	beq.n	8000340 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002d8:	6822      	ldr	r2, [r4, #0]
 80002da:	6813      	ldr	r3, [r2, #0]
 80002dc:	f023 0304 	bic.w	r3, r3, #4
 80002e0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80002e2:	68a3      	ldr	r3, [r4, #8]
 80002e4:	68e2      	ldr	r2, [r4, #12]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	6922      	ldr	r2, [r4, #16]
 80002ea:	4313      	orrs	r3, r2
 80002ec:	6962      	ldr	r2, [r4, #20]
 80002ee:	4313      	orrs	r3, r2
 80002f0:	6862      	ldr	r2, [r4, #4]
 80002f2:	3a01      	subs	r2, #1
 80002f4:	6821      	ldr	r1, [r4, #0]
 80002f6:	4313      	orrs	r3, r2
 80002f8:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80002fa:	2000      	movs	r0, #0
 80002fc:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80002fe:	2301      	movs	r3, #1
 8000300:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000304:	e7a0      	b.n	8000248 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	e7c0      	b.n	8000292 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000310:	6822      	ldr	r2, [r4, #0]
 8000312:	6813      	ldr	r3, [r2, #0]
 8000314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000318:	6013      	str	r3, [r2, #0]
 800031a:	e7c2      	b.n	80002a2 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800031c:	6822      	ldr	r2, [r4, #0]
 800031e:	6813      	ldr	r3, [r2, #0]
 8000320:	f043 0320 	orr.w	r3, r3, #32
 8000324:	6013      	str	r3, [r2, #0]
 8000326:	e7c4      	b.n	80002b2 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000328:	6822      	ldr	r2, [r4, #0]
 800032a:	6813      	ldr	r3, [r2, #0]
 800032c:	f023 0310 	bic.w	r3, r3, #16
 8000330:	6013      	str	r3, [r2, #0]
 8000332:	e7c6      	b.n	80002c2 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000334:	6822      	ldr	r2, [r4, #0]
 8000336:	6813      	ldr	r3, [r2, #0]
 8000338:	f043 0308 	orr.w	r3, r3, #8
 800033c:	6013      	str	r3, [r2, #0]
 800033e:	e7c8      	b.n	80002d2 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000340:	6822      	ldr	r2, [r4, #0]
 8000342:	6813      	ldr	r3, [r2, #0]
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6013      	str	r3, [r2, #0]
 800034a:	e7ca      	b.n	80002e2 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800034c:	2001      	movs	r0, #1
}
 800034e:	4770      	bx	lr

08000350 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000350:	4a07      	ldr	r2, [pc, #28]	; (8000370 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000352:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000354:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000358:	041b      	lsls	r3, r3, #16
 800035a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800035c:	0200      	lsls	r0, r0, #8
 800035e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000362:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000364:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000368:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800036c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800036e:	4770      	bx	lr
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000374:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000376:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <HAL_NVIC_SetPriority+0x60>)
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800037e:	f1c3 0407 	rsb	r4, r3, #7
 8000382:	2c04      	cmp	r4, #4
 8000384:	bf28      	it	cs
 8000386:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000388:	1d1d      	adds	r5, r3, #4
 800038a:	2d06      	cmp	r5, #6
 800038c:	d918      	bls.n	80003c0 <HAL_NVIC_SetPriority+0x4c>
 800038e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000390:	f04f 35ff 	mov.w	r5, #4294967295
 8000394:	fa05 f404 	lsl.w	r4, r5, r4
 8000398:	ea21 0104 	bic.w	r1, r1, r4
 800039c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800039e:	fa05 f303 	lsl.w	r3, r5, r3
 80003a2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80003a8:	2800      	cmp	r0, #0
 80003aa:	db0b      	blt.n	80003c4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	0109      	lsls	r1, r1, #4
 80003ae:	b2c9      	uxtb	r1, r1
 80003b0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80003b4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80003b8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80003bc:	bc30      	pop	{r4, r5}
 80003be:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003c0:	2300      	movs	r3, #0
 80003c2:	e7e5      	b.n	8000390 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c4:	f000 000f 	and.w	r0, r0, #15
 80003c8:	0109      	lsls	r1, r1, #4
 80003ca:	b2c9      	uxtb	r1, r1
 80003cc:	4b02      	ldr	r3, [pc, #8]	; (80003d8 <HAL_NVIC_SetPriority+0x64>)
 80003ce:	5419      	strb	r1, [r3, r0]
 80003d0:	e7f4      	b.n	80003bc <HAL_NVIC_SetPriority+0x48>
 80003d2:	bf00      	nop
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	e000ed14 	.word	0xe000ed14

080003dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80003dc:	2800      	cmp	r0, #0
 80003de:	db07      	blt.n	80003f0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003e0:	f000 021f 	and.w	r2, r0, #31
 80003e4:	0940      	lsrs	r0, r0, #5
 80003e6:	2301      	movs	r3, #1
 80003e8:	4093      	lsls	r3, r2
 80003ea:	4a02      	ldr	r2, [pc, #8]	; (80003f4 <HAL_NVIC_EnableIRQ+0x18>)
 80003ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	e000e100 	.word	0xe000e100

080003f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	3801      	subs	r0, #1
 80003fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003fe:	d20a      	bcs.n	8000416 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <HAL_SYSTICK_Config+0x24>)
 8000402:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000404:	4a06      	ldr	r2, [pc, #24]	; (8000420 <HAL_SYSTICK_Config+0x28>)
 8000406:	21f0      	movs	r1, #240	; 0xf0
 8000408:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800040c:	2000      	movs	r0, #0
 800040e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000410:	2207      	movs	r2, #7
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000416:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	e000e010 	.word	0xe000e010
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000424:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000426:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800042a:	2b02      	cmp	r3, #2
 800042c:	d003      	beq.n	8000436 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800042e:	2304      	movs	r3, #4
 8000430:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000432:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000434:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000436:	6802      	ldr	r2, [r0, #0]
 8000438:	6813      	ldr	r3, [r2, #0]
 800043a:	f023 030e 	bic.w	r3, r3, #14
 800043e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000440:	6802      	ldr	r2, [r0, #0]
 8000442:	6813      	ldr	r3, [r2, #0]
 8000444:	f023 0301 	bic.w	r3, r3, #1
 8000448:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800044a:	6803      	ldr	r3, [r0, #0]
 800044c:	4a19      	ldr	r2, [pc, #100]	; (80004b4 <HAL_DMA_Abort_IT+0x90>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d014      	beq.n	800047c <HAL_DMA_Abort_IT+0x58>
 8000452:	3214      	adds	r2, #20
 8000454:	4293      	cmp	r3, r2
 8000456:	d01f      	beq.n	8000498 <HAL_DMA_Abort_IT+0x74>
 8000458:	3214      	adds	r2, #20
 800045a:	4293      	cmp	r3, r2
 800045c:	d01e      	beq.n	800049c <HAL_DMA_Abort_IT+0x78>
 800045e:	3214      	adds	r2, #20
 8000460:	4293      	cmp	r3, r2
 8000462:	d01e      	beq.n	80004a2 <HAL_DMA_Abort_IT+0x7e>
 8000464:	3214      	adds	r2, #20
 8000466:	4293      	cmp	r3, r2
 8000468:	d01e      	beq.n	80004a8 <HAL_DMA_Abort_IT+0x84>
 800046a:	3214      	adds	r2, #20
 800046c:	4293      	cmp	r3, r2
 800046e:	d002      	beq.n	8000476 <HAL_DMA_Abort_IT+0x52>
 8000470:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000474:	e003      	b.n	800047e <HAL_DMA_Abort_IT+0x5a>
 8000476:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800047a:	e000      	b.n	800047e <HAL_DMA_Abort_IT+0x5a>
 800047c:	2201      	movs	r2, #1
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <HAL_DMA_Abort_IT+0x94>)
 8000480:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000482:	2301      	movs	r3, #1
 8000484:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000488:	2300      	movs	r3, #0
 800048a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800048e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000490:	b16b      	cbz	r3, 80004ae <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8000492:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000494:	2000      	movs	r0, #0
 8000496:	e7cd      	b.n	8000434 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000498:	2210      	movs	r2, #16
 800049a:	e7f0      	b.n	800047e <HAL_DMA_Abort_IT+0x5a>
 800049c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a0:	e7ed      	b.n	800047e <HAL_DMA_Abort_IT+0x5a>
 80004a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004a6:	e7ea      	b.n	800047e <HAL_DMA_Abort_IT+0x5a>
 80004a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004ac:	e7e7      	b.n	800047e <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 80004ae:	2000      	movs	r0, #0
 80004b0:	e7c0      	b.n	8000434 <HAL_DMA_Abort_IT+0x10>
 80004b2:	bf00      	nop
 80004b4:	40020008 	.word	0x40020008
 80004b8:	40020000 	.word	0x40020000

080004bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004bc:	b4f0      	push	{r4, r5, r6, r7}
 80004be:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80004c0:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 80004c2:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004c4:	e0a2      	b.n	800060c <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004c6:	2d00      	cmp	r5, #0
 80004c8:	d05a      	beq.n	8000580 <HAL_GPIO_Init+0xc4>
 80004ca:	2d01      	cmp	r5, #1
 80004cc:	d100      	bne.n	80004d0 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004ce:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004d0:	2bff      	cmp	r3, #255	; 0xff
 80004d2:	d869      	bhi.n	80005a8 <HAL_GPIO_Init+0xec>
 80004d4:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80004d6:	2bff      	cmp	r3, #255	; 0xff
 80004d8:	d869      	bhi.n	80005ae <HAL_GPIO_Init+0xf2>
 80004da:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004dc:	f8dc 4000 	ldr.w	r4, [ip]
 80004e0:	270f      	movs	r7, #15
 80004e2:	40af      	lsls	r7, r5
 80004e4:	ea24 0407 	bic.w	r4, r4, r7
 80004e8:	fa06 f505 	lsl.w	r5, r6, r5
 80004ec:	432c      	orrs	r4, r5
 80004ee:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004f2:	684c      	ldr	r4, [r1, #4]
 80004f4:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80004f8:	f000 8087 	beq.w	800060a <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004fc:	4c5f      	ldr	r4, [pc, #380]	; (800067c <HAL_GPIO_Init+0x1c0>)
 80004fe:	69a5      	ldr	r5, [r4, #24]
 8000500:	f045 0501 	orr.w	r5, r5, #1
 8000504:	61a5      	str	r5, [r4, #24]
 8000506:	69a4      	ldr	r4, [r4, #24]
 8000508:	f004 0401 	and.w	r4, r4, #1
 800050c:	9401      	str	r4, [sp, #4]
 800050e:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000510:	0895      	lsrs	r5, r2, #2
 8000512:	1caf      	adds	r7, r5, #2
 8000514:	4c5a      	ldr	r4, [pc, #360]	; (8000680 <HAL_GPIO_Init+0x1c4>)
 8000516:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800051a:	f002 0703 	and.w	r7, r2, #3
 800051e:	00bf      	lsls	r7, r7, #2
 8000520:	f04f 0c0f 	mov.w	ip, #15
 8000524:	fa0c fc07 	lsl.w	ip, ip, r7
 8000528:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800052c:	4c55      	ldr	r4, [pc, #340]	; (8000684 <HAL_GPIO_Init+0x1c8>)
 800052e:	42a0      	cmp	r0, r4
 8000530:	d043      	beq.n	80005ba <HAL_GPIO_Init+0xfe>
 8000532:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000536:	42a0      	cmp	r0, r4
 8000538:	f000 8081 	beq.w	800063e <HAL_GPIO_Init+0x182>
 800053c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000540:	42a0      	cmp	r0, r4
 8000542:	d07e      	beq.n	8000642 <HAL_GPIO_Init+0x186>
 8000544:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000548:	42a0      	cmp	r0, r4
 800054a:	d034      	beq.n	80005b6 <HAL_GPIO_Init+0xfa>
 800054c:	2404      	movs	r4, #4
 800054e:	e035      	b.n	80005bc <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8000550:	4f4d      	ldr	r7, [pc, #308]	; (8000688 <HAL_GPIO_Init+0x1cc>)
 8000552:	42bd      	cmp	r5, r7
 8000554:	d014      	beq.n	8000580 <HAL_GPIO_Init+0xc4>
 8000556:	d90b      	bls.n	8000570 <HAL_GPIO_Init+0xb4>
 8000558:	4f4c      	ldr	r7, [pc, #304]	; (800068c <HAL_GPIO_Init+0x1d0>)
 800055a:	42bd      	cmp	r5, r7
 800055c:	d010      	beq.n	8000580 <HAL_GPIO_Init+0xc4>
 800055e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000562:	42bd      	cmp	r5, r7
 8000564:	d00c      	beq.n	8000580 <HAL_GPIO_Init+0xc4>
 8000566:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800056a:	42bd      	cmp	r5, r7
 800056c:	d1b0      	bne.n	80004d0 <HAL_GPIO_Init+0x14>
 800056e:	e007      	b.n	8000580 <HAL_GPIO_Init+0xc4>
 8000570:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000574:	42bd      	cmp	r5, r7
 8000576:	d003      	beq.n	8000580 <HAL_GPIO_Init+0xc4>
 8000578:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800057c:	42bd      	cmp	r5, r7
 800057e:	d1a7      	bne.n	80004d0 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000580:	688d      	ldr	r5, [r1, #8]
 8000582:	b17d      	cbz	r5, 80005a4 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000584:	2d01      	cmp	r5, #1
 8000586:	d008      	beq.n	800059a <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8000588:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800058a:	2608      	movs	r6, #8
 800058c:	e7a0      	b.n	80004d0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800058e:	68ce      	ldr	r6, [r1, #12]
 8000590:	3608      	adds	r6, #8
          break;
 8000592:	e79d      	b.n	80004d0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000594:	68ce      	ldr	r6, [r1, #12]
 8000596:	360c      	adds	r6, #12
          break;
 8000598:	e79a      	b.n	80004d0 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 800059a:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800059c:	2608      	movs	r6, #8
 800059e:	e797      	b.n	80004d0 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005a0:	2600      	movs	r6, #0
 80005a2:	e795      	b.n	80004d0 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005a4:	2604      	movs	r6, #4
 80005a6:	e793      	b.n	80004d0 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005a8:	f100 0c04 	add.w	ip, r0, #4
 80005ac:	e793      	b.n	80004d6 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80005ae:	f1a2 0508 	sub.w	r5, r2, #8
 80005b2:	00ad      	lsls	r5, r5, #2
 80005b4:	e792      	b.n	80004dc <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005b6:	2403      	movs	r4, #3
 80005b8:	e000      	b.n	80005bc <HAL_GPIO_Init+0x100>
 80005ba:	2400      	movs	r4, #0
 80005bc:	40bc      	lsls	r4, r7
 80005be:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 80005c2:	3502      	adds	r5, #2
 80005c4:	4f2e      	ldr	r7, [pc, #184]	; (8000680 <HAL_GPIO_Init+0x1c4>)
 80005c6:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ca:	684c      	ldr	r4, [r1, #4]
 80005cc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80005d0:	d039      	beq.n	8000646 <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005d2:	4d2f      	ldr	r5, [pc, #188]	; (8000690 <HAL_GPIO_Init+0x1d4>)
 80005d4:	682c      	ldr	r4, [r5, #0]
 80005d6:	431c      	orrs	r4, r3
 80005d8:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005da:	684c      	ldr	r4, [r1, #4]
 80005dc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80005e0:	d037      	beq.n	8000652 <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80005e2:	4d2b      	ldr	r5, [pc, #172]	; (8000690 <HAL_GPIO_Init+0x1d4>)
 80005e4:	686c      	ldr	r4, [r5, #4]
 80005e6:	431c      	orrs	r4, r3
 80005e8:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005ea:	684c      	ldr	r4, [r1, #4]
 80005ec:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 80005f0:	d035      	beq.n	800065e <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80005f2:	4d27      	ldr	r5, [pc, #156]	; (8000690 <HAL_GPIO_Init+0x1d4>)
 80005f4:	68ac      	ldr	r4, [r5, #8]
 80005f6:	431c      	orrs	r4, r3
 80005f8:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005fa:	684c      	ldr	r4, [r1, #4]
 80005fc:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8000600:	d033      	beq.n	800066a <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000602:	4d23      	ldr	r5, [pc, #140]	; (8000690 <HAL_GPIO_Init+0x1d4>)
 8000604:	68ec      	ldr	r4, [r5, #12]
 8000606:	4323      	orrs	r3, r4
 8000608:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 800060a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800060c:	680b      	ldr	r3, [r1, #0]
 800060e:	fa33 f402 	lsrs.w	r4, r3, r2
 8000612:	d030      	beq.n	8000676 <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8000614:	2401      	movs	r4, #1
 8000616:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000618:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 800061a:	429c      	cmp	r4, r3
 800061c:	d1f5      	bne.n	800060a <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 800061e:	684d      	ldr	r5, [r1, #4]
 8000620:	2d12      	cmp	r5, #18
 8000622:	d0b7      	beq.n	8000594 <HAL_GPIO_Init+0xd8>
 8000624:	d894      	bhi.n	8000550 <HAL_GPIO_Init+0x94>
 8000626:	2d02      	cmp	r5, #2
 8000628:	d0b1      	beq.n	800058e <HAL_GPIO_Init+0xd2>
 800062a:	f67f af4c 	bls.w	80004c6 <HAL_GPIO_Init+0xa>
 800062e:	2d03      	cmp	r5, #3
 8000630:	d0b6      	beq.n	80005a0 <HAL_GPIO_Init+0xe4>
 8000632:	2d11      	cmp	r5, #17
 8000634:	f47f af4c 	bne.w	80004d0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000638:	68ce      	ldr	r6, [r1, #12]
 800063a:	3604      	adds	r6, #4
          break;
 800063c:	e748      	b.n	80004d0 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800063e:	2401      	movs	r4, #1
 8000640:	e7bc      	b.n	80005bc <HAL_GPIO_Init+0x100>
 8000642:	2402      	movs	r4, #2
 8000644:	e7ba      	b.n	80005bc <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000646:	4d12      	ldr	r5, [pc, #72]	; (8000690 <HAL_GPIO_Init+0x1d4>)
 8000648:	682c      	ldr	r4, [r5, #0]
 800064a:	ea24 0403 	bic.w	r4, r4, r3
 800064e:	602c      	str	r4, [r5, #0]
 8000650:	e7c3      	b.n	80005da <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000652:	4d0f      	ldr	r5, [pc, #60]	; (8000690 <HAL_GPIO_Init+0x1d4>)
 8000654:	686c      	ldr	r4, [r5, #4]
 8000656:	ea24 0403 	bic.w	r4, r4, r3
 800065a:	606c      	str	r4, [r5, #4]
 800065c:	e7c5      	b.n	80005ea <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800065e:	4d0c      	ldr	r5, [pc, #48]	; (8000690 <HAL_GPIO_Init+0x1d4>)
 8000660:	68ac      	ldr	r4, [r5, #8]
 8000662:	ea24 0403 	bic.w	r4, r4, r3
 8000666:	60ac      	str	r4, [r5, #8]
 8000668:	e7c7      	b.n	80005fa <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800066a:	4d09      	ldr	r5, [pc, #36]	; (8000690 <HAL_GPIO_Init+0x1d4>)
 800066c:	68ec      	ldr	r4, [r5, #12]
 800066e:	ea24 0303 	bic.w	r3, r4, r3
 8000672:	60eb      	str	r3, [r5, #12]
 8000674:	e7c9      	b.n	800060a <HAL_GPIO_Init+0x14e>
  }
}
 8000676:	b002      	add	sp, #8
 8000678:	bcf0      	pop	{r4, r5, r6, r7}
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000
 8000680:	40010000 	.word	0x40010000
 8000684:	40010800 	.word	0x40010800
 8000688:	10210000 	.word	0x10210000
 800068c:	10310000 	.word	0x10310000
 8000690:	40010400 	.word	0x40010400

08000694 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000694:	2800      	cmp	r0, #0
 8000696:	f000 80be 	beq.w	8000816 <HAL_I2C_Init+0x182>
{
 800069a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069c:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800069e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d06b      	beq.n	800077e <HAL_I2C_Init+0xea>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80006a6:	2324      	movs	r3, #36	; 0x24
 80006a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80006ac:	6822      	ldr	r2, [r4, #0]
 80006ae:	6813      	ldr	r3, [r2, #0]
 80006b0:	f023 0301 	bic.w	r3, r3, #1
 80006b4:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80006b6:	f000 fbcd 	bl	8000e54 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80006ba:	6862      	ldr	r2, [r4, #4]
 80006bc:	4b58      	ldr	r3, [pc, #352]	; (8000820 <HAL_I2C_Init+0x18c>)
 80006be:	429a      	cmp	r2, r3
 80006c0:	d862      	bhi.n	8000788 <HAL_I2C_Init+0xf4>
 80006c2:	4b58      	ldr	r3, [pc, #352]	; (8000824 <HAL_I2C_Init+0x190>)
 80006c4:	4298      	cmp	r0, r3
 80006c6:	bf8c      	ite	hi
 80006c8:	2300      	movhi	r3, #0
 80006ca:	2301      	movls	r3, #1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	f040 80a4 	bne.w	800081a <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80006d2:	4b55      	ldr	r3, [pc, #340]	; (8000828 <HAL_I2C_Init+0x194>)
 80006d4:	fba3 2300 	umull	r2, r3, r3, r0
 80006d8:	0c9b      	lsrs	r3, r3, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80006da:	6821      	ldr	r1, [r4, #0]
 80006dc:	684a      	ldr	r2, [r1, #4]
 80006de:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80006e2:	431a      	orrs	r2, r3
 80006e4:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80006e6:	6825      	ldr	r5, [r4, #0]
 80006e8:	6a2a      	ldr	r2, [r5, #32]
 80006ea:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80006ee:	6866      	ldr	r6, [r4, #4]
 80006f0:	494b      	ldr	r1, [pc, #300]	; (8000820 <HAL_I2C_Init+0x18c>)
 80006f2:	428e      	cmp	r6, r1
 80006f4:	d84e      	bhi.n	8000794 <HAL_I2C_Init+0x100>
 80006f6:	3301      	adds	r3, #1
 80006f8:	4313      	orrs	r3, r2
 80006fa:	622b      	str	r3, [r5, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80006fc:	6825      	ldr	r5, [r4, #0]
 80006fe:	69e9      	ldr	r1, [r5, #28]
 8000700:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000704:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000708:	6863      	ldr	r3, [r4, #4]
 800070a:	4a45      	ldr	r2, [pc, #276]	; (8000820 <HAL_I2C_Init+0x18c>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d84b      	bhi.n	80007a8 <HAL_I2C_Init+0x114>
 8000710:	3801      	subs	r0, #1
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	fbb0 f3f3 	udiv	r3, r0, r3
 8000718:	3301      	adds	r3, #1
 800071a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071e:	2b04      	cmp	r3, #4
 8000720:	bf38      	it	cc
 8000722:	2304      	movcc	r3, #4
 8000724:	430b      	orrs	r3, r1
 8000726:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000728:	6821      	ldr	r1, [r4, #0]
 800072a:	680b      	ldr	r3, [r1, #0]
 800072c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000730:	69e2      	ldr	r2, [r4, #28]
 8000732:	6a20      	ldr	r0, [r4, #32]
 8000734:	4302      	orrs	r2, r0
 8000736:	4313      	orrs	r3, r2
 8000738:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800073a:	6821      	ldr	r1, [r4, #0]
 800073c:	688b      	ldr	r3, [r1, #8]
 800073e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000742:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000746:	6922      	ldr	r2, [r4, #16]
 8000748:	68e0      	ldr	r0, [r4, #12]
 800074a:	4302      	orrs	r2, r0
 800074c:	4313      	orrs	r3, r2
 800074e:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000750:	6821      	ldr	r1, [r4, #0]
 8000752:	68cb      	ldr	r3, [r1, #12]
 8000754:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000758:	6962      	ldr	r2, [r4, #20]
 800075a:	69a0      	ldr	r0, [r4, #24]
 800075c:	4302      	orrs	r2, r0
 800075e:	4313      	orrs	r3, r2
 8000760:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000762:	6822      	ldr	r2, [r4, #0]
 8000764:	6813      	ldr	r3, [r2, #0]
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800076c:	2000      	movs	r0, #0
 800076e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000770:	2320      	movs	r3, #32
 8000772:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000776:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000778:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 800077c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800077e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000782:	f001 f95f 	bl	8001a44 <HAL_I2C_MspInit>
 8000786:	e78e      	b.n	80006a6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <HAL_I2C_Init+0x198>)
 800078a:	4298      	cmp	r0, r3
 800078c:	bf8c      	ite	hi
 800078e:	2300      	movhi	r3, #0
 8000790:	2301      	movls	r3, #1
 8000792:	e79b      	b.n	80006cc <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000794:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000798:	fb01 f303 	mul.w	r3, r1, r3
 800079c:	4924      	ldr	r1, [pc, #144]	; (8000830 <HAL_I2C_Init+0x19c>)
 800079e:	fba1 1303 	umull	r1, r3, r1, r3
 80007a2:	099b      	lsrs	r3, r3, #6
 80007a4:	3301      	adds	r3, #1
 80007a6:	e7a7      	b.n	80006f8 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80007a8:	68a2      	ldr	r2, [r4, #8]
 80007aa:	b9ba      	cbnz	r2, 80007dc <HAL_I2C_Init+0x148>
 80007ac:	1e46      	subs	r6, r0, #1
 80007ae:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80007b2:	fbb6 f6f7 	udiv	r6, r6, r7
 80007b6:	3601      	adds	r6, #1
 80007b8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80007bc:	fab6 f686 	clz	r6, r6
 80007c0:	0976      	lsrs	r6, r6, #5
 80007c2:	bb36      	cbnz	r6, 8000812 <HAL_I2C_Init+0x17e>
 80007c4:	b9c2      	cbnz	r2, 80007f8 <HAL_I2C_Init+0x164>
 80007c6:	3801      	subs	r0, #1
 80007c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80007cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80007d0:	3301      	adds	r3, #1
 80007d2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80007d6:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80007da:	e7a3      	b.n	8000724 <HAL_I2C_Init+0x90>
 80007dc:	1e46      	subs	r6, r0, #1
 80007de:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80007e2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80007e6:	fbb6 f6f7 	udiv	r6, r6, r7
 80007ea:	3601      	adds	r6, #1
 80007ec:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80007f0:	fab6 f686 	clz	r6, r6
 80007f4:	0976      	lsrs	r6, r6, #5
 80007f6:	e7e4      	b.n	80007c2 <HAL_I2C_Init+0x12e>
 80007f8:	3801      	subs	r0, #1
 80007fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80007fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000802:	fbb0 f2f3 	udiv	r2, r0, r3
 8000806:	3201      	adds	r2, #1
 8000808:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800080c:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8000810:	e788      	b.n	8000724 <HAL_I2C_Init+0x90>
 8000812:	2301      	movs	r3, #1
 8000814:	e786      	b.n	8000724 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8000816:	2001      	movs	r0, #1
}
 8000818:	4770      	bx	lr
    return HAL_ERROR;
 800081a:	2001      	movs	r0, #1
 800081c:	e7ae      	b.n	800077c <HAL_I2C_Init+0xe8>
 800081e:	bf00      	nop
 8000820:	000186a0 	.word	0x000186a0
 8000824:	001e847f 	.word	0x001e847f
 8000828:	431bde83 	.word	0x431bde83
 800082c:	003d08ff 	.word	0x003d08ff
 8000830:	10624dd3 	.word	0x10624dd3

08000834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000834:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <RCC_Delay+0x24>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <RCC_Delay+0x28>)
 800083c:	fba2 2303 	umull	r2, r3, r2, r3
 8000840:	0a5b      	lsrs	r3, r3, #9
 8000842:	fb00 f003 	mul.w	r0, r0, r3
 8000846:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8000848:	bf00      	nop
  }
  while (Delay --);
 800084a:	9b01      	ldr	r3, [sp, #4]
 800084c:	1e5a      	subs	r2, r3, #1
 800084e:	9201      	str	r2, [sp, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1f9      	bne.n	8000848 <RCC_Delay+0x14>
}
 8000854:	b002      	add	sp, #8
 8000856:	4770      	bx	lr
 8000858:	20000064 	.word	0x20000064
 800085c:	10624dd3 	.word	0x10624dd3

08000860 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000860:	2800      	cmp	r0, #0
 8000862:	f000 81f5 	beq.w	8000c50 <HAL_RCC_OscConfig+0x3f0>
{
 8000866:	b570      	push	{r4, r5, r6, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800086c:	6803      	ldr	r3, [r0, #0]
 800086e:	f013 0f01 	tst.w	r3, #1
 8000872:	d02c      	beq.n	80008ce <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000874:	4bab      	ldr	r3, [pc, #684]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f003 030c 	and.w	r3, r3, #12
 800087c:	2b04      	cmp	r3, #4
 800087e:	d01d      	beq.n	80008bc <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000880:	4ba8      	ldr	r3, [pc, #672]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f003 030c 	and.w	r3, r3, #12
 8000888:	2b08      	cmp	r3, #8
 800088a:	d012      	beq.n	80008b2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088c:	6863      	ldr	r3, [r4, #4]
 800088e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000892:	d041      	beq.n	8000918 <HAL_RCC_OscConfig+0xb8>
 8000894:	2b00      	cmp	r3, #0
 8000896:	d155      	bne.n	8000944 <HAL_RCC_OscConfig+0xe4>
 8000898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800089c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	e037      	b.n	8000922 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008b2:	4b9c      	ldr	r3, [pc, #624]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80008ba:	d0e7      	beq.n	800088c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008bc:	4b99      	ldr	r3, [pc, #612]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008c4:	d003      	beq.n	80008ce <HAL_RCC_OscConfig+0x6e>
 80008c6:	6863      	ldr	r3, [r4, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	f000 81c3 	beq.w	8000c54 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ce:	6823      	ldr	r3, [r4, #0]
 80008d0:	f013 0f02 	tst.w	r3, #2
 80008d4:	d076      	beq.n	80009c4 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008d6:	4b93      	ldr	r3, [pc, #588]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f013 0f0c 	tst.w	r3, #12
 80008de:	d05f      	beq.n	80009a0 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008e0:	4b90      	ldr	r3, [pc, #576]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f003 030c 	and.w	r3, r3, #12
 80008e8:	2b08      	cmp	r3, #8
 80008ea:	d054      	beq.n	8000996 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008ec:	6923      	ldr	r3, [r4, #16]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f000 808a 	beq.w	8000a08 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80008f4:	4b8c      	ldr	r3, [pc, #560]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008fa:	f7ff fc69 	bl	80001d0 <HAL_GetTick>
 80008fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000900:	4b88      	ldr	r3, [pc, #544]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f013 0f02 	tst.w	r3, #2
 8000908:	d175      	bne.n	80009f6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800090a:	f7ff fc61 	bl	80001d0 <HAL_GetTick>
 800090e:	1b40      	subs	r0, r0, r5
 8000910:	2802      	cmp	r0, #2
 8000912:	d9f5      	bls.n	8000900 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000914:	2003      	movs	r0, #3
 8000916:	e1a0      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000918:	4a82      	ldr	r2, [pc, #520]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 800091a:	6813      	ldr	r3, [r2, #0]
 800091c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000920:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000922:	6863      	ldr	r3, [r4, #4]
 8000924:	b343      	cbz	r3, 8000978 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000926:	f7ff fc53 	bl	80001d0 <HAL_GetTick>
 800092a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800092c:	4b7d      	ldr	r3, [pc, #500]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000934:	d1cb      	bne.n	80008ce <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000936:	f7ff fc4b 	bl	80001d0 <HAL_GetTick>
 800093a:	1b40      	subs	r0, r0, r5
 800093c:	2864      	cmp	r0, #100	; 0x64
 800093e:	d9f5      	bls.n	800092c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000940:	2003      	movs	r0, #3
 8000942:	e18a      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000948:	d009      	beq.n	800095e <HAL_RCC_OscConfig+0xfe>
 800094a:	4b76      	ldr	r3, [pc, #472]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	e7e1      	b.n	8000922 <HAL_RCC_OscConfig+0xc2>
 800095e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000962:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	e7d4      	b.n	8000922 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000978:	f7ff fc2a 	bl	80001d0 <HAL_GetTick>
 800097c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800097e:	4b69      	ldr	r3, [pc, #420]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000986:	d0a2      	beq.n	80008ce <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000988:	f7ff fc22 	bl	80001d0 <HAL_GetTick>
 800098c:	1b40      	subs	r0, r0, r5
 800098e:	2864      	cmp	r0, #100	; 0x64
 8000990:	d9f5      	bls.n	800097e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000992:	2003      	movs	r0, #3
 8000994:	e161      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000996:	4b63      	ldr	r3, [pc, #396]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800099e:	d1a5      	bne.n	80008ec <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a0:	4b60      	ldr	r3, [pc, #384]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f013 0f02 	tst.w	r3, #2
 80009a8:	d004      	beq.n	80009b4 <HAL_RCC_OscConfig+0x154>
 80009aa:	6923      	ldr	r3, [r4, #16]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d001      	beq.n	80009b4 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 80009b0:	2001      	movs	r0, #1
 80009b2:	e152      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b4:	4a5b      	ldr	r2, [pc, #364]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 80009b6:	6813      	ldr	r3, [r2, #0]
 80009b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009bc:	6961      	ldr	r1, [r4, #20]
 80009be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009c2:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009c4:	6823      	ldr	r3, [r4, #0]
 80009c6:	f013 0f08 	tst.w	r3, #8
 80009ca:	d032      	beq.n	8000a32 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009cc:	69a3      	ldr	r3, [r4, #24]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d05b      	beq.n	8000a8a <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80009d2:	4b56      	ldr	r3, [pc, #344]	; (8000b2c <HAL_RCC_OscConfig+0x2cc>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009d8:	f7ff fbfa 	bl	80001d0 <HAL_GetTick>
 80009dc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009de:	4b51      	ldr	r3, [pc, #324]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 80009e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e2:	f013 0f02 	tst.w	r3, #2
 80009e6:	d121      	bne.n	8000a2c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009e8:	f7ff fbf2 	bl	80001d0 <HAL_GetTick>
 80009ec:	1b40      	subs	r0, r0, r5
 80009ee:	2802      	cmp	r0, #2
 80009f0:	d9f5      	bls.n	80009de <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80009f2:	2003      	movs	r0, #3
 80009f4:	e131      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f6:	4a4b      	ldr	r2, [pc, #300]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 80009f8:	6813      	ldr	r3, [r2, #0]
 80009fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009fe:	6961      	ldr	r1, [r4, #20]
 8000a00:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e7dd      	b.n	80009c4 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000a08:	4b47      	ldr	r3, [pc, #284]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a0e:	f7ff fbdf 	bl	80001d0 <HAL_GetTick>
 8000a12:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a14:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f013 0f02 	tst.w	r3, #2
 8000a1c:	d0d2      	beq.n	80009c4 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a1e:	f7ff fbd7 	bl	80001d0 <HAL_GetTick>
 8000a22:	1b40      	subs	r0, r0, r5
 8000a24:	2802      	cmp	r0, #2
 8000a26:	d9f5      	bls.n	8000a14 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8000a28:	2003      	movs	r0, #3
 8000a2a:	e116      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f7ff ff01 	bl	8000834 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a32:	6823      	ldr	r3, [r4, #0]
 8000a34:	f013 0f04 	tst.w	r3, #4
 8000a38:	f000 8098 	beq.w	8000b6c <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a3c:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000a44:	d133      	bne.n	8000aae <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 8000a48:	69da      	ldr	r2, [r3, #28]
 8000a4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a4e:	61da      	str	r2, [r3, #28]
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a5a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a5c:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <HAL_RCC_OscConfig+0x2d0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a64:	d025      	beq.n	8000ab2 <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a66:	68e3      	ldr	r3, [r4, #12]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d036      	beq.n	8000ada <HAL_RCC_OscConfig+0x27a>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d14c      	bne.n	8000b0a <HAL_RCC_OscConfig+0x2aa>
 8000a70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a74:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000a78:	6a1a      	ldr	r2, [r3, #32]
 8000a7a:	f022 0201 	bic.w	r2, r2, #1
 8000a7e:	621a      	str	r2, [r3, #32]
 8000a80:	6a1a      	ldr	r2, [r3, #32]
 8000a82:	f022 0204 	bic.w	r2, r2, #4
 8000a86:	621a      	str	r2, [r3, #32]
 8000a88:	e02c      	b.n	8000ae4 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 8000a8a:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <HAL_RCC_OscConfig+0x2cc>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a90:	f7ff fb9e 	bl	80001d0 <HAL_GetTick>
 8000a94:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a96:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 8000a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9a:	f013 0f02 	tst.w	r3, #2
 8000a9e:	d0c8      	beq.n	8000a32 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000aa0:	f7ff fb96 	bl	80001d0 <HAL_GetTick>
 8000aa4:	1b40      	subs	r0, r0, r5
 8000aa6:	2802      	cmp	r0, #2
 8000aa8:	d9f5      	bls.n	8000a96 <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 8000aaa:	2003      	movs	r0, #3
 8000aac:	e0d5      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 8000aae:	2500      	movs	r5, #0
 8000ab0:	e7d4      	b.n	8000a5c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <HAL_RCC_OscConfig+0x2d0>)
 8000ab4:	6813      	ldr	r3, [r2, #0]
 8000ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aba:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000abc:	f7ff fb88 	bl	80001d0 <HAL_GetTick>
 8000ac0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_RCC_OscConfig+0x2d0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000aca:	d1cc      	bne.n	8000a66 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000acc:	f7ff fb80 	bl	80001d0 <HAL_GetTick>
 8000ad0:	1b80      	subs	r0, r0, r6
 8000ad2:	2864      	cmp	r0, #100	; 0x64
 8000ad4:	d9f5      	bls.n	8000ac2 <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	e0bf      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 8000adc:	6a13      	ldr	r3, [r2, #32]
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ae4:	68e3      	ldr	r3, [r4, #12]
 8000ae6:	b37b      	cbz	r3, 8000b48 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8000ae8:	f7ff fb72 	bl	80001d0 <HAL_GetTick>
 8000aec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 8000af0:	6a1b      	ldr	r3, [r3, #32]
 8000af2:	f013 0f02 	tst.w	r3, #2
 8000af6:	d138      	bne.n	8000b6a <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000af8:	f7ff fb6a 	bl	80001d0 <HAL_GetTick>
 8000afc:	1b80      	subs	r0, r0, r6
 8000afe:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b02:	4298      	cmp	r0, r3
 8000b04:	d9f3      	bls.n	8000aee <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8000b06:	2003      	movs	r0, #3
 8000b08:	e0a7      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	d012      	beq.n	8000b34 <HAL_RCC_OscConfig+0x2d4>
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_RCC_OscConfig+0x2c4>)
 8000b10:	6a1a      	ldr	r2, [r3, #32]
 8000b12:	f022 0201 	bic.w	r2, r2, #1
 8000b16:	621a      	str	r2, [r3, #32]
 8000b18:	6a1a      	ldr	r2, [r3, #32]
 8000b1a:	f022 0204 	bic.w	r2, r2, #4
 8000b1e:	621a      	str	r2, [r3, #32]
 8000b20:	e7e0      	b.n	8000ae4 <HAL_RCC_OscConfig+0x284>
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000
 8000b28:	42420000 	.word	0x42420000
 8000b2c:	42420480 	.word	0x42420480
 8000b30:	40007000 	.word	0x40007000
 8000b34:	4b4c      	ldr	r3, [pc, #304]	; (8000c68 <HAL_RCC_OscConfig+0x408>)
 8000b36:	6a1a      	ldr	r2, [r3, #32]
 8000b38:	f042 0204 	orr.w	r2, r2, #4
 8000b3c:	621a      	str	r2, [r3, #32]
 8000b3e:	6a1a      	ldr	r2, [r3, #32]
 8000b40:	f042 0201 	orr.w	r2, r2, #1
 8000b44:	621a      	str	r2, [r3, #32]
 8000b46:	e7cd      	b.n	8000ae4 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8000b48:	f7ff fb42 	bl	80001d0 <HAL_GetTick>
 8000b4c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <HAL_RCC_OscConfig+0x408>)
 8000b50:	6a1b      	ldr	r3, [r3, #32]
 8000b52:	f013 0f02 	tst.w	r3, #2
 8000b56:	d008      	beq.n	8000b6a <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b58:	f7ff fb3a 	bl	80001d0 <HAL_GetTick>
 8000b5c:	1b80      	subs	r0, r0, r6
 8000b5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b62:	4298      	cmp	r0, r3
 8000b64:	d9f3      	bls.n	8000b4e <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8000b66:	2003      	movs	r0, #3
 8000b68:	e077      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 8000b6a:	b9e5      	cbnz	r5, 8000ba6 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b6c:	69e3      	ldr	r3, [r4, #28]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d072      	beq.n	8000c58 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b72:	4a3d      	ldr	r2, [pc, #244]	; (8000c68 <HAL_RCC_OscConfig+0x408>)
 8000b74:	6852      	ldr	r2, [r2, #4]
 8000b76:	f002 020c 	and.w	r2, r2, #12
 8000b7a:	2a08      	cmp	r2, #8
 8000b7c:	d056      	beq.n	8000c2c <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d017      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 8000b82:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <HAL_RCC_OscConfig+0x40c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b88:	f7ff fb22 	bl	80001d0 <HAL_GetTick>
 8000b8c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b8e:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <HAL_RCC_OscConfig+0x408>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b96:	d047      	beq.n	8000c28 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b98:	f7ff fb1a 	bl	80001d0 <HAL_GetTick>
 8000b9c:	1b00      	subs	r0, r0, r4
 8000b9e:	2802      	cmp	r0, #2
 8000ba0:	d9f5      	bls.n	8000b8e <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	e059      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ba6:	4a30      	ldr	r2, [pc, #192]	; (8000c68 <HAL_RCC_OscConfig+0x408>)
 8000ba8:	69d3      	ldr	r3, [r2, #28]
 8000baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bae:	61d3      	str	r3, [r2, #28]
 8000bb0:	e7dc      	b.n	8000b6c <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <HAL_RCC_OscConfig+0x40c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fb0a 	bl	80001d0 <HAL_GetTick>
 8000bbc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <HAL_RCC_OscConfig+0x408>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bc6:	d006      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bc8:	f7ff fb02 	bl	80001d0 <HAL_GetTick>
 8000bcc:	1b40      	subs	r0, r0, r5
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d9f5      	bls.n	8000bbe <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	e041      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bd6:	6a23      	ldr	r3, [r4, #32]
 8000bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bdc:	d01a      	beq.n	8000c14 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bde:	4922      	ldr	r1, [pc, #136]	; (8000c68 <HAL_RCC_OscConfig+0x408>)
 8000be0:	684b      	ldr	r3, [r1, #4]
 8000be2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000be6:	6a22      	ldr	r2, [r4, #32]
 8000be8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000bea:	4302      	orrs	r2, r0
 8000bec:	4313      	orrs	r3, r2
 8000bee:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <HAL_RCC_OscConfig+0x40c>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bf6:	f7ff faeb 	bl	80001d0 <HAL_GetTick>
 8000bfa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <HAL_RCC_OscConfig+0x408>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c04:	d10e      	bne.n	8000c24 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c06:	f7ff fae3 	bl	80001d0 <HAL_GetTick>
 8000c0a:	1b00      	subs	r0, r0, r4
 8000c0c:	2802      	cmp	r0, #2
 8000c0e:	d9f5      	bls.n	8000bfc <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8000c10:	2003      	movs	r0, #3
 8000c12:	e022      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_RCC_OscConfig+0x408>)
 8000c16:	6853      	ldr	r3, [r2, #4]
 8000c18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c1c:	68a1      	ldr	r1, [r4, #8]
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	6053      	str	r3, [r2, #4]
 8000c22:	e7dc      	b.n	8000bde <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8000c24:	2000      	movs	r0, #0
 8000c26:	e018      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	e016      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d016      	beq.n	8000c5e <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_RCC_OscConfig+0x408>)
 8000c32:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c34:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000c38:	6a22      	ldr	r2, [r4, #32]
 8000c3a:	4291      	cmp	r1, r2
 8000c3c:	d001      	beq.n	8000c42 <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 8000c3e:	2001      	movs	r0, #1
 8000c40:	e00b      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c42:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000c46:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d00a      	beq.n	8000c62 <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	e004      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8000c50:	2001      	movs	r0, #1
}
 8000c52:	4770      	bx	lr
        return HAL_ERROR;
 8000c54:	2001      	movs	r0, #1
 8000c56:	e000      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8000c58:	2000      	movs	r0, #0
}
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000c5e:	2001      	movs	r0, #1
 8000c60:	e7fb      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8000c62:	2000      	movs	r0, #0
 8000c64:	e7f9      	b.n	8000c5a <HAL_RCC_OscConfig+0x3fa>
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	42420060 	.word	0x42420060

08000c70 <HAL_RCC_GetSysClockFreq>:
{
 8000c70:	b410      	push	{r4}
 8000c72:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c74:	4c16      	ldr	r4, [pc, #88]	; (8000cd0 <HAL_RCC_GetSysClockFreq+0x60>)
 8000c76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c7a:	f10d 0c18 	add.w	ip, sp, #24
 8000c7e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c82:	8a23      	ldrh	r3, [r4, #16]
 8000c84:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_RCC_GetSysClockFreq+0x64>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c8c:	f003 020c 	and.w	r2, r3, #12
 8000c90:	2a08      	cmp	r2, #8
 8000c92:	d11a      	bne.n	8000cca <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c94:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000c98:	4462      	add	r2, ip
 8000c9a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c9e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ca2:	d105      	bne.n	8000cb0 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <HAL_RCC_GetSysClockFreq+0x68>)
 8000ca6:	fb00 f002 	mul.w	r0, r0, r2
}
 8000caa:	b007      	add	sp, #28
 8000cac:	bc10      	pop	{r4}
 8000cae:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_RCC_GetSysClockFreq+0x64>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000cb8:	4463      	add	r3, ip
 8000cba:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cbe:	4807      	ldr	r0, [pc, #28]	; (8000cdc <HAL_RCC_GetSysClockFreq+0x6c>)
 8000cc0:	fb00 f002 	mul.w	r0, r0, r2
 8000cc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cc8:	e7ef      	b.n	8000caa <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000ccc:	e7ed      	b.n	8000caa <HAL_RCC_GetSysClockFreq+0x3a>
 8000cce:	bf00      	nop
 8000cd0:	08002d60 	.word	0x08002d60
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	003d0900 	.word	0x003d0900
 8000cdc:	007a1200 	.word	0x007a1200

08000ce0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	f000 80a3 	beq.w	8000e2c <HAL_RCC_ClockConfig+0x14c>
{
 8000ce6:	b570      	push	{r4, r5, r6, lr}
 8000ce8:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000cea:	4b52      	ldr	r3, [pc, #328]	; (8000e34 <HAL_RCC_ClockConfig+0x154>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d20c      	bcs.n	8000d10 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cf6:	4a4f      	ldr	r2, [pc, #316]	; (8000e34 <HAL_RCC_ClockConfig+0x154>)
 8000cf8:	6813      	ldr	r3, [r2, #0]
 8000cfa:	f023 0307 	bic.w	r3, r3, #7
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d02:	6813      	ldr	r3, [r2, #0]
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d001      	beq.n	8000d10 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8000d0c:	2001      	movs	r0, #1
}
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	f013 0f02 	tst.w	r3, #2
 8000d16:	d017      	beq.n	8000d48 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d18:	f013 0f04 	tst.w	r3, #4
 8000d1c:	d004      	beq.n	8000d28 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d1e:	4a46      	ldr	r2, [pc, #280]	; (8000e38 <HAL_RCC_ClockConfig+0x158>)
 8000d20:	6853      	ldr	r3, [r2, #4]
 8000d22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d26:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	f013 0f08 	tst.w	r3, #8
 8000d2e:	d004      	beq.n	8000d3a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d30:	4a41      	ldr	r2, [pc, #260]	; (8000e38 <HAL_RCC_ClockConfig+0x158>)
 8000d32:	6853      	ldr	r3, [r2, #4]
 8000d34:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d38:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d3a:	4a3f      	ldr	r2, [pc, #252]	; (8000e38 <HAL_RCC_ClockConfig+0x158>)
 8000d3c:	6853      	ldr	r3, [r2, #4]
 8000d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d42:	68a0      	ldr	r0, [r4, #8]
 8000d44:	4303      	orrs	r3, r0
 8000d46:	6053      	str	r3, [r2, #4]
 8000d48:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	f013 0f01 	tst.w	r3, #1
 8000d50:	d031      	beq.n	8000db6 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d52:	6863      	ldr	r3, [r4, #4]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d020      	beq.n	8000d9a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d025      	beq.n	8000da8 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5c:	4a36      	ldr	r2, [pc, #216]	; (8000e38 <HAL_RCC_ClockConfig+0x158>)
 8000d5e:	6812      	ldr	r2, [r2, #0]
 8000d60:	f012 0f02 	tst.w	r2, #2
 8000d64:	d064      	beq.n	8000e30 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d66:	4934      	ldr	r1, [pc, #208]	; (8000e38 <HAL_RCC_ClockConfig+0x158>)
 8000d68:	684a      	ldr	r2, [r1, #4]
 8000d6a:	f022 0203 	bic.w	r2, r2, #3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000d72:	f7ff fa2d 	bl	80001d0 <HAL_GetTick>
 8000d76:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d78:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <HAL_RCC_ClockConfig+0x158>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 030c 	and.w	r3, r3, #12
 8000d80:	6862      	ldr	r2, [r4, #4]
 8000d82:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d86:	d016      	beq.n	8000db6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d88:	f7ff fa22 	bl	80001d0 <HAL_GetTick>
 8000d8c:	1b80      	subs	r0, r0, r6
 8000d8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d92:	4298      	cmp	r0, r3
 8000d94:	d9f0      	bls.n	8000d78 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8000d96:	2003      	movs	r0, #3
 8000d98:	e7b9      	b.n	8000d0e <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9a:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <HAL_RCC_ClockConfig+0x158>)
 8000d9c:	6812      	ldr	r2, [r2, #0]
 8000d9e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000da2:	d1e0      	bne.n	8000d66 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8000da4:	2001      	movs	r0, #1
 8000da6:	e7b2      	b.n	8000d0e <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da8:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <HAL_RCC_ClockConfig+0x158>)
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000db0:	d1d9      	bne.n	8000d66 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8000db2:	2001      	movs	r0, #1
 8000db4:	e7ab      	b.n	8000d0e <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <HAL_RCC_ClockConfig+0x154>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d90c      	bls.n	8000ddc <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc2:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <HAL_RCC_ClockConfig+0x154>)
 8000dc4:	6813      	ldr	r3, [r2, #0]
 8000dc6:	f023 0307 	bic.w	r3, r3, #7
 8000dca:	432b      	orrs	r3, r5
 8000dcc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dce:	6813      	ldr	r3, [r2, #0]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	42ab      	cmp	r3, r5
 8000dd6:	d001      	beq.n	8000ddc <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8000dd8:	2001      	movs	r0, #1
 8000dda:	e798      	b.n	8000d0e <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	f013 0f04 	tst.w	r3, #4
 8000de2:	d006      	beq.n	8000df2 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_RCC_ClockConfig+0x158>)
 8000de6:	6853      	ldr	r3, [r2, #4]
 8000de8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dec:	68e1      	ldr	r1, [r4, #12]
 8000dee:	430b      	orrs	r3, r1
 8000df0:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	f013 0f08 	tst.w	r3, #8
 8000df8:	d007      	beq.n	8000e0a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <HAL_RCC_ClockConfig+0x158>)
 8000dfc:	6853      	ldr	r3, [r2, #4]
 8000dfe:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e02:	6921      	ldr	r1, [r4, #16]
 8000e04:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e08:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e0a:	f7ff ff31 	bl	8000c70 <HAL_RCC_GetSysClockFreq>
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_RCC_ClockConfig+0x158>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e16:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <HAL_RCC_ClockConfig+0x15c>)
 8000e18:	5cd3      	ldrb	r3, [r2, r3]
 8000e1a:	40d8      	lsrs	r0, r3
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_RCC_ClockConfig+0x160>)
 8000e1e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_RCC_ClockConfig+0x164>)
 8000e22:	6818      	ldr	r0, [r3, #0]
 8000e24:	f7ff f992 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000e28:	2000      	movs	r0, #0
 8000e2a:	e770      	b.n	8000d0e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8000e2c:	2001      	movs	r0, #1
}
 8000e2e:	4770      	bx	lr
        return HAL_ERROR;
 8000e30:	2001      	movs	r0, #1
 8000e32:	e76c      	b.n	8000d0e <HAL_RCC_ClockConfig+0x2e>
 8000e34:	40022000 	.word	0x40022000
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	08002e00 	.word	0x08002e00
 8000e40:	20000064 	.word	0x20000064
 8000e44:	20000004 	.word	0x20000004

08000e48 <HAL_RCC_GetHCLKFreq>:
}
 8000e48:	4b01      	ldr	r3, [pc, #4]	; (8000e50 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e4a:	6818      	ldr	r0, [r3, #0]
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000064 	.word	0x20000064

08000e54 <HAL_RCC_GetPCLK1Freq>:
{
 8000e54:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e56:	f7ff fff7 	bl	8000e48 <HAL_RCC_GetHCLKFreq>
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000e62:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
}
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	bd08      	pop	{r3, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	08002e10 	.word	0x08002e10

08000e74 <HAL_RCC_GetPCLK2Freq>:
{
 8000e74:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e76:	f7ff ffe7 	bl	8000e48 <HAL_RCC_GetHCLKFreq>
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000e82:	4a03      	ldr	r2, [pc, #12]	; (8000e90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e84:	5cd3      	ldrb	r3, [r2, r3]
}
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	bd08      	pop	{r3, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	08002e10 	.word	0x08002e10

08000e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000e94:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000e96:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e98:	6a04      	ldr	r4, [r0, #32]
 8000e9a:	f024 0401 	bic.w	r4, r4, #1
 8000e9e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ea0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ea2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ea6:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000eaa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8000eae:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000eb0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000eb2:	6203      	str	r3, [r0, #32]
}
 8000eb4:	bc10      	pop	{r4}
 8000eb6:	4770      	bx	lr

08000eb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000eb8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000eba:	6a03      	ldr	r3, [r0, #32]
 8000ebc:	f023 0310 	bic.w	r3, r3, #16
 8000ec0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ec2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8000ec4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ec6:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000eca:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000ed2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000ed6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000ed8:	6203      	str	r3, [r0, #32]
}
 8000eda:	bc10      	pop	{r4}
 8000edc:	4770      	bx	lr

08000ede <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8000ede:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8000ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000ee4:	4319      	orrs	r1, r3
 8000ee6:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000eea:	6081      	str	r1, [r0, #8]
}
 8000eec:	4770      	bx	lr

08000eee <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000ef4:	6802      	ldr	r2, [r0, #0]
 8000ef6:	6893      	ldr	r3, [r2, #8]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000efc:	2b06      	cmp	r3, #6
 8000efe:	d003      	beq.n	8000f08 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8000f00:	6813      	ldr	r3, [r2, #0]
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8000f0e:	2000      	movs	r0, #0
 8000f10:	4770      	bx	lr
	...

08000f14 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8000f14:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f16:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <TIM_Base_SetConfig+0x70>)
 8000f18:	4290      	cmp	r0, r2
 8000f1a:	d00a      	beq.n	8000f32 <TIM_Base_SetConfig+0x1e>
 8000f1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f20:	d007      	beq.n	8000f32 <TIM_Base_SetConfig+0x1e>
 8000f22:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f26:	4290      	cmp	r0, r2
 8000f28:	d003      	beq.n	8000f32 <TIM_Base_SetConfig+0x1e>
 8000f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f2e:	4290      	cmp	r0, r2
 8000f30:	d103      	bne.n	8000f3a <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f36:	684a      	ldr	r2, [r1, #4]
 8000f38:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <TIM_Base_SetConfig+0x70>)
 8000f3c:	4290      	cmp	r0, r2
 8000f3e:	d00a      	beq.n	8000f56 <TIM_Base_SetConfig+0x42>
 8000f40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f44:	d007      	beq.n	8000f56 <TIM_Base_SetConfig+0x42>
 8000f46:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f4a:	4290      	cmp	r0, r2
 8000f4c:	d003      	beq.n	8000f56 <TIM_Base_SetConfig+0x42>
 8000f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f52:	4290      	cmp	r0, r2
 8000f54:	d103      	bne.n	8000f5e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f5a:	68ca      	ldr	r2, [r1, #12]
 8000f5c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f62:	694a      	ldr	r2, [r1, #20]
 8000f64:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000f66:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f68:	688b      	ldr	r3, [r1, #8]
 8000f6a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8000f6c:	680b      	ldr	r3, [r1, #0]
 8000f6e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <TIM_Base_SetConfig+0x70>)
 8000f72:	4298      	cmp	r0, r3
 8000f74:	d002      	beq.n	8000f7c <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8000f76:	2301      	movs	r3, #1
 8000f78:	6143      	str	r3, [r0, #20]
}
 8000f7a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000f7c:	690b      	ldr	r3, [r1, #16]
 8000f7e:	6303      	str	r3, [r0, #48]	; 0x30
 8000f80:	e7f9      	b.n	8000f76 <TIM_Base_SetConfig+0x62>
 8000f82:	bf00      	nop
 8000f84:	40012c00 	.word	0x40012c00

08000f88 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8000f88:	b1a8      	cbz	r0, 8000fb6 <HAL_TIM_Base_Init+0x2e>
{
 8000f8a:	b510      	push	{r4, lr}
 8000f8c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8000f8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f92:	b15b      	cbz	r3, 8000fac <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f94:	2302      	movs	r3, #2
 8000f96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f9a:	1d21      	adds	r1, r4, #4
 8000f9c:	6820      	ldr	r0, [r4, #0]
 8000f9e:	f7ff ffb9 	bl	8000f14 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000fa8:	2000      	movs	r0, #0
}
 8000faa:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8000fac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000fb0:	f000 fd7a 	bl	8001aa8 <HAL_TIM_Base_MspInit>
 8000fb4:	e7ee      	b.n	8000f94 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8000fb6:	2001      	movs	r0, #1
}
 8000fb8:	4770      	bx	lr

08000fba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000fba:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8000fbc:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fbe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000fc2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000fc6:	430b      	orrs	r3, r1
 8000fc8:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000fca:	6083      	str	r3, [r0, #8]
}
 8000fcc:	bc10      	pop	{r4}
 8000fce:	4770      	bx	lr

08000fd0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000fd0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d066      	beq.n	80010a6 <HAL_TIM_ConfigClockSource+0xd6>
{
 8000fd8:	b510      	push	{r4, lr}
 8000fda:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000fe8:	6802      	ldr	r2, [r0, #0]
 8000fea:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ff0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000ff4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8000ff6:	680b      	ldr	r3, [r1, #0]
 8000ff8:	2b40      	cmp	r3, #64	; 0x40
 8000ffa:	d04a      	beq.n	8001092 <HAL_TIM_ConfigClockSource+0xc2>
 8000ffc:	d913      	bls.n	8001026 <HAL_TIM_ConfigClockSource+0x56>
 8000ffe:	2b60      	cmp	r3, #96	; 0x60
 8001000:	d03d      	beq.n	800107e <HAL_TIM_ConfigClockSource+0xae>
 8001002:	d91e      	bls.n	8001042 <HAL_TIM_ConfigClockSource+0x72>
 8001004:	2b70      	cmp	r3, #112	; 0x70
 8001006:	d028      	beq.n	800105a <HAL_TIM_ConfigClockSource+0x8a>
 8001008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800100c:	d130      	bne.n	8001070 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800100e:	68cb      	ldr	r3, [r1, #12]
 8001010:	684a      	ldr	r2, [r1, #4]
 8001012:	6889      	ldr	r1, [r1, #8]
 8001014:	6800      	ldr	r0, [r0, #0]
 8001016:	f7ff ffd0 	bl	8000fba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800101a:	6822      	ldr	r2, [r4, #0]
 800101c:	6893      	ldr	r3, [r2, #8]
 800101e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001022:	6093      	str	r3, [r2, #8]
      break;
 8001024:	e024      	b.n	8001070 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8001026:	2b10      	cmp	r3, #16
 8001028:	d006      	beq.n	8001038 <HAL_TIM_ConfigClockSource+0x68>
 800102a:	d904      	bls.n	8001036 <HAL_TIM_ConfigClockSource+0x66>
 800102c:	2b20      	cmp	r3, #32
 800102e:	d003      	beq.n	8001038 <HAL_TIM_ConfigClockSource+0x68>
 8001030:	2b30      	cmp	r3, #48	; 0x30
 8001032:	d001      	beq.n	8001038 <HAL_TIM_ConfigClockSource+0x68>
 8001034:	e01c      	b.n	8001070 <HAL_TIM_ConfigClockSource+0xa0>
 8001036:	b9db      	cbnz	r3, 8001070 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001038:	4619      	mov	r1, r3
 800103a:	6820      	ldr	r0, [r4, #0]
 800103c:	f7ff ff4f 	bl	8000ede <TIM_ITRx_SetConfig>
      break;
 8001040:	e016      	b.n	8001070 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8001042:	2b50      	cmp	r3, #80	; 0x50
 8001044:	d114      	bne.n	8001070 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001046:	68ca      	ldr	r2, [r1, #12]
 8001048:	6849      	ldr	r1, [r1, #4]
 800104a:	6800      	ldr	r0, [r0, #0]
 800104c:	f7ff ff22 	bl	8000e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001050:	2150      	movs	r1, #80	; 0x50
 8001052:	6820      	ldr	r0, [r4, #0]
 8001054:	f7ff ff43 	bl	8000ede <TIM_ITRx_SetConfig>
      break;
 8001058:	e00a      	b.n	8001070 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800105a:	68cb      	ldr	r3, [r1, #12]
 800105c:	684a      	ldr	r2, [r1, #4]
 800105e:	6889      	ldr	r1, [r1, #8]
 8001060:	6800      	ldr	r0, [r0, #0]
 8001062:	f7ff ffaa 	bl	8000fba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001066:	6822      	ldr	r2, [r4, #0]
 8001068:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800106a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800106e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001070:	2301      	movs	r3, #1
 8001072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001076:	2000      	movs	r0, #0
 8001078:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800107c:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800107e:	68ca      	ldr	r2, [r1, #12]
 8001080:	6849      	ldr	r1, [r1, #4]
 8001082:	6800      	ldr	r0, [r0, #0]
 8001084:	f7ff ff18 	bl	8000eb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001088:	2160      	movs	r1, #96	; 0x60
 800108a:	6820      	ldr	r0, [r4, #0]
 800108c:	f7ff ff27 	bl	8000ede <TIM_ITRx_SetConfig>
      break;
 8001090:	e7ee      	b.n	8001070 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001092:	68ca      	ldr	r2, [r1, #12]
 8001094:	6849      	ldr	r1, [r1, #4]
 8001096:	6800      	ldr	r0, [r0, #0]
 8001098:	f7ff fefc 	bl	8000e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800109c:	2140      	movs	r1, #64	; 0x40
 800109e:	6820      	ldr	r0, [r4, #0]
 80010a0:	f7ff ff1d 	bl	8000ede <TIM_ITRx_SetConfig>
      break;
 80010a4:	e7e4      	b.n	8001070 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 80010a6:	2002      	movs	r0, #2
}
 80010a8:	4770      	bx	lr

080010aa <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80010aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d01c      	beq.n	80010ec <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 80010b2:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80010b4:	2601      	movs	r6, #1
 80010b6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80010c0:	6802      	ldr	r2, [r0, #0]
 80010c2:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80010c4:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80010c6:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80010ca:	680c      	ldr	r4, [r1, #0]
 80010cc:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80010ce:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80010d2:	684b      	ldr	r3, [r1, #4]
 80010d4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80010d6:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80010d8:	6802      	ldr	r2, [r0, #0]
 80010da:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80010dc:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80010e0:	2300      	movs	r3, #0
 80010e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80010e6:	4618      	mov	r0, r3
}
 80010e8:	bc70      	pop	{r4, r5, r6}
 80010ea:	4770      	bx	lr
  __HAL_LOCK(htim);
 80010ec:	2002      	movs	r0, #2
}
 80010ee:	4770      	bx	lr

080010f0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80010f0:	6802      	ldr	r2, [r0, #0]
 80010f2:	68d3      	ldr	r3, [r2, #12]
 80010f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80010f8:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010fa:	6802      	ldr	r2, [r0, #0]
 80010fc:	6953      	ldr	r3, [r2, #20]
 80010fe:	f023 0301 	bic.w	r3, r3, #1
 8001102:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001104:	2320      	movs	r3, #32
 8001106:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800110a:	4770      	bx	lr

0800110c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800110c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b21      	cmp	r3, #33	; 0x21
 8001114:	d12a      	bne.n	800116c <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001116:	6883      	ldr	r3, [r0, #8]
 8001118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800111c:	d016      	beq.n	800114c <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800111e:	6a03      	ldr	r3, [r0, #32]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	6202      	str	r2, [r0, #32]
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	6803      	ldr	r3, [r0, #0]
 8001128:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800112a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800112c:	3b01      	subs	r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001132:	b9eb      	cbnz	r3, 8001170 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001134:	6802      	ldr	r2, [r0, #0]
 8001136:	68d3      	ldr	r3, [r2, #12]
 8001138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800113c:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800113e:	6802      	ldr	r2, [r0, #0]
 8001140:	68d3      	ldr	r3, [r2, #12]
 8001142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001146:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8001148:	2000      	movs	r0, #0
 800114a:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800114c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	6802      	ldr	r2, [r0, #0]
 8001152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001156:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001158:	6903      	ldr	r3, [r0, #16]
 800115a:	b91b      	cbnz	r3, 8001164 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 800115c:	6a03      	ldr	r3, [r0, #32]
 800115e:	3302      	adds	r3, #2
 8001160:	6203      	str	r3, [r0, #32]
 8001162:	e7e2      	b.n	800112a <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8001164:	6a03      	ldr	r3, [r0, #32]
 8001166:	3301      	adds	r3, #1
 8001168:	6203      	str	r3, [r0, #32]
 800116a:	e7de      	b.n	800112a <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 800116c:	2002      	movs	r0, #2
 800116e:	4770      	bx	lr
    return HAL_OK;
 8001170:	2000      	movs	r0, #0
  }
}
 8001172:	4770      	bx	lr

08001174 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001174:	b538      	push	{r3, r4, r5, lr}
 8001176:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001178:	6802      	ldr	r2, [r0, #0]
 800117a:	6913      	ldr	r3, [r2, #16]
 800117c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001180:	68c1      	ldr	r1, [r0, #12]
 8001182:	430b      	orrs	r3, r1
 8001184:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001186:	6883      	ldr	r3, [r0, #8]
 8001188:	6902      	ldr	r2, [r0, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	6942      	ldr	r2, [r0, #20]
 800118e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001190:	6801      	ldr	r1, [r0, #0]
 8001192:	68cb      	ldr	r3, [r1, #12]
 8001194:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001198:	f023 030c 	bic.w	r3, r3, #12
 800119c:	4313      	orrs	r3, r2
 800119e:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80011a0:	6802      	ldr	r2, [r0, #0]
 80011a2:	6953      	ldr	r3, [r2, #20]
 80011a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011a8:	6981      	ldr	r1, [r0, #24]
 80011aa:	430b      	orrs	r3, r1
 80011ac:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80011ae:	6802      	ldr	r2, [r0, #0]
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <UART_SetConfig+0xc4>)
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d01f      	beq.n	80011f6 <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80011b6:	f7ff fe4d 	bl	8000e54 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80011ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011c2:	6863      	ldr	r3, [r4, #4]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80011ca:	4d1c      	ldr	r5, [pc, #112]	; (800123c <UART_SetConfig+0xc8>)
 80011cc:	fba5 3200 	umull	r3, r2, r5, r0
 80011d0:	0951      	lsrs	r1, r2, #5
 80011d2:	2264      	movs	r2, #100	; 0x64
 80011d4:	fb02 0211 	mls	r2, r2, r1, r0
 80011d8:	0113      	lsls	r3, r2, #4
 80011da:	3332      	adds	r3, #50	; 0x32
 80011dc:	fba5 2303 	umull	r2, r3, r5, r3
 80011e0:	095b      	lsrs	r3, r3, #5
 80011e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80011e6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	6821      	ldr	r1, [r4, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80011f6:	f7ff fe3d 	bl	8000e74 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80011fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001202:	6863      	ldr	r3, [r4, #4]
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	fbb0 f0f3 	udiv	r0, r0, r3
 800120a:	4d0c      	ldr	r5, [pc, #48]	; (800123c <UART_SetConfig+0xc8>)
 800120c:	fba5 3200 	umull	r3, r2, r5, r0
 8001210:	0951      	lsrs	r1, r2, #5
 8001212:	2264      	movs	r2, #100	; 0x64
 8001214:	fb02 0211 	mls	r2, r2, r1, r0
 8001218:	0113      	lsls	r3, r2, #4
 800121a:	3332      	adds	r3, #50	; 0x32
 800121c:	fba5 2303 	umull	r2, r3, r5, r3
 8001220:	095b      	lsrs	r3, r3, #5
 8001222:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001226:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	6821      	ldr	r1, [r4, #0]
 8001230:	4413      	add	r3, r2
 8001232:	608b      	str	r3, [r1, #8]
 8001234:	e7de      	b.n	80011f4 <UART_SetConfig+0x80>
 8001236:	bf00      	nop
 8001238:	40013800 	.word	0x40013800
 800123c:	51eb851f 	.word	0x51eb851f

08001240 <HAL_UART_Init>:
  if (huart == NULL)
 8001240:	b358      	cbz	r0, 800129a <HAL_UART_Init+0x5a>
{
 8001242:	b510      	push	{r4, lr}
 8001244:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001246:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800124a:	b30b      	cbz	r3, 8001290 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800124c:	2324      	movs	r3, #36	; 0x24
 800124e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001252:	6822      	ldr	r2, [r4, #0]
 8001254:	68d3      	ldr	r3, [r2, #12]
 8001256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800125a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800125c:	4620      	mov	r0, r4
 800125e:	f7ff ff89 	bl	8001174 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001262:	6822      	ldr	r2, [r4, #0]
 8001264:	6913      	ldr	r3, [r2, #16]
 8001266:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800126a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800126c:	6822      	ldr	r2, [r4, #0]
 800126e:	6953      	ldr	r3, [r2, #20]
 8001270:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001274:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001276:	6822      	ldr	r2, [r4, #0]
 8001278:	68d3      	ldr	r3, [r2, #12]
 800127a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800127e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001280:	2000      	movs	r0, #0
 8001282:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001284:	2320      	movs	r3, #32
 8001286:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800128a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800128e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001290:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001294:	f000 fc1e 	bl	8001ad4 <HAL_UART_MspInit>
 8001298:	e7d8      	b.n	800124c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800129a:	2001      	movs	r0, #1
}
 800129c:	4770      	bx	lr

0800129e <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800129e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b20      	cmp	r3, #32
 80012a6:	d116      	bne.n	80012d6 <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 80012a8:	b1b9      	cbz	r1, 80012da <HAL_UART_Transmit_IT+0x3c>
 80012aa:	b1c2      	cbz	r2, 80012de <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 80012ac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d016      	beq.n	80012e2 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 80012b4:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80012b6:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 80012b8:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012be:	2221      	movs	r2, #33	; 0x21
 80012c0:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80012c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80012c8:	6801      	ldr	r1, [r0, #0]
 80012ca:	68ca      	ldr	r2, [r1, #12]
 80012cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012d0:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80012d2:	4618      	mov	r0, r3
 80012d4:	4770      	bx	lr
    return HAL_BUSY;
 80012d6:	2002      	movs	r0, #2
 80012d8:	4770      	bx	lr
      return HAL_ERROR;
 80012da:	2001      	movs	r0, #1
 80012dc:	4770      	bx	lr
 80012de:	2001      	movs	r0, #1
 80012e0:	4770      	bx	lr
    __HAL_LOCK(huart);
 80012e2:	2002      	movs	r0, #2
}
 80012e4:	4770      	bx	lr

080012e6 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80012e6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b20      	cmp	r3, #32
 80012ee:	d120      	bne.n	8001332 <HAL_UART_Receive_IT+0x4c>
    if ((pData == NULL) || (Size == 0U))
 80012f0:	b309      	cbz	r1, 8001336 <HAL_UART_Receive_IT+0x50>
 80012f2:	b312      	cbz	r2, 800133a <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 80012f4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d020      	beq.n	800133e <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 80012fc:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80012fe:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001300:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001302:	2300      	movs	r3, #0
 8001304:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001306:	2222      	movs	r2, #34	; 0x22
 8001308:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800130c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001310:	6801      	ldr	r1, [r0, #0]
 8001312:	68ca      	ldr	r2, [r1, #12]
 8001314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001318:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800131a:	6801      	ldr	r1, [r0, #0]
 800131c:	694a      	ldr	r2, [r1, #20]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001324:	6801      	ldr	r1, [r0, #0]
 8001326:	68ca      	ldr	r2, [r1, #12]
 8001328:	f042 0220 	orr.w	r2, r2, #32
 800132c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800132e:	4618      	mov	r0, r3
 8001330:	4770      	bx	lr
    return HAL_BUSY;
 8001332:	2002      	movs	r0, #2
 8001334:	4770      	bx	lr
      return HAL_ERROR;
 8001336:	2001      	movs	r0, #1
 8001338:	4770      	bx	lr
 800133a:	2001      	movs	r0, #1
 800133c:	4770      	bx	lr
    __HAL_LOCK(huart);
 800133e:	2002      	movs	r0, #2
}
 8001340:	4770      	bx	lr

08001342 <UART_EndTransmit_IT>:
{
 8001342:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001344:	6801      	ldr	r1, [r0, #0]
 8001346:	68cb      	ldr	r3, [r1, #12]
 8001348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800134c:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800134e:	2320      	movs	r3, #32
 8001350:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001354:	f000 fd2e 	bl	8001db4 <HAL_UART_TxCpltCallback>
}
 8001358:	2000      	movs	r0, #0
 800135a:	bd08      	pop	{r3, pc}

0800135c <UART_Receive_IT>:
{
 800135c:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800135e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b22      	cmp	r3, #34	; 0x22
 8001366:	d145      	bne.n	80013f4 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001368:	6883      	ldr	r3, [r0, #8]
 800136a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800136e:	d00e      	beq.n	800138e <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001370:	6903      	ldr	r3, [r0, #16]
 8001372:	bb03      	cbnz	r3, 80013b6 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001374:	6803      	ldr	r3, [r0, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800137a:	1c59      	adds	r1, r3, #1
 800137c:	6281      	str	r1, [r0, #40]	; 0x28
 800137e:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8001380:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001382:	3b01      	subs	r3, #1
 8001384:	b29b      	uxth	r3, r3
 8001386:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001388:	b1f3      	cbz	r3, 80013c8 <UART_Receive_IT+0x6c>
    return HAL_OK;
 800138a:	2000      	movs	r0, #0
 800138c:	e033      	b.n	80013f6 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800138e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001390:	6903      	ldr	r3, [r0, #16]
 8001392:	b943      	cbnz	r3, 80013a6 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001394:	6803      	ldr	r3, [r0, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800139c:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800139e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013a0:	3302      	adds	r3, #2
 80013a2:	6283      	str	r3, [r0, #40]	; 0x28
 80013a4:	e7ec      	b.n	8001380 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80013a6:	6803      	ldr	r3, [r0, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80013ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013b0:	3301      	adds	r3, #1
 80013b2:	6283      	str	r3, [r0, #40]	; 0x28
 80013b4:	e7e4      	b.n	8001380 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80013b6:	6803      	ldr	r3, [r0, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80013bc:	1c51      	adds	r1, r2, #1
 80013be:	6281      	str	r1, [r0, #40]	; 0x28
 80013c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013c4:	7013      	strb	r3, [r2, #0]
 80013c6:	e7db      	b.n	8001380 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80013c8:	6802      	ldr	r2, [r0, #0]
 80013ca:	68d3      	ldr	r3, [r2, #12]
 80013cc:	f023 0320 	bic.w	r3, r3, #32
 80013d0:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80013d2:	6802      	ldr	r2, [r0, #0]
 80013d4:	68d3      	ldr	r3, [r2, #12]
 80013d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013da:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80013dc:	6802      	ldr	r2, [r0, #0]
 80013de:	6953      	ldr	r3, [r2, #20]
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80013e6:	2320      	movs	r3, #32
 80013e8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80013ec:	f000 fcc8 	bl	8001d80 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80013f0:	2000      	movs	r0, #0
 80013f2:	e000      	b.n	80013f6 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 80013f4:	2002      	movs	r0, #2
}
 80013f6:	bd08      	pop	{r3, pc}

080013f8 <HAL_UART_ErrorCallback>:
}
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_UART_IRQHandler>:
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001400:	6802      	ldr	r2, [r0, #0]
 8001402:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001404:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001406:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8001408:	f013 000f 	ands.w	r0, r3, #15
 800140c:	d105      	bne.n	800141a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800140e:	f013 0f20 	tst.w	r3, #32
 8001412:	d002      	beq.n	800141a <HAL_UART_IRQHandler+0x1e>
 8001414:	f011 0f20 	tst.w	r1, #32
 8001418:	d153      	bne.n	80014c2 <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800141a:	2800      	cmp	r0, #0
 800141c:	d067      	beq.n	80014ee <HAL_UART_IRQHandler+0xf2>
 800141e:	f012 0201 	ands.w	r2, r2, #1
 8001422:	d102      	bne.n	800142a <HAL_UART_IRQHandler+0x2e>
 8001424:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001428:	d061      	beq.n	80014ee <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800142a:	f013 0f01 	tst.w	r3, #1
 800142e:	d006      	beq.n	800143e <HAL_UART_IRQHandler+0x42>
 8001430:	f411 7f80 	tst.w	r1, #256	; 0x100
 8001434:	d003      	beq.n	800143e <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001436:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001438:	f040 0001 	orr.w	r0, r0, #1
 800143c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800143e:	f013 0f04 	tst.w	r3, #4
 8001442:	d004      	beq.n	800144e <HAL_UART_IRQHandler+0x52>
 8001444:	b11a      	cbz	r2, 800144e <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001446:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001448:	f040 0002 	orr.w	r0, r0, #2
 800144c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800144e:	f013 0f02 	tst.w	r3, #2
 8001452:	d004      	beq.n	800145e <HAL_UART_IRQHandler+0x62>
 8001454:	b11a      	cbz	r2, 800145e <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001456:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001458:	f040 0004 	orr.w	r0, r0, #4
 800145c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800145e:	f013 0f08 	tst.w	r3, #8
 8001462:	d004      	beq.n	800146e <HAL_UART_IRQHandler+0x72>
 8001464:	b11a      	cbz	r2, 800146e <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001466:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001468:	f042 0208 	orr.w	r2, r2, #8
 800146c:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800146e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001470:	2a00      	cmp	r2, #0
 8001472:	d048      	beq.n	8001506 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001474:	f013 0f20 	tst.w	r3, #32
 8001478:	d002      	beq.n	8001480 <HAL_UART_IRQHandler+0x84>
 800147a:	f011 0f20 	tst.w	r1, #32
 800147e:	d124      	bne.n	80014ca <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001488:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800148a:	f012 0f08 	tst.w	r2, #8
 800148e:	d100      	bne.n	8001492 <HAL_UART_IRQHandler+0x96>
 8001490:	b33b      	cbz	r3, 80014e2 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8001492:	4620      	mov	r0, r4
 8001494:	f7ff fe2c 	bl	80010f0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	695a      	ldr	r2, [r3, #20]
 800149c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80014a0:	d01b      	beq.n	80014da <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014a8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80014aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014ac:	b18b      	cbz	r3, 80014d2 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80014ae:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <HAL_UART_IRQHandler+0x11c>)
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80014b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80014b4:	f7fe ffb6 	bl	8000424 <HAL_DMA_Abort_IT>
 80014b8:	b328      	cbz	r0, 8001506 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80014ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80014bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80014be:	4798      	blx	r3
 80014c0:	e021      	b.n	8001506 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff ff4a 	bl	800135c <UART_Receive_IT>
      return;
 80014c8:	e01d      	b.n	8001506 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 80014ca:	4620      	mov	r0, r4
 80014cc:	f7ff ff46 	bl	800135c <UART_Receive_IT>
 80014d0:	e7d6      	b.n	8001480 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 80014d2:	4620      	mov	r0, r4
 80014d4:	f7ff ff90 	bl	80013f8 <HAL_UART_ErrorCallback>
 80014d8:	e015      	b.n	8001506 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 80014da:	4620      	mov	r0, r4
 80014dc:	f7ff ff8c 	bl	80013f8 <HAL_UART_ErrorCallback>
 80014e0:	e011      	b.n	8001506 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff ff88 	bl	80013f8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63e3      	str	r3, [r4, #60]	; 0x3c
 80014ec:	e00b      	b.n	8001506 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80014ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80014f2:	d002      	beq.n	80014fa <HAL_UART_IRQHandler+0xfe>
 80014f4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80014f8:	d106      	bne.n	8001508 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80014fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80014fe:	d002      	beq.n	8001506 <HAL_UART_IRQHandler+0x10a>
 8001500:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001504:	d104      	bne.n	8001510 <HAL_UART_IRQHandler+0x114>
}
 8001506:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff fdff 	bl	800110c <UART_Transmit_IT>
    return;
 800150e:	e7fa      	b.n	8001506 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8001510:	4620      	mov	r0, r4
 8001512:	f7ff ff16 	bl	8001342 <UART_EndTransmit_IT>
    return;
 8001516:	e7f6      	b.n	8001506 <HAL_UART_IRQHandler+0x10a>
 8001518:	0800151d 	.word	0x0800151d

0800151c <UART_DMAAbortOnError>:
{
 800151c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800151e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001520:	2300      	movs	r3, #0
 8001522:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001524:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001526:	f7ff ff67 	bl	80013f8 <HAL_UART_ErrorCallback>
}
 800152a:	bd08      	pop	{r3, pc}

0800152c <calc_checksum>:

uint8_t calc_checksum(uint8_t* input_array, uint8_t size){

	uint16_t carry = 0;

	for (int i = 0; i < 3; i++){
 800152c:	2100      	movs	r1, #0
	uint16_t carry = 0;
 800152e:	460b      	mov	r3, r1
	for (int i = 0; i < 3; i++){
 8001530:	2902      	cmp	r1, #2
 8001532:	dc17      	bgt.n	8001564 <calc_checksum+0x38>
uint8_t calc_checksum(uint8_t* input_array, uint8_t size){
 8001534:	b410      	push	{r4}
 8001536:	e005      	b.n	8001544 <calc_checksum+0x18>

			carry = carry + *(input_array+i) + 1;

		}else{

			carry = carry + *(input_array+i);
 8001538:	4413      	add	r3, r2
 800153a:	b29b      	uxth	r3, r3
 800153c:	e009      	b.n	8001552 <calc_checksum+0x26>
	for (int i = 0; i < 3; i++){
 800153e:	3101      	adds	r1, #1
 8001540:	2902      	cmp	r1, #2
 8001542:	dc0b      	bgt.n	800155c <calc_checksum+0x30>
		if ((*(input_array+i) + carry) < carry){
 8001544:	5c42      	ldrb	r2, [r0, r1]
 8001546:	18d4      	adds	r4, r2, r3
 8001548:	42a3      	cmp	r3, r4
 800154a:	ddf5      	ble.n	8001538 <calc_checksum+0xc>
			carry = carry + *(input_array+i) + 1;
 800154c:	b2a3      	uxth	r3, r4
 800154e:	3301      	adds	r3, #1
 8001550:	b29b      	uxth	r3, r3

		}
		if (carry > 0xFF){
 8001552:	2bff      	cmp	r3, #255	; 0xff
 8001554:	d9f3      	bls.n	800153e <calc_checksum+0x12>
		  carry = carry - 255;
 8001556:	3bff      	subs	r3, #255	; 0xff
 8001558:	b29b      	uxth	r3, r3
 800155a:	e7f0      	b.n	800153e <calc_checksum+0x12>
		}
	}

	return (~carry & 0x00FF);
 800155c:	43d8      	mvns	r0, r3

}
 800155e:	b2c0      	uxtb	r0, r0
 8001560:	bc10      	pop	{r4}
 8001562:	4770      	bx	lr
	return (~carry & 0x00FF);
 8001564:	43c8      	mvns	r0, r1
}
 8001566:	b2c0      	uxtb	r0, r0
 8001568:	4770      	bx	lr

0800156a <write_reg>:

void write_reg(uint8_t address, uint8_t data){
 800156a:	b500      	push	{lr}
 800156c:	b083      	sub	sp, #12

	uint8_t arr[5]={0x55,0x0a};
 800156e:	2300      	movs	r3, #0
 8001570:	f88d 3004 	strb.w	r3, [sp, #4]
 8001574:	2355      	movs	r3, #85	; 0x55
 8001576:	f88d 3000 	strb.w	r3, [sp]
 800157a:	230a      	movs	r3, #10
 800157c:	f88d 3001 	strb.w	r3, [sp, #1]

	arr[2] = address;
 8001580:	f88d 0002 	strb.w	r0, [sp, #2]
	arr[3] = data;
 8001584:	f88d 1003 	strb.w	r1, [sp, #3]
	arr[4] = calc_checksum((arr+1), 3);
 8001588:	2103      	movs	r1, #3
 800158a:	f10d 0001 	add.w	r0, sp, #1
 800158e:	f7ff ffcd 	bl	800152c <calc_checksum>
 8001592:	f88d 0004 	strb.w	r0, [sp, #4]

	USART_WriteData(arr, 5);
 8001596:	2105      	movs	r1, #5
 8001598:	4668      	mov	r0, sp
 800159a:	f000 fb9f 	bl	8001cdc <USART_WriteData>
}
 800159e:	b003      	add	sp, #12
 80015a0:	f85d fb04 	ldr.w	pc, [sp], #4

080015a4 <request_data>:


//in case of data dump, or ultrasonic measurement, address is not important
void request_data(uint8_t cmd, uint8_t address){
 80015a4:	b500      	push	{lr}
 80015a6:	b083      	sub	sp, #12

	uint8_t arr[4]={0x55};
 80015a8:	2300      	movs	r3, #0
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	2355      	movs	r3, #85	; 0x55
 80015ae:	f88d 3004 	strb.w	r3, [sp, #4]

	switch (cmd){
 80015b2:	2807      	cmp	r0, #7
 80015b4:	d011      	beq.n	80015da <request_data+0x36>
 80015b6:	2809      	cmp	r0, #9
 80015b8:	d01a      	beq.n	80015f0 <request_data+0x4c>
 80015ba:	2805      	cmp	r0, #5
 80015bc:	d002      	beq.n	80015c4 <request_data+0x20>
		arr[2] = address;
		arr[3] = calc_checksum((arr+1), 2);
		USART_WriteData(arr, 4);
		break;
	}
}
 80015be:	b003      	add	sp, #12
 80015c0:	f85d fb04 	ldr.w	pc, [sp], #4
		arr[1] = 0x05;
 80015c4:	2305      	movs	r3, #5
 80015c6:	f88d 3005 	strb.w	r3, [sp, #5]
		arr[2] = 0xfa;
 80015ca:	23fa      	movs	r3, #250	; 0xfa
 80015cc:	f88d 3006 	strb.w	r3, [sp, #6]
		USART_WriteData(arr, 3);
 80015d0:	2103      	movs	r1, #3
 80015d2:	a801      	add	r0, sp, #4
 80015d4:	f000 fb82 	bl	8001cdc <USART_WriteData>
		break;
 80015d8:	e7f1      	b.n	80015be <request_data+0x1a>
		arr[1] = 0x07;
 80015da:	2307      	movs	r3, #7
 80015dc:	f88d 3005 	strb.w	r3, [sp, #5]
		arr[2] = 0xf8;
 80015e0:	23f8      	movs	r3, #248	; 0xf8
 80015e2:	f88d 3006 	strb.w	r3, [sp, #6]
		USART_WriteData(arr, 3);
 80015e6:	2103      	movs	r1, #3
 80015e8:	a801      	add	r0, sp, #4
 80015ea:	f000 fb77 	bl	8001cdc <USART_WriteData>
		break;
 80015ee:	e7e6      	b.n	80015be <request_data+0x1a>
		arr[1] = 0x09;
 80015f0:	2309      	movs	r3, #9
 80015f2:	f88d 3005 	strb.w	r3, [sp, #5]
		arr[2] = address;
 80015f6:	f88d 1006 	strb.w	r1, [sp, #6]
		arr[3] = calc_checksum((arr+1), 2);
 80015fa:	2102      	movs	r1, #2
 80015fc:	f10d 0005 	add.w	r0, sp, #5
 8001600:	f7ff ff94 	bl	800152c <calc_checksum>
 8001604:	f88d 0007 	strb.w	r0, [sp, #7]
		USART_WriteData(arr, 4);
 8001608:	2104      	movs	r1, #4
 800160a:	eb0d 0001 	add.w	r0, sp, r1
 800160e:	f000 fb65 	bl	8001cdc <USART_WriteData>
}
 8001612:	e7d4      	b.n	80015be <request_data+0x1a>

08001614 <get_data>:

uint8_t* get_data(uint8_t cmd){
 8001614:	b510      	push	{r4, lr}

	static uint8_t rcv[130];

	uint8_t size=0;

	switch (cmd){
 8001616:	2807      	cmp	r0, #7
 8001618:	d00a      	beq.n	8001630 <get_data+0x1c>
 800161a:	2809      	cmp	r0, #9
 800161c:	d00a      	beq.n	8001634 <get_data+0x20>
 800161e:	2805      	cmp	r0, #5
 8001620:	d00a      	beq.n	8001638 <get_data+0x24>
	uint8_t size=0;
 8001622:	2100      	movs	r1, #0
	case 0x09:
		size = 3;
		break;
	}

	USART_ReadData((char*)rcv, size);
 8001624:	4c05      	ldr	r4, [pc, #20]	; (800163c <get_data+0x28>)
 8001626:	4620      	mov	r0, r4
 8001628:	f000 fb92 	bl	8001d50 <USART_ReadData>
	return rcv;
}
 800162c:	4620      	mov	r0, r4
 800162e:	bd10      	pop	{r4, pc}
		size = 130;
 8001630:	2182      	movs	r1, #130	; 0x82
		break;
 8001632:	e7f7      	b.n	8001624 <get_data+0x10>
		size = 3;
 8001634:	2103      	movs	r1, #3
		break;
 8001636:	e7f5      	b.n	8001624 <get_data+0x10>
		size = 4*1+2;
 8001638:	2106      	movs	r1, #6
 800163a:	e7f3      	b.n	8001624 <get_data+0x10>
 800163c:	200000e8 	.word	0x200000e8

08001640 <init_pga_memory>:

int8_t init_pga_memory(void){
 8001640:	b538      	push	{r3, r4, r5, lr}
	  uint8_t i=0;
	  for(uint8_t add_offset=0; add_offset<91;add_offset++){
 8001642:	2400      	movs	r4, #0
	  uint8_t i=0;
 8001644:	4625      	mov	r5, r4
	  for(uint8_t add_offset=0; add_offset<91;add_offset++){
 8001646:	e002      	b.n	800164e <init_pga_memory+0xe>
		  HAL_Delay(60);
		 write_reg(i,*(pga_mem_map+add_offset));

		  switch(i){
		  case 0x2b:
			  i = 0x40;
 8001648:	2540      	movs	r5, #64	; 0x40
	  for(uint8_t add_offset=0; add_offset<91;add_offset++){
 800164a:	3401      	adds	r4, #1
 800164c:	b2e4      	uxtb	r4, r4
 800164e:	2c5a      	cmp	r4, #90	; 0x5a
 8001650:	d810      	bhi.n	8001674 <init_pga_memory+0x34>
		  HAL_Delay(60);
 8001652:	203c      	movs	r0, #60	; 0x3c
 8001654:	f7fe fdc2 	bl	80001dc <HAL_Delay>
		 write_reg(i,*(pga_mem_map+add_offset));
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <init_pga_memory+0x98>)
 800165a:	5d19      	ldrb	r1, [r3, r4]
 800165c:	4628      	mov	r0, r5
 800165e:	f7ff ff84 	bl	800156a <write_reg>
		  switch(i){
 8001662:	2d2b      	cmp	r5, #43	; 0x2b
 8001664:	d0f0      	beq.n	8001648 <init_pga_memory+0x8>
 8001666:	2d4d      	cmp	r5, #77	; 0x4d
 8001668:	d002      	beq.n	8001670 <init_pga_memory+0x30>
			  break;
		  case 0x4d:
			  i=0x5f;
			  break;
		  default:
			  i++;
 800166a:	3501      	adds	r5, #1
 800166c:	b2ed      	uxtb	r5, r5
			  break;
 800166e:	e7ec      	b.n	800164a <init_pga_memory+0xa>
			  i=0x5f;
 8001670:	255f      	movs	r5, #95	; 0x5f
 8001672:	e7ea      	b.n	800164a <init_pga_memory+0xa>
		  }
	  }
	  uint8_t* resp;

	  request_data(0x09, 0x4c);
 8001674:	214c      	movs	r1, #76	; 0x4c
 8001676:	2009      	movs	r0, #9
 8001678:	f7ff ff94 	bl	80015a4 <request_data>
	  HAL_Delay(1);
 800167c:	2001      	movs	r0, #1
 800167e:	f7fe fdad 	bl	80001dc <HAL_Delay>
	  resp = get_data(0x09);
 8001682:	2009      	movs	r0, #9
 8001684:	f7ff ffc6 	bl	8001614 <get_data>
	  if((*resp != 0x40) | ((*(resp+1)&0x0f) != 0x00)) return -1;
 8001688:	7802      	ldrb	r2, [r0, #0]
 800168a:	7843      	ldrb	r3, [r0, #1]
 800168c:	f013 030f 	ands.w	r3, r3, #15
 8001690:	bf18      	it	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2a40      	cmp	r2, #64	; 0x40
 8001696:	bf18      	it	ne
 8001698:	f043 0301 	orrne.w	r3, r3, #1
 800169c:	b9cb      	cbnz	r3, 80016d2 <init_pga_memory+0x92>

	  request_data(0x09, 0x4d);
 800169e:	214d      	movs	r1, #77	; 0x4d
 80016a0:	2009      	movs	r0, #9
 80016a2:	f7ff ff7f 	bl	80015a4 <request_data>
	  HAL_Delay(1);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7fe fd98 	bl	80001dc <HAL_Delay>
	  resp = get_data(0x09);
 80016ac:	2009      	movs	r0, #9
 80016ae:	f7ff ffb1 	bl	8001614 <get_data>
	  if((*resp != 0x40) | ((*(resp+1)&0x7f) != 0x00)) return -1;
 80016b2:	7802      	ldrb	r2, [r0, #0]
 80016b4:	7843      	ldrb	r3, [r0, #1]
 80016b6:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 80016ba:	bf18      	it	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2a40      	cmp	r2, #64	; 0x40
 80016c0:	bf18      	it	ne
 80016c2:	f043 0301 	orrne.w	r3, r3, #1
 80016c6:	b90b      	cbnz	r3, 80016cc <init_pga_memory+0x8c>

	  return 0;
 80016c8:	2000      	movs	r0, #0
}
 80016ca:	bd38      	pop	{r3, r4, r5, pc}
	  if((*resp != 0x40) | ((*(resp+1)&0x7f) != 0x00)) return -1;
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	e7fb      	b.n	80016ca <init_pga_memory+0x8a>
	  if((*resp != 0x40) | ((*(resp+1)&0x0f) != 0x00)) return -1;
 80016d2:	f04f 30ff 	mov.w	r0, #4294967295
 80016d6:	e7f8      	b.n	80016ca <init_pga_memory+0x8a>
 80016d8:	20000008 	.word	0x20000008

080016dc <init_burst>:
	HAL_TIM_Base_Start(htim);

	write_reg(0x40,0x00);
}

void init_burst(TIM_HandleTypeDef *htim){
 80016dc:	b510      	push	{r4, lr}
 80016de:	4604      	mov	r4, r0
	htim->Init.Prescaler = 21;
 80016e0:	2315      	movs	r3, #21
 80016e2:	6043      	str	r3, [r0, #4]
	  if (HAL_TIM_Base_Init(htim) != HAL_OK)
 80016e4:	f7ff fc50 	bl	8000f88 <HAL_TIM_Base_Init>
 80016e8:	b938      	cbnz	r0, 80016fa <init_burst+0x1e>
	  {
	    Error_Handler();
	  }
	HAL_TIM_Base_Start(htim);
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff fbff 	bl	8000eee <HAL_TIM_Base_Start>

	write_reg(0x40,0x80);
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	2040      	movs	r0, #64	; 0x40
 80016f4:	f7ff ff39 	bl	800156a <write_reg>
}
 80016f8:	bd10      	pop	{r4, pc}
	    Error_Handler();
 80016fa:	f000 f8eb 	bl	80018d4 <Error_Handler>
 80016fe:	e7f4      	b.n	80016ea <init_burst+0xe>

08001700 <CORE_EnterCriticalSection>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
#include "main.h"


void CORE_EnterCriticalSection(void){	
	__disable_irq();
}
 8001702:	4770      	bx	lr

08001704 <CORE_ExitCriticalSection>:
  __ASM volatile ("cpsie i" : : : "memory");
 8001704:	b662      	cpsie	i

void CORE_ExitCriticalSection(void) {
	__enable_irq();
}
 8001706:	4770      	bx	lr

08001708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001708:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <MX_GPIO_Init+0x2c>)
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	f042 0204 	orr.w	r2, r2, #4
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	f002 0204 	and.w	r2, r2, #4
 800171a:	9200      	str	r2, [sp, #0]
 800171c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	699a      	ldr	r2, [r3, #24]
 8001720:	f042 0208 	orr.w	r2, r2, #8
 8001724:	619a      	str	r2, [r3, #24]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	9b01      	ldr	r3, [sp, #4]

}
 8001730:	b002      	add	sp, #8
 8001732:	4770      	bx	lr
 8001734:	40021000 	.word	0x40021000

08001738 <MX_USART1_UART_Init>:
{
 8001738:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800173a:	4808      	ldr	r0, [pc, #32]	; (800175c <MX_USART1_UART_Init+0x24>)
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <MX_USART1_UART_Init+0x28>)
 800173e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001740:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001744:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	2300      	movs	r3, #0
 8001748:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800174a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800174e:	220c      	movs	r2, #12
 8001750:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001756:	f7ff fd73 	bl	8001240 <HAL_UART_Init>
}
 800175a:	bd08      	pop	{r3, pc}
 800175c:	20000a30 	.word	0x20000a30
 8001760:	40013800 	.word	0x40013800

08001764 <MX_USART2_UART_Init>:
{
 8001764:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001766:	4808      	ldr	r0, [pc, #32]	; (8001788 <MX_USART2_UART_Init+0x24>)
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_USART2_UART_Init+0x28>)
 800176a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800176c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001770:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	2300      	movs	r3, #0
 8001774:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001776:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001778:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800177a:	220c      	movs	r2, #12
 800177c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001782:	f7ff fd5d 	bl	8001240 <HAL_UART_Init>
}
 8001786:	bd08      	pop	{r3, pc}
 8001788:	20000ab4 	.word	0x20000ab4
 800178c:	40004400 	.word	0x40004400

08001790 <MX_CAN_Init>:
{
 8001790:	b508      	push	{r3, lr}
  hcan.Instance = CAN1;
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <MX_CAN_Init+0x30>)
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_CAN_Init+0x34>)
 8001796:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 8;
 8001798:	2308      	movs	r3, #8
 800179a:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800179c:	2300      	movs	r3, #0
 800179e:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017a0:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80017a2:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80017a6:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80017a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017ac:	6142      	str	r2, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80017ae:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80017b0:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80017b2:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80017b4:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80017b6:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80017b8:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80017ba:	f7fe fd23 	bl	8000204 <HAL_CAN_Init>
}
 80017be:	bd08      	pop	{r3, pc}
 80017c0:	20000a08 	.word	0x20000a08
 80017c4:	40006400 	.word	0x40006400

080017c8 <MX_I2C1_Init>:
{
 80017c8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80017ca:	4809      	ldr	r0, [pc, #36]	; (80017f0 <MX_I2C1_Init+0x28>)
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_I2C1_Init+0x2c>)
 80017ce:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_I2C1_Init+0x30>)
 80017d2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017d4:	2300      	movs	r3, #0
 80017d6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017d8:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017de:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017e2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e8:	f7fe ff54 	bl	8000694 <HAL_I2C_Init>
}
 80017ec:	bd08      	pop	{r3, pc}
 80017ee:	bf00      	nop
 80017f0:	200009b4 	.word	0x200009b4
 80017f4:	40005400 	.word	0x40005400
 80017f8:	000186a0 	.word	0x000186a0

080017fc <MX_TIM1_Init>:
{
 80017fc:	b530      	push	{r4, r5, lr}
 80017fe:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001800:	2400      	movs	r4, #0
 8001802:	9402      	str	r4, [sp, #8]
 8001804:	9403      	str	r4, [sp, #12]
 8001806:	9404      	str	r4, [sp, #16]
 8001808:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180a:	9400      	str	r4, [sp, #0]
 800180c:	9401      	str	r4, [sp, #4]
  htim1.Instance = TIM1;
 800180e:	4d0e      	ldr	r5, [pc, #56]	; (8001848 <MX_TIM1_Init+0x4c>)
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_TIM1_Init+0x50>)
 8001812:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 21;
 8001814:	2315      	movs	r3, #21
 8001816:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 800181a:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181c:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800181e:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001820:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001822:	4628      	mov	r0, r5
 8001824:	f7ff fbb0 	bl	8000f88 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800182e:	a902      	add	r1, sp, #8
 8001830:	4628      	mov	r0, r5
 8001832:	f7ff fbcd 	bl	8000fd0 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001836:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800183a:	4669      	mov	r1, sp
 800183c:	4628      	mov	r0, r5
 800183e:	f7ff fc34 	bl	80010aa <HAL_TIMEx_MasterConfigSynchronization>
}
 8001842:	b007      	add	sp, #28
 8001844:	bd30      	pop	{r4, r5, pc}
 8001846:	bf00      	nop
 8001848:	20000a74 	.word	0x20000a74
 800184c:	40012c00 	.word	0x40012c00

08001850 <SystemClock_Config>:
{
 8001850:	b530      	push	{r4, r5, lr}
 8001852:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001854:	2220      	movs	r2, #32
 8001856:	2100      	movs	r1, #0
 8001858:	a807      	add	r0, sp, #28
 800185a:	f000 fb4b 	bl	8001ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185e:	2400      	movs	r4, #0
 8001860:	9401      	str	r4, [sp, #4]
 8001862:	9402      	str	r4, [sp, #8]
 8001864:	9403      	str	r4, [sp, #12]
 8001866:	9404      	str	r4, [sp, #16]
 8001868:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800186a:	2502      	movs	r5, #2
 800186c:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186e:	2301      	movs	r3, #1
 8001870:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001872:	2310      	movs	r3, #16
 8001874:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001876:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8001878:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 800187c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187e:	a806      	add	r0, sp, #24
 8001880:	f7fe ffee 	bl	8000860 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001884:	230f      	movs	r3, #15
 8001886:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001888:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800188c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001890:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001892:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001894:	4629      	mov	r1, r5
 8001896:	a801      	add	r0, sp, #4
 8001898:	f7ff fa22 	bl	8000ce0 <HAL_RCC_ClockConfig>
}
 800189c:	b011      	add	sp, #68	; 0x44
 800189e:	bd30      	pop	{r4, r5, pc}

080018a0 <main>:
{
 80018a0:	b508      	push	{r3, lr}
  HAL_Init();
 80018a2:	f7fe fc77 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80018a6:	f7ff ffd3 	bl	8001850 <SystemClock_Config>
  MX_GPIO_Init();
 80018aa:	f7ff ff2d 	bl	8001708 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80018ae:	f7ff ff43 	bl	8001738 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80018b2:	f7ff ff57 	bl	8001764 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80018b6:	f7ff ff6b 	bl	8001790 <MX_CAN_Init>
  MX_I2C1_Init();
 80018ba:	f7ff ff85 	bl	80017c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80018be:	f7ff ff9d 	bl	80017fc <MX_TIM1_Init>
  init_pga_memory();
 80018c2:	f7ff febd 	bl	8001640 <init_pga_memory>
  init_burst(&htim1);
 80018c6:	4802      	ldr	r0, [pc, #8]	; (80018d0 <main+0x30>)
 80018c8:	f7ff ff08 	bl	80016dc <init_burst>
 80018cc:	e7fe      	b.n	80018cc <main+0x2c>
 80018ce:	bf00      	nop
 80018d0:	20000a74 	.word	0x20000a74

080018d4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018d4:	4770      	bx	lr
	...

080018d8 <RingBuffer_PutChar>:
	return 0;	
}


bool RingBuffer_PutChar(RingBuffer *ringBuffer, char c)
{
 80018d8:	b508      	push	{r3, lr}
	assert(ringBuffer);
 80018da:	b198      	cbz	r0, 8001904 <RingBuffer_PutChar+0x2c>
 80018dc:	4603      	mov	r3, r0
	
	if (ringBuffer) {
		if (ringBuffer->count < ringBuffer->size)
 80018de:	6900      	ldr	r0, [r0, #16]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4290      	cmp	r0, r2
 80018e4:	da17      	bge.n	8001916 <RingBuffer_PutChar+0x3e>
        {
          ringBuffer->ptr[ringBuffer->head] = c;
 80018e6:	6858      	ldr	r0, [r3, #4]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	5481      	strb	r1, [r0, r2]
          if(ringBuffer->head==ringBuffer->size-1) {
 80018ec:	6899      	ldr	r1, [r3, #8]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	3a01      	subs	r2, #1
 80018f2:	4291      	cmp	r1, r2
 80018f4:	d00c      	beq.n	8001910 <RingBuffer_PutChar+0x38>
						ringBuffer->head=0;
					} else {
						ringBuffer->head++;
 80018f6:	3101      	adds	r1, #1
 80018f8:	6099      	str	r1, [r3, #8]
					}          
          ++ringBuffer->count;
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	3201      	adds	r2, #1
 80018fe:	611a      	str	r2, [r3, #16]
          return true;
 8001900:	2001      	movs	r0, #1
        }
	}
	return false;
}
 8001902:	bd08      	pop	{r3, pc}
	assert(ringBuffer);
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <RingBuffer_PutChar+0x44>)
 8001906:	4a06      	ldr	r2, [pc, #24]	; (8001920 <RingBuffer_PutChar+0x48>)
 8001908:	214f      	movs	r1, #79	; 0x4f
 800190a:	4806      	ldr	r0, [pc, #24]	; (8001924 <RingBuffer_PutChar+0x4c>)
 800190c:	f000 fa98 	bl	8001e40 <__assert_func>
						ringBuffer->head=0;
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	e7f1      	b.n	80018fa <RingBuffer_PutChar+0x22>
	return false;
 8001916:	2000      	movs	r0, #0
 8001918:	e7f3      	b.n	8001902 <RingBuffer_PutChar+0x2a>
 800191a:	bf00      	nop
 800191c:	08002e68 	.word	0x08002e68
 8001920:	08002dd8 	.word	0x08002dd8
 8001924:	08002e74 	.word	0x08002e74

08001928 <RingBuffer_GetChar>:

bool RingBuffer_GetChar(RingBuffer *ringBuffer, char *c)
{
 8001928:	b508      	push	{r3, lr}
	assert(ringBuffer);
 800192a:	b1a0      	cbz	r0, 8001956 <RingBuffer_GetChar+0x2e>
 800192c:	4603      	mov	r3, r0
	assert(c);
 800192e:	b1c1      	cbz	r1, 8001962 <RingBuffer_GetChar+0x3a>
	
  if ((ringBuffer) && (c)) {
    if (ringBuffer->count>0)
 8001930:	6902      	ldr	r2, [r0, #16]
 8001932:	2a00      	cmp	r2, #0
 8001934:	dd1e      	ble.n	8001974 <RingBuffer_GetChar+0x4c>
    {
      *c = ringBuffer->ptr[ringBuffer->tail];
 8001936:	6840      	ldr	r0, [r0, #4]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	5c82      	ldrb	r2, [r0, r2]
 800193c:	700a      	strb	r2, [r1, #0]
       if(ringBuffer->tail==ringBuffer->size-1) {
 800193e:	68d9      	ldr	r1, [r3, #12]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	3a01      	subs	r2, #1
 8001944:	4291      	cmp	r1, r2
 8001946:	d012      	beq.n	800196e <RingBuffer_GetChar+0x46>
				 ringBuffer->tail=0;
			 } else {
				 ringBuffer->tail++;
 8001948:	3101      	adds	r1, #1
 800194a:	60d9      	str	r1, [r3, #12]
			 }
      --ringBuffer->count;
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	3a01      	subs	r2, #1
 8001950:	611a      	str	r2, [r3, #16]
			return true;
 8001952:	2001      	movs	r0, #1
    }		
	}
	return false;
}
 8001954:	bd08      	pop	{r3, pc}
	assert(ringBuffer);
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <RingBuffer_GetChar+0x50>)
 8001958:	4a08      	ldr	r2, [pc, #32]	; (800197c <RingBuffer_GetChar+0x54>)
 800195a:	2163      	movs	r1, #99	; 0x63
 800195c:	4808      	ldr	r0, [pc, #32]	; (8001980 <RingBuffer_GetChar+0x58>)
 800195e:	f000 fa6f 	bl	8001e40 <__assert_func>
	assert(c);
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <RingBuffer_GetChar+0x5c>)
 8001964:	4a05      	ldr	r2, [pc, #20]	; (800197c <RingBuffer_GetChar+0x54>)
 8001966:	2164      	movs	r1, #100	; 0x64
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <RingBuffer_GetChar+0x58>)
 800196a:	f000 fa69 	bl	8001e40 <__assert_func>
				 ringBuffer->tail=0;
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	e7eb      	b.n	800194c <RingBuffer_GetChar+0x24>
	return false;
 8001974:	2000      	movs	r0, #0
 8001976:	e7ed      	b.n	8001954 <RingBuffer_GetChar+0x2c>
 8001978:	08002e68 	.word	0x08002e68
 800197c:	08002dec 	.word	0x08002dec
 8001980:	08002e74 	.word	0x08002e74
 8001984:	08002eac 	.word	0x08002eac

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_MspInit+0x3c>)
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	619a      	str	r2, [r3, #24]
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	f002 0201 	and.w	r2, r2, #1
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	69da      	ldr	r2, [r3, #28]
 80019a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019a4:	61da      	str	r2, [r3, #28]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019b0:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_MspInit+0x40>)
 80019b2:	6853      	ldr	r3, [r2, #4]
 80019b4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019be:	b002      	add	sp, #8
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000

080019cc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019cc:	b530      	push	{r4, r5, lr}
 80019ce:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	2300      	movs	r3, #0
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	9303      	str	r3, [sp, #12]
 80019d6:	9304      	str	r3, [sp, #16]
 80019d8:	9305      	str	r3, [sp, #20]
  if(hcan->Instance==CAN1)
 80019da:	6802      	ldr	r2, [r0, #0]
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_CAN_MspInit+0x70>)
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_CAN_MspInit+0x1a>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019e2:	b007      	add	sp, #28
 80019e4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019e6:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80019ea:	69da      	ldr	r2, [r3, #28]
 80019ec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80019f0:	61da      	str	r2, [r3, #28]
 80019f2:	69da      	ldr	r2, [r3, #28]
 80019f4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80019f8:	9200      	str	r2, [sp, #0]
 80019fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	f042 0204 	orr.w	r2, r2, #4
 8001a02:	619a      	str	r2, [r3, #24]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a0e:	ac06      	add	r4, sp, #24
 8001a10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a14:	f844 3d10 	str.w	r3, [r4, #-16]!
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	4d09      	ldr	r5, [pc, #36]	; (8001a40 <HAL_CAN_MspInit+0x74>)
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	f7fe fd4d 	bl	80004bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a26:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	4621      	mov	r1, r4
 8001a32:	4628      	mov	r0, r5
 8001a34:	f7fe fd42 	bl	80004bc <HAL_GPIO_Init>
}
 8001a38:	e7d3      	b.n	80019e2 <HAL_CAN_MspInit+0x16>
 8001a3a:	bf00      	nop
 8001a3c:	40006400 	.word	0x40006400
 8001a40:	40010800 	.word	0x40010800

08001a44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a44:	b510      	push	{r4, lr}
 8001a46:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	9303      	str	r3, [sp, #12]
 8001a4e:	9304      	str	r3, [sp, #16]
 8001a50:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8001a52:	6802      	ldr	r2, [r0, #0]
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_I2C_MspInit+0x58>)
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a5a:	b006      	add	sp, #24
 8001a5c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4c10      	ldr	r4, [pc, #64]	; (8001aa0 <HAL_I2C_MspInit+0x5c>)
 8001a60:	69a3      	ldr	r3, [r4, #24]
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	61a3      	str	r3, [r4, #24]
 8001a68:	69a3      	ldr	r3, [r4, #24]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a72:	23c0      	movs	r3, #192	; 0xc0
 8001a74:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a76:	2312      	movs	r3, #18
 8001a78:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7e:	a902      	add	r1, sp, #8
 8001a80:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <HAL_I2C_MspInit+0x60>)
 8001a82:	f7fe fd1b 	bl	80004bc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a86:	69e3      	ldr	r3, [r4, #28]
 8001a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8c:	61e3      	str	r3, [r4, #28]
 8001a8e:	69e3      	ldr	r3, [r4, #28]
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	9b01      	ldr	r3, [sp, #4]
}
 8001a98:	e7df      	b.n	8001a5a <HAL_I2C_MspInit+0x16>
 8001a9a:	bf00      	nop
 8001a9c:	40005400 	.word	0x40005400
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010c00 	.word	0x40010c00

08001aa8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001aa8:	6802      	ldr	r2, [r0, #0]
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_TIM_Base_MspInit+0x28>)
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d000      	beq.n	8001ab2 <HAL_TIM_Base_MspInit+0xa>
 8001ab0:	4770      	bx	lr
{
 8001ab2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ab4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001abe:	619a      	str	r2, [r3, #24]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001aca:	b002      	add	sp, #8
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40012c00 	.word	0x40012c00

08001ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad4:	b530      	push	{r4, r5, lr}
 8001ad6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9304      	str	r3, [sp, #16]
 8001adc:	9305      	str	r3, [sp, #20]
 8001ade:	9306      	str	r3, [sp, #24]
 8001ae0:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001ae2:	6803      	ldr	r3, [r0, #0]
 8001ae4:	4a34      	ldr	r2, [pc, #208]	; (8001bb8 <HAL_UART_MspInit+0xe4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d004      	beq.n	8001af4 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8001aea:	4a34      	ldr	r2, [pc, #208]	; (8001bbc <HAL_UART_MspInit+0xe8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d033      	beq.n	8001b58 <HAL_UART_MspInit+0x84>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001af0:	b009      	add	sp, #36	; 0x24
 8001af2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <HAL_UART_MspInit+0xec>)
 8001af6:	699a      	ldr	r2, [r3, #24]
 8001af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001afc:	619a      	str	r2, [r3, #24]
 8001afe:	699a      	ldr	r2, [r3, #24]
 8001b00:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b04:	9200      	str	r2, [sp, #0]
 8001b06:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	f042 0204 	orr.w	r2, r2, #4
 8001b0e:	619a      	str	r2, [r3, #24]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b1e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	4d26      	ldr	r5, [pc, #152]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b2a:	a904      	add	r1, sp, #16
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f7fe fcc5 	bl	80004bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b36:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b38:	2400      	movs	r4, #0
 8001b3a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	a904      	add	r1, sp, #16
 8001b40:	4628      	mov	r0, r5
 8001b42:	f7fe fcbb 	bl	80004bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b46:	4622      	mov	r2, r4
 8001b48:	4621      	mov	r1, r4
 8001b4a:	2025      	movs	r0, #37	; 0x25
 8001b4c:	f7fe fc12 	bl	8000374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b50:	2025      	movs	r0, #37	; 0x25
 8001b52:	f7fe fc43 	bl	80003dc <HAL_NVIC_EnableIRQ>
 8001b56:	e7cb      	b.n	8001af0 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_UART_MspInit+0xec>)
 8001b5a:	69da      	ldr	r2, [r3, #28]
 8001b5c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b60:	61da      	str	r2, [r3, #28]
 8001b62:	69da      	ldr	r2, [r3, #28]
 8001b64:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b68:	9202      	str	r2, [sp, #8]
 8001b6a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	f042 0204 	orr.w	r2, r2, #4
 8001b72:	619a      	str	r2, [r3, #24]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	9303      	str	r3, [sp, #12]
 8001b7c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	4d0e      	ldr	r5, [pc, #56]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b8c:	a904      	add	r1, sp, #16
 8001b8e:	4628      	mov	r0, r5
 8001b90:	f7fe fc94 	bl	80004bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b94:	2308      	movs	r3, #8
 8001b96:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b98:	2400      	movs	r4, #0
 8001b9a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	a904      	add	r1, sp, #16
 8001ba0:	4628      	mov	r0, r5
 8001ba2:	f7fe fc8b 	bl	80004bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	4621      	mov	r1, r4
 8001baa:	2026      	movs	r0, #38	; 0x26
 8001bac:	f7fe fbe2 	bl	8000374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bb0:	2026      	movs	r0, #38	; 0x26
 8001bb2:	f7fe fc13 	bl	80003dc <HAL_NVIC_EnableIRQ>
}
 8001bb6:	e79b      	b.n	8001af0 <HAL_UART_MspInit+0x1c>
 8001bb8:	40013800 	.word	0x40013800
 8001bbc:	40004400 	.word	0x40004400
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010800 	.word	0x40010800

08001bc8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bc8:	4770      	bx	lr

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	e7fe      	b.n	8001bca <HardFault_Handler>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	e7fe      	b.n	8001bcc <MemManage_Handler>

08001bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bce:	e7fe      	b.n	8001bce <BusFault_Handler>

08001bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler>

08001bd2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	4770      	bx	lr

08001bd4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd4:	4770      	bx	lr

08001bd6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bda:	f7fe faed 	bl	80001b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bde:	bd08      	pop	{r3, pc}

08001be0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001be0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001be2:	4802      	ldr	r0, [pc, #8]	; (8001bec <USART1_IRQHandler+0xc>)
 8001be4:	f7ff fc0a 	bl	80013fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001be8:	bd08      	pop	{r3, pc}
 8001bea:	bf00      	nop
 8001bec:	20000a30 	.word	0x20000a30

08001bf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bf0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bf2:	4802      	ldr	r0, [pc, #8]	; (8001bfc <USART2_IRQHandler+0xc>)
 8001bf4:	f7ff fc02 	bl	80013fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bf8:	bd08      	pop	{r3, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000ab4 	.word	0x20000ab4

08001c00 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001c00:	2001      	movs	r0, #1
 8001c02:	4770      	bx	lr

08001c04 <_kill>:

int _kill(int pid, int sig)
{
 8001c04:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001c06:	f000 f939 	bl	8001e7c <__errno>
 8001c0a:	2316      	movs	r3, #22
 8001c0c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c12:	bd08      	pop	{r3, pc}

08001c14 <_exit>:

void _exit (int status)
{
 8001c14:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001c16:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1a:	f7ff fff3 	bl	8001c04 <_kill>
 8001c1e:	e7fe      	b.n	8001c1e <_exit+0xa>

08001c20 <_read>:
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c20:	b570      	push	{r4, r5, r6, lr}
 8001c22:	460d      	mov	r5, r1
 8001c24:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	2400      	movs	r4, #0
 8001c28:	e004      	b.n	8001c34 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8001c2a:	f3af 8000 	nop.w
 8001c2e:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c30:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8001c32:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c34:	42b4      	cmp	r4, r6
 8001c36:	dbf8      	blt.n	8001c2a <_read+0xa>
	}

return len;
}
 8001c38:	4630      	mov	r0, r6
 8001c3a:	bd70      	pop	{r4, r5, r6, pc}

08001c3c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001c3c:	b508      	push	{r3, lr}
 8001c3e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c40:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <_sbrk+0x34>)
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	b142      	cbz	r2, 8001c58 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <_sbrk+0x34>)
 8001c48:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001c4a:	4403      	add	r3, r0
 8001c4c:	466a      	mov	r2, sp
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d806      	bhi.n	8001c60 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001c52:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <_sbrk+0x34>)
 8001c54:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001c56:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001c58:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <_sbrk+0x34>)
 8001c5a:	4906      	ldr	r1, [pc, #24]	; (8001c74 <_sbrk+0x38>)
 8001c5c:	6011      	str	r1, [r2, #0]
 8001c5e:	e7f2      	b.n	8001c46 <_sbrk+0xa>
		errno = ENOMEM;
 8001c60:	f000 f90c 	bl	8001e7c <__errno>
 8001c64:	230c      	movs	r3, #12
 8001c66:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	e7f3      	b.n	8001c56 <_sbrk+0x1a>
 8001c6e:	bf00      	nop
 8001c70:	2000016c 	.word	0x2000016c
 8001c74:	20000af8 	.word	0x20000af8

08001c78 <_close>:

int _close(int file)
{
	return -1;
}
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	4770      	bx	lr

08001c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c82:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001c84:	2000      	movs	r0, #0
 8001c86:	4770      	bx	lr

08001c88 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001c88:	2001      	movs	r0, #1
 8001c8a:	4770      	bx	lr

08001c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	4770      	bx	lr

08001c90 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <SystemInit+0x40>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <SystemInit+0x44>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001ca8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001cbc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001cbe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001cc2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <SystemInit+0x48>)
 8001cc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cca:	609a      	str	r2, [r3, #8]
#endif 
}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	f8ff0000 	.word	0xf8ff0000
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <USART_WriteData>:
int _write(int file, char *ptr, int len) {
	USART_WriteData(ptr,len);
	return len;
}

size_t USART_WriteData(const void *data, size_t dataSize){
 8001cdc:	b570      	push	{r4, r5, r6, lr}
 8001cde:	4606      	mov	r6, r0
 8001ce0:	460d      	mov	r5, r1
	size_t i = 0;
 8001ce2:	2400      	movs	r4, #0
	
	static char c;


	for(;i<dataSize;i++)
 8001ce4:	42ac      	cmp	r4, r5
 8001ce6:	d20e      	bcs.n	8001d06 <USART_WriteData+0x2a>
	{
		
		CORE_EnterCriticalSection();
 8001ce8:	f7ff fd0a 	bl	8001700 <CORE_EnterCriticalSection>
		if(!RingBuffer_PutChar(&USART_RingBuffer_Tx, *((char*)data+i)) ) {
 8001cec:	5d31      	ldrb	r1, [r6, r4]
 8001cee:	4812      	ldr	r0, [pc, #72]	; (8001d38 <USART_WriteData+0x5c>)
 8001cf0:	f7ff fdf2 	bl	80018d8 <RingBuffer_PutChar>
 8001cf4:	b118      	cbz	r0, 8001cfe <USART_WriteData+0x22>
			CORE_ExitCriticalSection();
			return false;
		}
		CORE_ExitCriticalSection();
 8001cf6:	f7ff fd05 	bl	8001704 <CORE_ExitCriticalSection>
	for(;i<dataSize;i++)
 8001cfa:	3401      	adds	r4, #1
 8001cfc:	e7f2      	b.n	8001ce4 <USART_WriteData+0x8>
			CORE_ExitCriticalSection();
 8001cfe:	f7ff fd01 	bl	8001704 <CORE_ExitCriticalSection>
			return false;
 8001d02:	2400      	movs	r4, #0
 8001d04:	e006      	b.n	8001d14 <USART_WriteData+0x38>
	}
	CORE_EnterCriticalSection();
 8001d06:	f7ff fcfb 	bl	8001700 <CORE_EnterCriticalSection>
	if(!flag){
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <USART_WriteData+0x5c>)
 8001d0c:	7d1b      	ldrb	r3, [r3, #20]
 8001d0e:	b11b      	cbz	r3, 8001d18 <USART_WriteData+0x3c>
		RingBuffer_GetChar(&USART_RingBuffer_Tx, &c );
		HAL_UART_Transmit_IT(&HUARTx, &c,1);
		flag=1;
	}
	CORE_ExitCriticalSection();
 8001d10:	f7ff fcf8 	bl	8001704 <CORE_ExitCriticalSection>
	return i;
}
 8001d14:	4620      	mov	r0, r4
 8001d16:	bd70      	pop	{r4, r5, r6, pc}
		RingBuffer_GetChar(&USART_RingBuffer_Tx, &c );
 8001d18:	4d07      	ldr	r5, [pc, #28]	; (8001d38 <USART_WriteData+0x5c>)
 8001d1a:	f105 0615 	add.w	r6, r5, #21
 8001d1e:	4631      	mov	r1, r6
 8001d20:	4628      	mov	r0, r5
 8001d22:	f7ff fe01 	bl	8001928 <RingBuffer_GetChar>
		HAL_UART_Transmit_IT(&HUARTx, &c,1);
 8001d26:	2201      	movs	r2, #1
 8001d28:	4631      	mov	r1, r6
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <USART_WriteData+0x60>)
 8001d2c:	f7ff fab7 	bl	800129e <HAL_UART_Transmit_IT>
		flag=1;
 8001d30:	2301      	movs	r3, #1
 8001d32:	752b      	strb	r3, [r5, #20]
 8001d34:	e7ec      	b.n	8001d10 <USART_WriteData+0x34>
 8001d36:	bf00      	nop
 8001d38:	20000174 	.word	0x20000174
 8001d3c:	20000ab4 	.word	0x20000ab4

08001d40 <_write>:
int _write(int file, char *ptr, int len) {
 8001d40:	b510      	push	{r4, lr}
 8001d42:	4608      	mov	r0, r1
 8001d44:	4614      	mov	r4, r2
	USART_WriteData(ptr,len);
 8001d46:	4611      	mov	r1, r2
 8001d48:	f7ff ffc8 	bl	8001cdc <USART_WriteData>
}
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	bd10      	pop	{r4, pc}

08001d50 <USART_ReadData>:
	
	return true;
}


size_t USART_ReadData(char *data, size_t maxSize){
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	4606      	mov	r6, r0
 8001d54:	460d      	mov	r5, r1
	size_t i = 0;
 8001d56:	2400      	movs	r4, #0
	
	for(;i<maxSize;i++)
 8001d58:	42ac      	cmp	r4, r5
 8001d5a:	d20c      	bcs.n	8001d76 <USART_ReadData+0x26>
	{	
		CORE_EnterCriticalSection();
 8001d5c:	f7ff fcd0 	bl	8001700 <CORE_EnterCriticalSection>
		if(!RingBuffer_GetChar(&USART_RingBuffer_Rx, &data[i] )) {
 8001d60:	1931      	adds	r1, r6, r4
 8001d62:	4806      	ldr	r0, [pc, #24]	; (8001d7c <USART_ReadData+0x2c>)
 8001d64:	f7ff fde0 	bl	8001928 <RingBuffer_GetChar>
 8001d68:	b118      	cbz	r0, 8001d72 <USART_ReadData+0x22>
			CORE_ExitCriticalSection();	
			break;
		}
		CORE_ExitCriticalSection();	
 8001d6a:	f7ff fccb 	bl	8001704 <CORE_ExitCriticalSection>
	for(;i<maxSize;i++)
 8001d6e:	3401      	adds	r4, #1
 8001d70:	e7f2      	b.n	8001d58 <USART_ReadData+0x8>
			CORE_ExitCriticalSection();	
 8001d72:	f7ff fcc7 	bl	8001704 <CORE_ExitCriticalSection>
	}
	return i;
}
 8001d76:	4620      	mov	r0, r4
 8001d78:	bd70      	pop	{r4, r5, r6, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000018c 	.word	0x2000018c

08001d80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){

	if(huart->Instance==HUARTx.Instance){
 8001d80:	6802      	ldr	r2, [r0, #0]
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_UART_RxCpltCallback+0x2c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d000      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0xc>
 8001d8a:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001d8c:	b510      	push	{r4, lr}

		RingBuffer_PutChar(&USART_RingBuffer_Rx, rcv_char);
 8001d8e:	4c08      	ldr	r4, [pc, #32]	; (8001db0 <HAL_UART_RxCpltCallback+0x30>)
 8001d90:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8001d94:	f104 0018 	add.w	r0, r4, #24
 8001d98:	f7ff fd9e 	bl	80018d8 <RingBuffer_PutChar>
		HAL_UART_Receive_IT(&HUARTx,&rcv_char,1);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8001da2:	4802      	ldr	r0, [pc, #8]	; (8001dac <HAL_UART_RxCpltCallback+0x2c>)
 8001da4:	f7ff fa9f 	bl	80012e6 <HAL_UART_Receive_IT>

	}

}
 8001da8:	bd10      	pop	{r4, pc}
 8001daa:	bf00      	nop
 8001dac:	20000ab4 	.word	0x20000ab4
 8001db0:	20000174 	.word	0x20000174

08001db4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){

	if(huart->Instance==HUARTx.Instance){
 8001db4:	6802      	ldr	r2, [r0, #0]
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_UART_TxCpltCallback+0x38>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d000      	beq.n	8001dc0 <HAL_UART_TxCpltCallback+0xc>
 8001dbe:	4770      	bx	lr
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001dc0:	b510      	push	{r4, lr}
		static char c;

		if(RingBuffer_GetChar(&USART_RingBuffer_Tx, &c) == true)
 8001dc2:	480b      	ldr	r0, [pc, #44]	; (8001df0 <HAL_UART_TxCpltCallback+0x3c>)
 8001dc4:	f100 012d 	add.w	r1, r0, #45	; 0x2d
 8001dc8:	f7ff fdae 	bl	8001928 <RingBuffer_GetChar>
 8001dcc:	b918      	cbnz	r0, 8001dd6 <HAL_UART_TxCpltCallback+0x22>
		{
			//c=*"a";
			HAL_UART_Transmit_IT(&HUARTx, &c,1);
			flag=1;
		}else flag=0;
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_UART_TxCpltCallback+0x3c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	751a      	strb	r2, [r3, #20]

	}

}
 8001dd4:	bd10      	pop	{r4, pc}
			HAL_UART_Transmit_IT(&HUARTx, &c,1);
 8001dd6:	4c06      	ldr	r4, [pc, #24]	; (8001df0 <HAL_UART_TxCpltCallback+0x3c>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f104 012d 	add.w	r1, r4, #45	; 0x2d
 8001dde:	4803      	ldr	r0, [pc, #12]	; (8001dec <HAL_UART_TxCpltCallback+0x38>)
 8001de0:	f7ff fa5d 	bl	800129e <HAL_UART_Transmit_IT>
			flag=1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	7523      	strb	r3, [r4, #20]
 8001de8:	e7f4      	b.n	8001dd4 <HAL_UART_TxCpltCallback+0x20>
 8001dea:	bf00      	nop
 8001dec:	20000ab4 	.word	0x20000ab4
 8001df0:	20000174 	.word	0x20000174

08001df4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001df4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001df6:	e003      	b.n	8001e00 <LoopCopyDataInit>

08001df8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dfa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001dfc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dfe:	3104      	adds	r1, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e00:	480a      	ldr	r0, [pc, #40]	; (8001e2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e08:	d3f6      	bcc.n	8001df8 <CopyDataInit>
  ldr r2, =_sbss
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e0c:	e002      	b.n	8001e14 <LoopFillZerobss>

08001e0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e10:	f842 3b04 	str.w	r3, [r2], #4

08001e14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e18:	d3f9      	bcc.n	8001e0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e1a:	f7ff ff39 	bl	8001c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1e:	f000 f845 	bl	8001eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e22:	f7ff fd3d 	bl	80018a0 <main>
  bx lr
 8001e26:	4770      	bx	lr
  ldr r3, =_sidata
 8001e28:	08002f8c 	.word	0x08002f8c
  ldr r0, =_sdata
 8001e2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e30:	200000cc 	.word	0x200000cc
  ldr r2, =_sbss
 8001e34:	200000cc 	.word	0x200000cc
  ldr r3, = _ebss
 8001e38:	20000af8 	.word	0x20000af8

08001e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e3c:	e7fe      	b.n	8001e3c <ADC1_2_IRQHandler>
	...

08001e40 <__assert_func>:
 8001e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001e42:	461c      	mov	r4, r3
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <__assert_func+0x2c>)
 8001e46:	4605      	mov	r5, r0
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68d8      	ldr	r0, [r3, #12]
 8001e4c:	b152      	cbz	r2, 8001e64 <__assert_func+0x24>
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <__assert_func+0x30>)
 8001e50:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001e54:	9100      	str	r1, [sp, #0]
 8001e56:	462b      	mov	r3, r5
 8001e58:	4622      	mov	r2, r4
 8001e5a:	4906      	ldr	r1, [pc, #24]	; (8001e74 <__assert_func+0x34>)
 8001e5c:	f000 f814 	bl	8001e88 <fiprintf>
 8001e60:	f000 fbd6 	bl	8002610 <abort>
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__assert_func+0x38>)
 8001e66:	461a      	mov	r2, r3
 8001e68:	e7f2      	b.n	8001e50 <__assert_func+0x10>
 8001e6a:	bf00      	nop
 8001e6c:	20000068 	.word	0x20000068
 8001e70:	08002eb0 	.word	0x08002eb0
 8001e74:	08002ebd 	.word	0x08002ebd
 8001e78:	08002eeb 	.word	0x08002eeb

08001e7c <__errno>:
 8001e7c:	4b01      	ldr	r3, [pc, #4]	; (8001e84 <__errno+0x8>)
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000068 	.word	0x20000068

08001e88 <fiprintf>:
 8001e88:	b40e      	push	{r1, r2, r3}
 8001e8a:	b503      	push	{r0, r1, lr}
 8001e8c:	4601      	mov	r1, r0
 8001e8e:	ab03      	add	r3, sp, #12
 8001e90:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <fiprintf+0x20>)
 8001e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e96:	6800      	ldr	r0, [r0, #0]
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	f000 f85b 	bl	8001f54 <_vfiprintf_r>
 8001e9e:	b002      	add	sp, #8
 8001ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ea4:	b003      	add	sp, #12
 8001ea6:	4770      	bx	lr
 8001ea8:	20000068 	.word	0x20000068

08001eac <__libc_init_array>:
 8001eac:	b570      	push	{r4, r5, r6, lr}
 8001eae:	2500      	movs	r5, #0
 8001eb0:	4e0c      	ldr	r6, [pc, #48]	; (8001ee4 <__libc_init_array+0x38>)
 8001eb2:	4c0d      	ldr	r4, [pc, #52]	; (8001ee8 <__libc_init_array+0x3c>)
 8001eb4:	1ba4      	subs	r4, r4, r6
 8001eb6:	10a4      	asrs	r4, r4, #2
 8001eb8:	42a5      	cmp	r5, r4
 8001eba:	d109      	bne.n	8001ed0 <__libc_init_array+0x24>
 8001ebc:	f000 ff44 	bl	8002d48 <_init>
 8001ec0:	2500      	movs	r5, #0
 8001ec2:	4e0a      	ldr	r6, [pc, #40]	; (8001eec <__libc_init_array+0x40>)
 8001ec4:	4c0a      	ldr	r4, [pc, #40]	; (8001ef0 <__libc_init_array+0x44>)
 8001ec6:	1ba4      	subs	r4, r4, r6
 8001ec8:	10a4      	asrs	r4, r4, #2
 8001eca:	42a5      	cmp	r5, r4
 8001ecc:	d105      	bne.n	8001eda <__libc_init_array+0x2e>
 8001ece:	bd70      	pop	{r4, r5, r6, pc}
 8001ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ed4:	4798      	blx	r3
 8001ed6:	3501      	adds	r5, #1
 8001ed8:	e7ee      	b.n	8001eb8 <__libc_init_array+0xc>
 8001eda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ede:	4798      	blx	r3
 8001ee0:	3501      	adds	r5, #1
 8001ee2:	e7f2      	b.n	8001eca <__libc_init_array+0x1e>
 8001ee4:	08002f84 	.word	0x08002f84
 8001ee8:	08002f84 	.word	0x08002f84
 8001eec:	08002f84 	.word	0x08002f84
 8001ef0:	08002f88 	.word	0x08002f88

08001ef4 <memset>:
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4402      	add	r2, r0
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d100      	bne.n	8001efe <memset+0xa>
 8001efc:	4770      	bx	lr
 8001efe:	f803 1b01 	strb.w	r1, [r3], #1
 8001f02:	e7f9      	b.n	8001ef8 <memset+0x4>

08001f04 <__sfputc_r>:
 8001f04:	6893      	ldr	r3, [r2, #8]
 8001f06:	b410      	push	{r4}
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	6093      	str	r3, [r2, #8]
 8001f0e:	da07      	bge.n	8001f20 <__sfputc_r+0x1c>
 8001f10:	6994      	ldr	r4, [r2, #24]
 8001f12:	42a3      	cmp	r3, r4
 8001f14:	db01      	blt.n	8001f1a <__sfputc_r+0x16>
 8001f16:	290a      	cmp	r1, #10
 8001f18:	d102      	bne.n	8001f20 <__sfputc_r+0x1c>
 8001f1a:	bc10      	pop	{r4}
 8001f1c:	f000 bab8 	b.w	8002490 <__swbuf_r>
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	1c58      	adds	r0, r3, #1
 8001f24:	6010      	str	r0, [r2, #0]
 8001f26:	7019      	strb	r1, [r3, #0]
 8001f28:	4608      	mov	r0, r1
 8001f2a:	bc10      	pop	{r4}
 8001f2c:	4770      	bx	lr

08001f2e <__sfputs_r>:
 8001f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f30:	4606      	mov	r6, r0
 8001f32:	460f      	mov	r7, r1
 8001f34:	4614      	mov	r4, r2
 8001f36:	18d5      	adds	r5, r2, r3
 8001f38:	42ac      	cmp	r4, r5
 8001f3a:	d101      	bne.n	8001f40 <__sfputs_r+0x12>
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	e007      	b.n	8001f50 <__sfputs_r+0x22>
 8001f40:	463a      	mov	r2, r7
 8001f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f46:	4630      	mov	r0, r6
 8001f48:	f7ff ffdc 	bl	8001f04 <__sfputc_r>
 8001f4c:	1c43      	adds	r3, r0, #1
 8001f4e:	d1f3      	bne.n	8001f38 <__sfputs_r+0xa>
 8001f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f54 <_vfiprintf_r>:
 8001f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f58:	460c      	mov	r4, r1
 8001f5a:	b09d      	sub	sp, #116	; 0x74
 8001f5c:	4617      	mov	r7, r2
 8001f5e:	461d      	mov	r5, r3
 8001f60:	4606      	mov	r6, r0
 8001f62:	b118      	cbz	r0, 8001f6c <_vfiprintf_r+0x18>
 8001f64:	6983      	ldr	r3, [r0, #24]
 8001f66:	b90b      	cbnz	r3, 8001f6c <_vfiprintf_r+0x18>
 8001f68:	f000 fc4a 	bl	8002800 <__sinit>
 8001f6c:	4b7c      	ldr	r3, [pc, #496]	; (8002160 <_vfiprintf_r+0x20c>)
 8001f6e:	429c      	cmp	r4, r3
 8001f70:	d158      	bne.n	8002024 <_vfiprintf_r+0xd0>
 8001f72:	6874      	ldr	r4, [r6, #4]
 8001f74:	89a3      	ldrh	r3, [r4, #12]
 8001f76:	0718      	lsls	r0, r3, #28
 8001f78:	d55e      	bpl.n	8002038 <_vfiprintf_r+0xe4>
 8001f7a:	6923      	ldr	r3, [r4, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d05b      	beq.n	8002038 <_vfiprintf_r+0xe4>
 8001f80:	2300      	movs	r3, #0
 8001f82:	9309      	str	r3, [sp, #36]	; 0x24
 8001f84:	2320      	movs	r3, #32
 8001f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f8a:	2330      	movs	r3, #48	; 0x30
 8001f8c:	f04f 0b01 	mov.w	fp, #1
 8001f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f94:	9503      	str	r5, [sp, #12]
 8001f96:	46b8      	mov	r8, r7
 8001f98:	4645      	mov	r5, r8
 8001f9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001f9e:	b10b      	cbz	r3, 8001fa4 <_vfiprintf_r+0x50>
 8001fa0:	2b25      	cmp	r3, #37	; 0x25
 8001fa2:	d154      	bne.n	800204e <_vfiprintf_r+0xfa>
 8001fa4:	ebb8 0a07 	subs.w	sl, r8, r7
 8001fa8:	d00b      	beq.n	8001fc2 <_vfiprintf_r+0x6e>
 8001faa:	4653      	mov	r3, sl
 8001fac:	463a      	mov	r2, r7
 8001fae:	4621      	mov	r1, r4
 8001fb0:	4630      	mov	r0, r6
 8001fb2:	f7ff ffbc 	bl	8001f2e <__sfputs_r>
 8001fb6:	3001      	adds	r0, #1
 8001fb8:	f000 80c2 	beq.w	8002140 <_vfiprintf_r+0x1ec>
 8001fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fbe:	4453      	add	r3, sl
 8001fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8001fc2:	f898 3000 	ldrb.w	r3, [r8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80ba 	beq.w	8002140 <_vfiprintf_r+0x1ec>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fd6:	9304      	str	r3, [sp, #16]
 8001fd8:	9307      	str	r3, [sp, #28]
 8001fda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fde:	931a      	str	r3, [sp, #104]	; 0x68
 8001fe0:	46a8      	mov	r8, r5
 8001fe2:	2205      	movs	r2, #5
 8001fe4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001fe8:	485e      	ldr	r0, [pc, #376]	; (8002164 <_vfiprintf_r+0x210>)
 8001fea:	f000 fcf7 	bl	80029dc <memchr>
 8001fee:	9b04      	ldr	r3, [sp, #16]
 8001ff0:	bb78      	cbnz	r0, 8002052 <_vfiprintf_r+0xfe>
 8001ff2:	06d9      	lsls	r1, r3, #27
 8001ff4:	bf44      	itt	mi
 8001ff6:	2220      	movmi	r2, #32
 8001ff8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ffc:	071a      	lsls	r2, r3, #28
 8001ffe:	bf44      	itt	mi
 8002000:	222b      	movmi	r2, #43	; 0x2b
 8002002:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002006:	782a      	ldrb	r2, [r5, #0]
 8002008:	2a2a      	cmp	r2, #42	; 0x2a
 800200a:	d02a      	beq.n	8002062 <_vfiprintf_r+0x10e>
 800200c:	46a8      	mov	r8, r5
 800200e:	2000      	movs	r0, #0
 8002010:	250a      	movs	r5, #10
 8002012:	9a07      	ldr	r2, [sp, #28]
 8002014:	4641      	mov	r1, r8
 8002016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800201a:	3b30      	subs	r3, #48	; 0x30
 800201c:	2b09      	cmp	r3, #9
 800201e:	d969      	bls.n	80020f4 <_vfiprintf_r+0x1a0>
 8002020:	b360      	cbz	r0, 800207c <_vfiprintf_r+0x128>
 8002022:	e024      	b.n	800206e <_vfiprintf_r+0x11a>
 8002024:	4b50      	ldr	r3, [pc, #320]	; (8002168 <_vfiprintf_r+0x214>)
 8002026:	429c      	cmp	r4, r3
 8002028:	d101      	bne.n	800202e <_vfiprintf_r+0xda>
 800202a:	68b4      	ldr	r4, [r6, #8]
 800202c:	e7a2      	b.n	8001f74 <_vfiprintf_r+0x20>
 800202e:	4b4f      	ldr	r3, [pc, #316]	; (800216c <_vfiprintf_r+0x218>)
 8002030:	429c      	cmp	r4, r3
 8002032:	bf08      	it	eq
 8002034:	68f4      	ldreq	r4, [r6, #12]
 8002036:	e79d      	b.n	8001f74 <_vfiprintf_r+0x20>
 8002038:	4621      	mov	r1, r4
 800203a:	4630      	mov	r0, r6
 800203c:	f000 fa7a 	bl	8002534 <__swsetup_r>
 8002040:	2800      	cmp	r0, #0
 8002042:	d09d      	beq.n	8001f80 <_vfiprintf_r+0x2c>
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	b01d      	add	sp, #116	; 0x74
 800204a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800204e:	46a8      	mov	r8, r5
 8002050:	e7a2      	b.n	8001f98 <_vfiprintf_r+0x44>
 8002052:	4a44      	ldr	r2, [pc, #272]	; (8002164 <_vfiprintf_r+0x210>)
 8002054:	4645      	mov	r5, r8
 8002056:	1a80      	subs	r0, r0, r2
 8002058:	fa0b f000 	lsl.w	r0, fp, r0
 800205c:	4318      	orrs	r0, r3
 800205e:	9004      	str	r0, [sp, #16]
 8002060:	e7be      	b.n	8001fe0 <_vfiprintf_r+0x8c>
 8002062:	9a03      	ldr	r2, [sp, #12]
 8002064:	1d11      	adds	r1, r2, #4
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	9103      	str	r1, [sp, #12]
 800206a:	2a00      	cmp	r2, #0
 800206c:	db01      	blt.n	8002072 <_vfiprintf_r+0x11e>
 800206e:	9207      	str	r2, [sp, #28]
 8002070:	e004      	b.n	800207c <_vfiprintf_r+0x128>
 8002072:	4252      	negs	r2, r2
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	9207      	str	r2, [sp, #28]
 800207a:	9304      	str	r3, [sp, #16]
 800207c:	f898 3000 	ldrb.w	r3, [r8]
 8002080:	2b2e      	cmp	r3, #46	; 0x2e
 8002082:	d10e      	bne.n	80020a2 <_vfiprintf_r+0x14e>
 8002084:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002088:	2b2a      	cmp	r3, #42	; 0x2a
 800208a:	d138      	bne.n	80020fe <_vfiprintf_r+0x1aa>
 800208c:	9b03      	ldr	r3, [sp, #12]
 800208e:	f108 0802 	add.w	r8, r8, #2
 8002092:	1d1a      	adds	r2, r3, #4
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	9203      	str	r2, [sp, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	bfb8      	it	lt
 800209c:	f04f 33ff 	movlt.w	r3, #4294967295
 80020a0:	9305      	str	r3, [sp, #20]
 80020a2:	4d33      	ldr	r5, [pc, #204]	; (8002170 <_vfiprintf_r+0x21c>)
 80020a4:	2203      	movs	r2, #3
 80020a6:	f898 1000 	ldrb.w	r1, [r8]
 80020aa:	4628      	mov	r0, r5
 80020ac:	f000 fc96 	bl	80029dc <memchr>
 80020b0:	b140      	cbz	r0, 80020c4 <_vfiprintf_r+0x170>
 80020b2:	2340      	movs	r3, #64	; 0x40
 80020b4:	1b40      	subs	r0, r0, r5
 80020b6:	fa03 f000 	lsl.w	r0, r3, r0
 80020ba:	9b04      	ldr	r3, [sp, #16]
 80020bc:	f108 0801 	add.w	r8, r8, #1
 80020c0:	4303      	orrs	r3, r0
 80020c2:	9304      	str	r3, [sp, #16]
 80020c4:	f898 1000 	ldrb.w	r1, [r8]
 80020c8:	2206      	movs	r2, #6
 80020ca:	482a      	ldr	r0, [pc, #168]	; (8002174 <_vfiprintf_r+0x220>)
 80020cc:	f108 0701 	add.w	r7, r8, #1
 80020d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80020d4:	f000 fc82 	bl	80029dc <memchr>
 80020d8:	2800      	cmp	r0, #0
 80020da:	d037      	beq.n	800214c <_vfiprintf_r+0x1f8>
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <_vfiprintf_r+0x224>)
 80020de:	bb1b      	cbnz	r3, 8002128 <_vfiprintf_r+0x1d4>
 80020e0:	9b03      	ldr	r3, [sp, #12]
 80020e2:	3307      	adds	r3, #7
 80020e4:	f023 0307 	bic.w	r3, r3, #7
 80020e8:	3308      	adds	r3, #8
 80020ea:	9303      	str	r3, [sp, #12]
 80020ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020ee:	444b      	add	r3, r9
 80020f0:	9309      	str	r3, [sp, #36]	; 0x24
 80020f2:	e750      	b.n	8001f96 <_vfiprintf_r+0x42>
 80020f4:	fb05 3202 	mla	r2, r5, r2, r3
 80020f8:	2001      	movs	r0, #1
 80020fa:	4688      	mov	r8, r1
 80020fc:	e78a      	b.n	8002014 <_vfiprintf_r+0xc0>
 80020fe:	2300      	movs	r3, #0
 8002100:	250a      	movs	r5, #10
 8002102:	4619      	mov	r1, r3
 8002104:	f108 0801 	add.w	r8, r8, #1
 8002108:	9305      	str	r3, [sp, #20]
 800210a:	4640      	mov	r0, r8
 800210c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002110:	3a30      	subs	r2, #48	; 0x30
 8002112:	2a09      	cmp	r2, #9
 8002114:	d903      	bls.n	800211e <_vfiprintf_r+0x1ca>
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0c3      	beq.n	80020a2 <_vfiprintf_r+0x14e>
 800211a:	9105      	str	r1, [sp, #20]
 800211c:	e7c1      	b.n	80020a2 <_vfiprintf_r+0x14e>
 800211e:	fb05 2101 	mla	r1, r5, r1, r2
 8002122:	2301      	movs	r3, #1
 8002124:	4680      	mov	r8, r0
 8002126:	e7f0      	b.n	800210a <_vfiprintf_r+0x1b6>
 8002128:	ab03      	add	r3, sp, #12
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	4622      	mov	r2, r4
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <_vfiprintf_r+0x228>)
 8002130:	a904      	add	r1, sp, #16
 8002132:	4630      	mov	r0, r6
 8002134:	f3af 8000 	nop.w
 8002138:	f1b0 3fff 	cmp.w	r0, #4294967295
 800213c:	4681      	mov	r9, r0
 800213e:	d1d5      	bne.n	80020ec <_vfiprintf_r+0x198>
 8002140:	89a3      	ldrh	r3, [r4, #12]
 8002142:	065b      	lsls	r3, r3, #25
 8002144:	f53f af7e 	bmi.w	8002044 <_vfiprintf_r+0xf0>
 8002148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800214a:	e77d      	b.n	8002048 <_vfiprintf_r+0xf4>
 800214c:	ab03      	add	r3, sp, #12
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4622      	mov	r2, r4
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <_vfiprintf_r+0x228>)
 8002154:	a904      	add	r1, sp, #16
 8002156:	4630      	mov	r0, r6
 8002158:	f000 f888 	bl	800226c <_printf_i>
 800215c:	e7ec      	b.n	8002138 <_vfiprintf_r+0x1e4>
 800215e:	bf00      	nop
 8002160:	08002f44 	.word	0x08002f44
 8002164:	08002ef0 	.word	0x08002ef0
 8002168:	08002f64 	.word	0x08002f64
 800216c:	08002f24 	.word	0x08002f24
 8002170:	08002ef6 	.word	0x08002ef6
 8002174:	08002efa 	.word	0x08002efa
 8002178:	00000000 	.word	0x00000000
 800217c:	08001f2f 	.word	0x08001f2f

08002180 <_printf_common>:
 8002180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002184:	4691      	mov	r9, r2
 8002186:	461f      	mov	r7, r3
 8002188:	688a      	ldr	r2, [r1, #8]
 800218a:	690b      	ldr	r3, [r1, #16]
 800218c:	4606      	mov	r6, r0
 800218e:	4293      	cmp	r3, r2
 8002190:	bfb8      	it	lt
 8002192:	4613      	movlt	r3, r2
 8002194:	f8c9 3000 	str.w	r3, [r9]
 8002198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800219c:	460c      	mov	r4, r1
 800219e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021a2:	b112      	cbz	r2, 80021aa <_printf_common+0x2a>
 80021a4:	3301      	adds	r3, #1
 80021a6:	f8c9 3000 	str.w	r3, [r9]
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	0699      	lsls	r1, r3, #26
 80021ae:	bf42      	ittt	mi
 80021b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80021b4:	3302      	addmi	r3, #2
 80021b6:	f8c9 3000 	strmi.w	r3, [r9]
 80021ba:	6825      	ldr	r5, [r4, #0]
 80021bc:	f015 0506 	ands.w	r5, r5, #6
 80021c0:	d107      	bne.n	80021d2 <_printf_common+0x52>
 80021c2:	f104 0a19 	add.w	sl, r4, #25
 80021c6:	68e3      	ldr	r3, [r4, #12]
 80021c8:	f8d9 2000 	ldr.w	r2, [r9]
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	42ab      	cmp	r3, r5
 80021d0:	dc29      	bgt.n	8002226 <_printf_common+0xa6>
 80021d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80021d6:	6822      	ldr	r2, [r4, #0]
 80021d8:	3300      	adds	r3, #0
 80021da:	bf18      	it	ne
 80021dc:	2301      	movne	r3, #1
 80021de:	0692      	lsls	r2, r2, #26
 80021e0:	d42e      	bmi.n	8002240 <_printf_common+0xc0>
 80021e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021e6:	4639      	mov	r1, r7
 80021e8:	4630      	mov	r0, r6
 80021ea:	47c0      	blx	r8
 80021ec:	3001      	adds	r0, #1
 80021ee:	d021      	beq.n	8002234 <_printf_common+0xb4>
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	68e5      	ldr	r5, [r4, #12]
 80021f4:	f003 0306 	and.w	r3, r3, #6
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	bf18      	it	ne
 80021fc:	2500      	movne	r5, #0
 80021fe:	f8d9 2000 	ldr.w	r2, [r9]
 8002202:	f04f 0900 	mov.w	r9, #0
 8002206:	bf08      	it	eq
 8002208:	1aad      	subeq	r5, r5, r2
 800220a:	68a3      	ldr	r3, [r4, #8]
 800220c:	6922      	ldr	r2, [r4, #16]
 800220e:	bf08      	it	eq
 8002210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002214:	4293      	cmp	r3, r2
 8002216:	bfc4      	itt	gt
 8002218:	1a9b      	subgt	r3, r3, r2
 800221a:	18ed      	addgt	r5, r5, r3
 800221c:	341a      	adds	r4, #26
 800221e:	454d      	cmp	r5, r9
 8002220:	d11a      	bne.n	8002258 <_printf_common+0xd8>
 8002222:	2000      	movs	r0, #0
 8002224:	e008      	b.n	8002238 <_printf_common+0xb8>
 8002226:	2301      	movs	r3, #1
 8002228:	4652      	mov	r2, sl
 800222a:	4639      	mov	r1, r7
 800222c:	4630      	mov	r0, r6
 800222e:	47c0      	blx	r8
 8002230:	3001      	adds	r0, #1
 8002232:	d103      	bne.n	800223c <_printf_common+0xbc>
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800223c:	3501      	adds	r5, #1
 800223e:	e7c2      	b.n	80021c6 <_printf_common+0x46>
 8002240:	2030      	movs	r0, #48	; 0x30
 8002242:	18e1      	adds	r1, r4, r3
 8002244:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800224e:	4422      	add	r2, r4
 8002250:	3302      	adds	r3, #2
 8002252:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002256:	e7c4      	b.n	80021e2 <_printf_common+0x62>
 8002258:	2301      	movs	r3, #1
 800225a:	4622      	mov	r2, r4
 800225c:	4639      	mov	r1, r7
 800225e:	4630      	mov	r0, r6
 8002260:	47c0      	blx	r8
 8002262:	3001      	adds	r0, #1
 8002264:	d0e6      	beq.n	8002234 <_printf_common+0xb4>
 8002266:	f109 0901 	add.w	r9, r9, #1
 800226a:	e7d8      	b.n	800221e <_printf_common+0x9e>

0800226c <_printf_i>:
 800226c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002270:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002274:	460c      	mov	r4, r1
 8002276:	7e09      	ldrb	r1, [r1, #24]
 8002278:	b085      	sub	sp, #20
 800227a:	296e      	cmp	r1, #110	; 0x6e
 800227c:	4617      	mov	r7, r2
 800227e:	4606      	mov	r6, r0
 8002280:	4698      	mov	r8, r3
 8002282:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002284:	f000 80b3 	beq.w	80023ee <_printf_i+0x182>
 8002288:	d822      	bhi.n	80022d0 <_printf_i+0x64>
 800228a:	2963      	cmp	r1, #99	; 0x63
 800228c:	d036      	beq.n	80022fc <_printf_i+0x90>
 800228e:	d80a      	bhi.n	80022a6 <_printf_i+0x3a>
 8002290:	2900      	cmp	r1, #0
 8002292:	f000 80b9 	beq.w	8002408 <_printf_i+0x19c>
 8002296:	2958      	cmp	r1, #88	; 0x58
 8002298:	f000 8083 	beq.w	80023a2 <_printf_i+0x136>
 800229c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80022a4:	e032      	b.n	800230c <_printf_i+0xa0>
 80022a6:	2964      	cmp	r1, #100	; 0x64
 80022a8:	d001      	beq.n	80022ae <_printf_i+0x42>
 80022aa:	2969      	cmp	r1, #105	; 0x69
 80022ac:	d1f6      	bne.n	800229c <_printf_i+0x30>
 80022ae:	6820      	ldr	r0, [r4, #0]
 80022b0:	6813      	ldr	r3, [r2, #0]
 80022b2:	0605      	lsls	r5, r0, #24
 80022b4:	f103 0104 	add.w	r1, r3, #4
 80022b8:	d52a      	bpl.n	8002310 <_printf_i+0xa4>
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6011      	str	r1, [r2, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	da03      	bge.n	80022ca <_printf_i+0x5e>
 80022c2:	222d      	movs	r2, #45	; 0x2d
 80022c4:	425b      	negs	r3, r3
 80022c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80022ca:	486f      	ldr	r0, [pc, #444]	; (8002488 <_printf_i+0x21c>)
 80022cc:	220a      	movs	r2, #10
 80022ce:	e039      	b.n	8002344 <_printf_i+0xd8>
 80022d0:	2973      	cmp	r1, #115	; 0x73
 80022d2:	f000 809d 	beq.w	8002410 <_printf_i+0x1a4>
 80022d6:	d808      	bhi.n	80022ea <_printf_i+0x7e>
 80022d8:	296f      	cmp	r1, #111	; 0x6f
 80022da:	d020      	beq.n	800231e <_printf_i+0xb2>
 80022dc:	2970      	cmp	r1, #112	; 0x70
 80022de:	d1dd      	bne.n	800229c <_printf_i+0x30>
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	f043 0320 	orr.w	r3, r3, #32
 80022e6:	6023      	str	r3, [r4, #0]
 80022e8:	e003      	b.n	80022f2 <_printf_i+0x86>
 80022ea:	2975      	cmp	r1, #117	; 0x75
 80022ec:	d017      	beq.n	800231e <_printf_i+0xb2>
 80022ee:	2978      	cmp	r1, #120	; 0x78
 80022f0:	d1d4      	bne.n	800229c <_printf_i+0x30>
 80022f2:	2378      	movs	r3, #120	; 0x78
 80022f4:	4865      	ldr	r0, [pc, #404]	; (800248c <_printf_i+0x220>)
 80022f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80022fa:	e055      	b.n	80023a8 <_printf_i+0x13c>
 80022fc:	6813      	ldr	r3, [r2, #0]
 80022fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002302:	1d19      	adds	r1, r3, #4
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6011      	str	r1, [r2, #0]
 8002308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800230c:	2301      	movs	r3, #1
 800230e:	e08c      	b.n	800242a <_printf_i+0x1be>
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002316:	6011      	str	r1, [r2, #0]
 8002318:	bf18      	it	ne
 800231a:	b21b      	sxthne	r3, r3
 800231c:	e7cf      	b.n	80022be <_printf_i+0x52>
 800231e:	6813      	ldr	r3, [r2, #0]
 8002320:	6825      	ldr	r5, [r4, #0]
 8002322:	1d18      	adds	r0, r3, #4
 8002324:	6010      	str	r0, [r2, #0]
 8002326:	0628      	lsls	r0, r5, #24
 8002328:	d501      	bpl.n	800232e <_printf_i+0xc2>
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	e002      	b.n	8002334 <_printf_i+0xc8>
 800232e:	0668      	lsls	r0, r5, #25
 8002330:	d5fb      	bpl.n	800232a <_printf_i+0xbe>
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	296f      	cmp	r1, #111	; 0x6f
 8002336:	bf14      	ite	ne
 8002338:	220a      	movne	r2, #10
 800233a:	2208      	moveq	r2, #8
 800233c:	4852      	ldr	r0, [pc, #328]	; (8002488 <_printf_i+0x21c>)
 800233e:	2100      	movs	r1, #0
 8002340:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002344:	6865      	ldr	r5, [r4, #4]
 8002346:	2d00      	cmp	r5, #0
 8002348:	60a5      	str	r5, [r4, #8]
 800234a:	f2c0 8095 	blt.w	8002478 <_printf_i+0x20c>
 800234e:	6821      	ldr	r1, [r4, #0]
 8002350:	f021 0104 	bic.w	r1, r1, #4
 8002354:	6021      	str	r1, [r4, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d13d      	bne.n	80023d6 <_printf_i+0x16a>
 800235a:	2d00      	cmp	r5, #0
 800235c:	f040 808e 	bne.w	800247c <_printf_i+0x210>
 8002360:	4665      	mov	r5, ip
 8002362:	2a08      	cmp	r2, #8
 8002364:	d10b      	bne.n	800237e <_printf_i+0x112>
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	07db      	lsls	r3, r3, #31
 800236a:	d508      	bpl.n	800237e <_printf_i+0x112>
 800236c:	6923      	ldr	r3, [r4, #16]
 800236e:	6862      	ldr	r2, [r4, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	bfde      	ittt	le
 8002374:	2330      	movle	r3, #48	; 0x30
 8002376:	f805 3c01 	strble.w	r3, [r5, #-1]
 800237a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800237e:	ebac 0305 	sub.w	r3, ip, r5
 8002382:	6123      	str	r3, [r4, #16]
 8002384:	f8cd 8000 	str.w	r8, [sp]
 8002388:	463b      	mov	r3, r7
 800238a:	aa03      	add	r2, sp, #12
 800238c:	4621      	mov	r1, r4
 800238e:	4630      	mov	r0, r6
 8002390:	f7ff fef6 	bl	8002180 <_printf_common>
 8002394:	3001      	adds	r0, #1
 8002396:	d14d      	bne.n	8002434 <_printf_i+0x1c8>
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	b005      	add	sp, #20
 800239e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023a2:	4839      	ldr	r0, [pc, #228]	; (8002488 <_printf_i+0x21c>)
 80023a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80023a8:	6813      	ldr	r3, [r2, #0]
 80023aa:	6821      	ldr	r1, [r4, #0]
 80023ac:	1d1d      	adds	r5, r3, #4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6015      	str	r5, [r2, #0]
 80023b2:	060a      	lsls	r2, r1, #24
 80023b4:	d50b      	bpl.n	80023ce <_printf_i+0x162>
 80023b6:	07ca      	lsls	r2, r1, #31
 80023b8:	bf44      	itt	mi
 80023ba:	f041 0120 	orrmi.w	r1, r1, #32
 80023be:	6021      	strmi	r1, [r4, #0]
 80023c0:	b91b      	cbnz	r3, 80023ca <_printf_i+0x15e>
 80023c2:	6822      	ldr	r2, [r4, #0]
 80023c4:	f022 0220 	bic.w	r2, r2, #32
 80023c8:	6022      	str	r2, [r4, #0]
 80023ca:	2210      	movs	r2, #16
 80023cc:	e7b7      	b.n	800233e <_printf_i+0xd2>
 80023ce:	064d      	lsls	r5, r1, #25
 80023d0:	bf48      	it	mi
 80023d2:	b29b      	uxthmi	r3, r3
 80023d4:	e7ef      	b.n	80023b6 <_printf_i+0x14a>
 80023d6:	4665      	mov	r5, ip
 80023d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80023dc:	fb02 3311 	mls	r3, r2, r1, r3
 80023e0:	5cc3      	ldrb	r3, [r0, r3]
 80023e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80023e6:	460b      	mov	r3, r1
 80023e8:	2900      	cmp	r1, #0
 80023ea:	d1f5      	bne.n	80023d8 <_printf_i+0x16c>
 80023ec:	e7b9      	b.n	8002362 <_printf_i+0xf6>
 80023ee:	6813      	ldr	r3, [r2, #0]
 80023f0:	6825      	ldr	r5, [r4, #0]
 80023f2:	1d18      	adds	r0, r3, #4
 80023f4:	6961      	ldr	r1, [r4, #20]
 80023f6:	6010      	str	r0, [r2, #0]
 80023f8:	0628      	lsls	r0, r5, #24
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	d501      	bpl.n	8002402 <_printf_i+0x196>
 80023fe:	6019      	str	r1, [r3, #0]
 8002400:	e002      	b.n	8002408 <_printf_i+0x19c>
 8002402:	066a      	lsls	r2, r5, #25
 8002404:	d5fb      	bpl.n	80023fe <_printf_i+0x192>
 8002406:	8019      	strh	r1, [r3, #0]
 8002408:	2300      	movs	r3, #0
 800240a:	4665      	mov	r5, ip
 800240c:	6123      	str	r3, [r4, #16]
 800240e:	e7b9      	b.n	8002384 <_printf_i+0x118>
 8002410:	6813      	ldr	r3, [r2, #0]
 8002412:	1d19      	adds	r1, r3, #4
 8002414:	6011      	str	r1, [r2, #0]
 8002416:	681d      	ldr	r5, [r3, #0]
 8002418:	6862      	ldr	r2, [r4, #4]
 800241a:	2100      	movs	r1, #0
 800241c:	4628      	mov	r0, r5
 800241e:	f000 fadd 	bl	80029dc <memchr>
 8002422:	b108      	cbz	r0, 8002428 <_printf_i+0x1bc>
 8002424:	1b40      	subs	r0, r0, r5
 8002426:	6060      	str	r0, [r4, #4]
 8002428:	6863      	ldr	r3, [r4, #4]
 800242a:	6123      	str	r3, [r4, #16]
 800242c:	2300      	movs	r3, #0
 800242e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002432:	e7a7      	b.n	8002384 <_printf_i+0x118>
 8002434:	6923      	ldr	r3, [r4, #16]
 8002436:	462a      	mov	r2, r5
 8002438:	4639      	mov	r1, r7
 800243a:	4630      	mov	r0, r6
 800243c:	47c0      	blx	r8
 800243e:	3001      	adds	r0, #1
 8002440:	d0aa      	beq.n	8002398 <_printf_i+0x12c>
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	079b      	lsls	r3, r3, #30
 8002446:	d413      	bmi.n	8002470 <_printf_i+0x204>
 8002448:	68e0      	ldr	r0, [r4, #12]
 800244a:	9b03      	ldr	r3, [sp, #12]
 800244c:	4298      	cmp	r0, r3
 800244e:	bfb8      	it	lt
 8002450:	4618      	movlt	r0, r3
 8002452:	e7a3      	b.n	800239c <_printf_i+0x130>
 8002454:	2301      	movs	r3, #1
 8002456:	464a      	mov	r2, r9
 8002458:	4639      	mov	r1, r7
 800245a:	4630      	mov	r0, r6
 800245c:	47c0      	blx	r8
 800245e:	3001      	adds	r0, #1
 8002460:	d09a      	beq.n	8002398 <_printf_i+0x12c>
 8002462:	3501      	adds	r5, #1
 8002464:	68e3      	ldr	r3, [r4, #12]
 8002466:	9a03      	ldr	r2, [sp, #12]
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	42ab      	cmp	r3, r5
 800246c:	dcf2      	bgt.n	8002454 <_printf_i+0x1e8>
 800246e:	e7eb      	b.n	8002448 <_printf_i+0x1dc>
 8002470:	2500      	movs	r5, #0
 8002472:	f104 0919 	add.w	r9, r4, #25
 8002476:	e7f5      	b.n	8002464 <_printf_i+0x1f8>
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ac      	bne.n	80023d6 <_printf_i+0x16a>
 800247c:	7803      	ldrb	r3, [r0, #0]
 800247e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002482:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002486:	e76c      	b.n	8002362 <_printf_i+0xf6>
 8002488:	08002f01 	.word	0x08002f01
 800248c:	08002f12 	.word	0x08002f12

08002490 <__swbuf_r>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	460e      	mov	r6, r1
 8002494:	4614      	mov	r4, r2
 8002496:	4605      	mov	r5, r0
 8002498:	b118      	cbz	r0, 80024a2 <__swbuf_r+0x12>
 800249a:	6983      	ldr	r3, [r0, #24]
 800249c:	b90b      	cbnz	r3, 80024a2 <__swbuf_r+0x12>
 800249e:	f000 f9af 	bl	8002800 <__sinit>
 80024a2:	4b21      	ldr	r3, [pc, #132]	; (8002528 <__swbuf_r+0x98>)
 80024a4:	429c      	cmp	r4, r3
 80024a6:	d12a      	bne.n	80024fe <__swbuf_r+0x6e>
 80024a8:	686c      	ldr	r4, [r5, #4]
 80024aa:	69a3      	ldr	r3, [r4, #24]
 80024ac:	60a3      	str	r3, [r4, #8]
 80024ae:	89a3      	ldrh	r3, [r4, #12]
 80024b0:	071a      	lsls	r2, r3, #28
 80024b2:	d52e      	bpl.n	8002512 <__swbuf_r+0x82>
 80024b4:	6923      	ldr	r3, [r4, #16]
 80024b6:	b363      	cbz	r3, 8002512 <__swbuf_r+0x82>
 80024b8:	6923      	ldr	r3, [r4, #16]
 80024ba:	6820      	ldr	r0, [r4, #0]
 80024bc:	b2f6      	uxtb	r6, r6
 80024be:	1ac0      	subs	r0, r0, r3
 80024c0:	6963      	ldr	r3, [r4, #20]
 80024c2:	4637      	mov	r7, r6
 80024c4:	4283      	cmp	r3, r0
 80024c6:	dc04      	bgt.n	80024d2 <__swbuf_r+0x42>
 80024c8:	4621      	mov	r1, r4
 80024ca:	4628      	mov	r0, r5
 80024cc:	f000 f92e 	bl	800272c <_fflush_r>
 80024d0:	bb28      	cbnz	r0, 800251e <__swbuf_r+0x8e>
 80024d2:	68a3      	ldr	r3, [r4, #8]
 80024d4:	3001      	adds	r0, #1
 80024d6:	3b01      	subs	r3, #1
 80024d8:	60a3      	str	r3, [r4, #8]
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	6022      	str	r2, [r4, #0]
 80024e0:	701e      	strb	r6, [r3, #0]
 80024e2:	6963      	ldr	r3, [r4, #20]
 80024e4:	4283      	cmp	r3, r0
 80024e6:	d004      	beq.n	80024f2 <__swbuf_r+0x62>
 80024e8:	89a3      	ldrh	r3, [r4, #12]
 80024ea:	07db      	lsls	r3, r3, #31
 80024ec:	d519      	bpl.n	8002522 <__swbuf_r+0x92>
 80024ee:	2e0a      	cmp	r6, #10
 80024f0:	d117      	bne.n	8002522 <__swbuf_r+0x92>
 80024f2:	4621      	mov	r1, r4
 80024f4:	4628      	mov	r0, r5
 80024f6:	f000 f919 	bl	800272c <_fflush_r>
 80024fa:	b190      	cbz	r0, 8002522 <__swbuf_r+0x92>
 80024fc:	e00f      	b.n	800251e <__swbuf_r+0x8e>
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <__swbuf_r+0x9c>)
 8002500:	429c      	cmp	r4, r3
 8002502:	d101      	bne.n	8002508 <__swbuf_r+0x78>
 8002504:	68ac      	ldr	r4, [r5, #8]
 8002506:	e7d0      	b.n	80024aa <__swbuf_r+0x1a>
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <__swbuf_r+0xa0>)
 800250a:	429c      	cmp	r4, r3
 800250c:	bf08      	it	eq
 800250e:	68ec      	ldreq	r4, [r5, #12]
 8002510:	e7cb      	b.n	80024aa <__swbuf_r+0x1a>
 8002512:	4621      	mov	r1, r4
 8002514:	4628      	mov	r0, r5
 8002516:	f000 f80d 	bl	8002534 <__swsetup_r>
 800251a:	2800      	cmp	r0, #0
 800251c:	d0cc      	beq.n	80024b8 <__swbuf_r+0x28>
 800251e:	f04f 37ff 	mov.w	r7, #4294967295
 8002522:	4638      	mov	r0, r7
 8002524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002526:	bf00      	nop
 8002528:	08002f44 	.word	0x08002f44
 800252c:	08002f64 	.word	0x08002f64
 8002530:	08002f24 	.word	0x08002f24

08002534 <__swsetup_r>:
 8002534:	4b32      	ldr	r3, [pc, #200]	; (8002600 <__swsetup_r+0xcc>)
 8002536:	b570      	push	{r4, r5, r6, lr}
 8002538:	681d      	ldr	r5, [r3, #0]
 800253a:	4606      	mov	r6, r0
 800253c:	460c      	mov	r4, r1
 800253e:	b125      	cbz	r5, 800254a <__swsetup_r+0x16>
 8002540:	69ab      	ldr	r3, [r5, #24]
 8002542:	b913      	cbnz	r3, 800254a <__swsetup_r+0x16>
 8002544:	4628      	mov	r0, r5
 8002546:	f000 f95b 	bl	8002800 <__sinit>
 800254a:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <__swsetup_r+0xd0>)
 800254c:	429c      	cmp	r4, r3
 800254e:	d10f      	bne.n	8002570 <__swsetup_r+0x3c>
 8002550:	686c      	ldr	r4, [r5, #4]
 8002552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002556:	b29a      	uxth	r2, r3
 8002558:	0715      	lsls	r5, r2, #28
 800255a:	d42c      	bmi.n	80025b6 <__swsetup_r+0x82>
 800255c:	06d0      	lsls	r0, r2, #27
 800255e:	d411      	bmi.n	8002584 <__swsetup_r+0x50>
 8002560:	2209      	movs	r2, #9
 8002562:	6032      	str	r2, [r6, #0]
 8002564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002568:	81a3      	strh	r3, [r4, #12]
 800256a:	f04f 30ff 	mov.w	r0, #4294967295
 800256e:	e03e      	b.n	80025ee <__swsetup_r+0xba>
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <__swsetup_r+0xd4>)
 8002572:	429c      	cmp	r4, r3
 8002574:	d101      	bne.n	800257a <__swsetup_r+0x46>
 8002576:	68ac      	ldr	r4, [r5, #8]
 8002578:	e7eb      	b.n	8002552 <__swsetup_r+0x1e>
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <__swsetup_r+0xd8>)
 800257c:	429c      	cmp	r4, r3
 800257e:	bf08      	it	eq
 8002580:	68ec      	ldreq	r4, [r5, #12]
 8002582:	e7e6      	b.n	8002552 <__swsetup_r+0x1e>
 8002584:	0751      	lsls	r1, r2, #29
 8002586:	d512      	bpl.n	80025ae <__swsetup_r+0x7a>
 8002588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800258a:	b141      	cbz	r1, 800259e <__swsetup_r+0x6a>
 800258c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002590:	4299      	cmp	r1, r3
 8002592:	d002      	beq.n	800259a <__swsetup_r+0x66>
 8002594:	4630      	mov	r0, r6
 8002596:	f000 fa2f 	bl	80029f8 <_free_r>
 800259a:	2300      	movs	r3, #0
 800259c:	6363      	str	r3, [r4, #52]	; 0x34
 800259e:	89a3      	ldrh	r3, [r4, #12]
 80025a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80025a4:	81a3      	strh	r3, [r4, #12]
 80025a6:	2300      	movs	r3, #0
 80025a8:	6063      	str	r3, [r4, #4]
 80025aa:	6923      	ldr	r3, [r4, #16]
 80025ac:	6023      	str	r3, [r4, #0]
 80025ae:	89a3      	ldrh	r3, [r4, #12]
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	81a3      	strh	r3, [r4, #12]
 80025b6:	6923      	ldr	r3, [r4, #16]
 80025b8:	b94b      	cbnz	r3, 80025ce <__swsetup_r+0x9a>
 80025ba:	89a3      	ldrh	r3, [r4, #12]
 80025bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80025c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c4:	d003      	beq.n	80025ce <__swsetup_r+0x9a>
 80025c6:	4621      	mov	r1, r4
 80025c8:	4630      	mov	r0, r6
 80025ca:	f000 f9c7 	bl	800295c <__smakebuf_r>
 80025ce:	89a2      	ldrh	r2, [r4, #12]
 80025d0:	f012 0301 	ands.w	r3, r2, #1
 80025d4:	d00c      	beq.n	80025f0 <__swsetup_r+0xbc>
 80025d6:	2300      	movs	r3, #0
 80025d8:	60a3      	str	r3, [r4, #8]
 80025da:	6963      	ldr	r3, [r4, #20]
 80025dc:	425b      	negs	r3, r3
 80025de:	61a3      	str	r3, [r4, #24]
 80025e0:	6923      	ldr	r3, [r4, #16]
 80025e2:	b953      	cbnz	r3, 80025fa <__swsetup_r+0xc6>
 80025e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80025ec:	d1ba      	bne.n	8002564 <__swsetup_r+0x30>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	0792      	lsls	r2, r2, #30
 80025f2:	bf58      	it	pl
 80025f4:	6963      	ldrpl	r3, [r4, #20]
 80025f6:	60a3      	str	r3, [r4, #8]
 80025f8:	e7f2      	b.n	80025e0 <__swsetup_r+0xac>
 80025fa:	2000      	movs	r0, #0
 80025fc:	e7f7      	b.n	80025ee <__swsetup_r+0xba>
 80025fe:	bf00      	nop
 8002600:	20000068 	.word	0x20000068
 8002604:	08002f44 	.word	0x08002f44
 8002608:	08002f64 	.word	0x08002f64
 800260c:	08002f24 	.word	0x08002f24

08002610 <abort>:
 8002610:	b508      	push	{r3, lr}
 8002612:	2006      	movs	r0, #6
 8002614:	f000 face 	bl	8002bb4 <raise>
 8002618:	2001      	movs	r0, #1
 800261a:	f7ff fafb 	bl	8001c14 <_exit>
	...

08002620 <__sflush_r>:
 8002620:	898a      	ldrh	r2, [r1, #12]
 8002622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002626:	4605      	mov	r5, r0
 8002628:	0710      	lsls	r0, r2, #28
 800262a:	460c      	mov	r4, r1
 800262c:	d458      	bmi.n	80026e0 <__sflush_r+0xc0>
 800262e:	684b      	ldr	r3, [r1, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	dc05      	bgt.n	8002640 <__sflush_r+0x20>
 8002634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	dc02      	bgt.n	8002640 <__sflush_r+0x20>
 800263a:	2000      	movs	r0, #0
 800263c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002642:	2e00      	cmp	r6, #0
 8002644:	d0f9      	beq.n	800263a <__sflush_r+0x1a>
 8002646:	2300      	movs	r3, #0
 8002648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800264c:	682f      	ldr	r7, [r5, #0]
 800264e:	6a21      	ldr	r1, [r4, #32]
 8002650:	602b      	str	r3, [r5, #0]
 8002652:	d032      	beq.n	80026ba <__sflush_r+0x9a>
 8002654:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002656:	89a3      	ldrh	r3, [r4, #12]
 8002658:	075a      	lsls	r2, r3, #29
 800265a:	d505      	bpl.n	8002668 <__sflush_r+0x48>
 800265c:	6863      	ldr	r3, [r4, #4]
 800265e:	1ac0      	subs	r0, r0, r3
 8002660:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002662:	b10b      	cbz	r3, 8002668 <__sflush_r+0x48>
 8002664:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002666:	1ac0      	subs	r0, r0, r3
 8002668:	2300      	movs	r3, #0
 800266a:	4602      	mov	r2, r0
 800266c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800266e:	6a21      	ldr	r1, [r4, #32]
 8002670:	4628      	mov	r0, r5
 8002672:	47b0      	blx	r6
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	89a3      	ldrh	r3, [r4, #12]
 8002678:	d106      	bne.n	8002688 <__sflush_r+0x68>
 800267a:	6829      	ldr	r1, [r5, #0]
 800267c:	291d      	cmp	r1, #29
 800267e:	d848      	bhi.n	8002712 <__sflush_r+0xf2>
 8002680:	4a29      	ldr	r2, [pc, #164]	; (8002728 <__sflush_r+0x108>)
 8002682:	40ca      	lsrs	r2, r1
 8002684:	07d6      	lsls	r6, r2, #31
 8002686:	d544      	bpl.n	8002712 <__sflush_r+0xf2>
 8002688:	2200      	movs	r2, #0
 800268a:	6062      	str	r2, [r4, #4]
 800268c:	6922      	ldr	r2, [r4, #16]
 800268e:	04d9      	lsls	r1, r3, #19
 8002690:	6022      	str	r2, [r4, #0]
 8002692:	d504      	bpl.n	800269e <__sflush_r+0x7e>
 8002694:	1c42      	adds	r2, r0, #1
 8002696:	d101      	bne.n	800269c <__sflush_r+0x7c>
 8002698:	682b      	ldr	r3, [r5, #0]
 800269a:	b903      	cbnz	r3, 800269e <__sflush_r+0x7e>
 800269c:	6560      	str	r0, [r4, #84]	; 0x54
 800269e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026a0:	602f      	str	r7, [r5, #0]
 80026a2:	2900      	cmp	r1, #0
 80026a4:	d0c9      	beq.n	800263a <__sflush_r+0x1a>
 80026a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026aa:	4299      	cmp	r1, r3
 80026ac:	d002      	beq.n	80026b4 <__sflush_r+0x94>
 80026ae:	4628      	mov	r0, r5
 80026b0:	f000 f9a2 	bl	80029f8 <_free_r>
 80026b4:	2000      	movs	r0, #0
 80026b6:	6360      	str	r0, [r4, #52]	; 0x34
 80026b8:	e7c0      	b.n	800263c <__sflush_r+0x1c>
 80026ba:	2301      	movs	r3, #1
 80026bc:	4628      	mov	r0, r5
 80026be:	47b0      	blx	r6
 80026c0:	1c41      	adds	r1, r0, #1
 80026c2:	d1c8      	bne.n	8002656 <__sflush_r+0x36>
 80026c4:	682b      	ldr	r3, [r5, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0c5      	beq.n	8002656 <__sflush_r+0x36>
 80026ca:	2b1d      	cmp	r3, #29
 80026cc:	d001      	beq.n	80026d2 <__sflush_r+0xb2>
 80026ce:	2b16      	cmp	r3, #22
 80026d0:	d101      	bne.n	80026d6 <__sflush_r+0xb6>
 80026d2:	602f      	str	r7, [r5, #0]
 80026d4:	e7b1      	b.n	800263a <__sflush_r+0x1a>
 80026d6:	89a3      	ldrh	r3, [r4, #12]
 80026d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026dc:	81a3      	strh	r3, [r4, #12]
 80026de:	e7ad      	b.n	800263c <__sflush_r+0x1c>
 80026e0:	690f      	ldr	r7, [r1, #16]
 80026e2:	2f00      	cmp	r7, #0
 80026e4:	d0a9      	beq.n	800263a <__sflush_r+0x1a>
 80026e6:	0793      	lsls	r3, r2, #30
 80026e8:	bf18      	it	ne
 80026ea:	2300      	movne	r3, #0
 80026ec:	680e      	ldr	r6, [r1, #0]
 80026ee:	bf08      	it	eq
 80026f0:	694b      	ldreq	r3, [r1, #20]
 80026f2:	eba6 0807 	sub.w	r8, r6, r7
 80026f6:	600f      	str	r7, [r1, #0]
 80026f8:	608b      	str	r3, [r1, #8]
 80026fa:	f1b8 0f00 	cmp.w	r8, #0
 80026fe:	dd9c      	ble.n	800263a <__sflush_r+0x1a>
 8002700:	4643      	mov	r3, r8
 8002702:	463a      	mov	r2, r7
 8002704:	6a21      	ldr	r1, [r4, #32]
 8002706:	4628      	mov	r0, r5
 8002708:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800270a:	47b0      	blx	r6
 800270c:	2800      	cmp	r0, #0
 800270e:	dc06      	bgt.n	800271e <__sflush_r+0xfe>
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002716:	81a3      	strh	r3, [r4, #12]
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	e78e      	b.n	800263c <__sflush_r+0x1c>
 800271e:	4407      	add	r7, r0
 8002720:	eba8 0800 	sub.w	r8, r8, r0
 8002724:	e7e9      	b.n	80026fa <__sflush_r+0xda>
 8002726:	bf00      	nop
 8002728:	20400001 	.word	0x20400001

0800272c <_fflush_r>:
 800272c:	b538      	push	{r3, r4, r5, lr}
 800272e:	690b      	ldr	r3, [r1, #16]
 8002730:	4605      	mov	r5, r0
 8002732:	460c      	mov	r4, r1
 8002734:	b1db      	cbz	r3, 800276e <_fflush_r+0x42>
 8002736:	b118      	cbz	r0, 8002740 <_fflush_r+0x14>
 8002738:	6983      	ldr	r3, [r0, #24]
 800273a:	b90b      	cbnz	r3, 8002740 <_fflush_r+0x14>
 800273c:	f000 f860 	bl	8002800 <__sinit>
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <_fflush_r+0x48>)
 8002742:	429c      	cmp	r4, r3
 8002744:	d109      	bne.n	800275a <_fflush_r+0x2e>
 8002746:	686c      	ldr	r4, [r5, #4]
 8002748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800274c:	b17b      	cbz	r3, 800276e <_fflush_r+0x42>
 800274e:	4621      	mov	r1, r4
 8002750:	4628      	mov	r0, r5
 8002752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002756:	f7ff bf63 	b.w	8002620 <__sflush_r>
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <_fflush_r+0x4c>)
 800275c:	429c      	cmp	r4, r3
 800275e:	d101      	bne.n	8002764 <_fflush_r+0x38>
 8002760:	68ac      	ldr	r4, [r5, #8]
 8002762:	e7f1      	b.n	8002748 <_fflush_r+0x1c>
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <_fflush_r+0x50>)
 8002766:	429c      	cmp	r4, r3
 8002768:	bf08      	it	eq
 800276a:	68ec      	ldreq	r4, [r5, #12]
 800276c:	e7ec      	b.n	8002748 <_fflush_r+0x1c>
 800276e:	2000      	movs	r0, #0
 8002770:	bd38      	pop	{r3, r4, r5, pc}
 8002772:	bf00      	nop
 8002774:	08002f44 	.word	0x08002f44
 8002778:	08002f64 	.word	0x08002f64
 800277c:	08002f24 	.word	0x08002f24

08002780 <std>:
 8002780:	2300      	movs	r3, #0
 8002782:	b510      	push	{r4, lr}
 8002784:	4604      	mov	r4, r0
 8002786:	e9c0 3300 	strd	r3, r3, [r0]
 800278a:	6083      	str	r3, [r0, #8]
 800278c:	8181      	strh	r1, [r0, #12]
 800278e:	6643      	str	r3, [r0, #100]	; 0x64
 8002790:	81c2      	strh	r2, [r0, #14]
 8002792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002796:	6183      	str	r3, [r0, #24]
 8002798:	4619      	mov	r1, r3
 800279a:	2208      	movs	r2, #8
 800279c:	305c      	adds	r0, #92	; 0x5c
 800279e:	f7ff fba9 	bl	8001ef4 <memset>
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <std+0x38>)
 80027a4:	6224      	str	r4, [r4, #32]
 80027a6:	6263      	str	r3, [r4, #36]	; 0x24
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <std+0x3c>)
 80027aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <std+0x40>)
 80027ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <std+0x44>)
 80027b2:	6323      	str	r3, [r4, #48]	; 0x30
 80027b4:	bd10      	pop	{r4, pc}
 80027b6:	bf00      	nop
 80027b8:	08002bed 	.word	0x08002bed
 80027bc:	08002c0f 	.word	0x08002c0f
 80027c0:	08002c47 	.word	0x08002c47
 80027c4:	08002c6b 	.word	0x08002c6b

080027c8 <_cleanup_r>:
 80027c8:	4901      	ldr	r1, [pc, #4]	; (80027d0 <_cleanup_r+0x8>)
 80027ca:	f000 b885 	b.w	80028d8 <_fwalk_reent>
 80027ce:	bf00      	nop
 80027d0:	0800272d 	.word	0x0800272d

080027d4 <__sfmoreglue>:
 80027d4:	b570      	push	{r4, r5, r6, lr}
 80027d6:	2568      	movs	r5, #104	; 0x68
 80027d8:	1e4a      	subs	r2, r1, #1
 80027da:	4355      	muls	r5, r2
 80027dc:	460e      	mov	r6, r1
 80027de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80027e2:	f000 f955 	bl	8002a90 <_malloc_r>
 80027e6:	4604      	mov	r4, r0
 80027e8:	b140      	cbz	r0, 80027fc <__sfmoreglue+0x28>
 80027ea:	2100      	movs	r1, #0
 80027ec:	e9c0 1600 	strd	r1, r6, [r0]
 80027f0:	300c      	adds	r0, #12
 80027f2:	60a0      	str	r0, [r4, #8]
 80027f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80027f8:	f7ff fb7c 	bl	8001ef4 <memset>
 80027fc:	4620      	mov	r0, r4
 80027fe:	bd70      	pop	{r4, r5, r6, pc}

08002800 <__sinit>:
 8002800:	6983      	ldr	r3, [r0, #24]
 8002802:	b510      	push	{r4, lr}
 8002804:	4604      	mov	r4, r0
 8002806:	bb33      	cbnz	r3, 8002856 <__sinit+0x56>
 8002808:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800280c:	6503      	str	r3, [r0, #80]	; 0x50
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <__sinit+0x58>)
 8002810:	4a12      	ldr	r2, [pc, #72]	; (800285c <__sinit+0x5c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6282      	str	r2, [r0, #40]	; 0x28
 8002816:	4298      	cmp	r0, r3
 8002818:	bf04      	itt	eq
 800281a:	2301      	moveq	r3, #1
 800281c:	6183      	streq	r3, [r0, #24]
 800281e:	f000 f81f 	bl	8002860 <__sfp>
 8002822:	6060      	str	r0, [r4, #4]
 8002824:	4620      	mov	r0, r4
 8002826:	f000 f81b 	bl	8002860 <__sfp>
 800282a:	60a0      	str	r0, [r4, #8]
 800282c:	4620      	mov	r0, r4
 800282e:	f000 f817 	bl	8002860 <__sfp>
 8002832:	2200      	movs	r2, #0
 8002834:	60e0      	str	r0, [r4, #12]
 8002836:	2104      	movs	r1, #4
 8002838:	6860      	ldr	r0, [r4, #4]
 800283a:	f7ff ffa1 	bl	8002780 <std>
 800283e:	2201      	movs	r2, #1
 8002840:	2109      	movs	r1, #9
 8002842:	68a0      	ldr	r0, [r4, #8]
 8002844:	f7ff ff9c 	bl	8002780 <std>
 8002848:	2202      	movs	r2, #2
 800284a:	2112      	movs	r1, #18
 800284c:	68e0      	ldr	r0, [r4, #12]
 800284e:	f7ff ff97 	bl	8002780 <std>
 8002852:	2301      	movs	r3, #1
 8002854:	61a3      	str	r3, [r4, #24]
 8002856:	bd10      	pop	{r4, pc}
 8002858:	08002eec 	.word	0x08002eec
 800285c:	080027c9 	.word	0x080027c9

08002860 <__sfp>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <__sfp+0x70>)
 8002864:	4607      	mov	r7, r0
 8002866:	681e      	ldr	r6, [r3, #0]
 8002868:	69b3      	ldr	r3, [r6, #24]
 800286a:	b913      	cbnz	r3, 8002872 <__sfp+0x12>
 800286c:	4630      	mov	r0, r6
 800286e:	f7ff ffc7 	bl	8002800 <__sinit>
 8002872:	3648      	adds	r6, #72	; 0x48
 8002874:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002878:	3b01      	subs	r3, #1
 800287a:	d503      	bpl.n	8002884 <__sfp+0x24>
 800287c:	6833      	ldr	r3, [r6, #0]
 800287e:	b133      	cbz	r3, 800288e <__sfp+0x2e>
 8002880:	6836      	ldr	r6, [r6, #0]
 8002882:	e7f7      	b.n	8002874 <__sfp+0x14>
 8002884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002888:	b16d      	cbz	r5, 80028a6 <__sfp+0x46>
 800288a:	3468      	adds	r4, #104	; 0x68
 800288c:	e7f4      	b.n	8002878 <__sfp+0x18>
 800288e:	2104      	movs	r1, #4
 8002890:	4638      	mov	r0, r7
 8002892:	f7ff ff9f 	bl	80027d4 <__sfmoreglue>
 8002896:	6030      	str	r0, [r6, #0]
 8002898:	2800      	cmp	r0, #0
 800289a:	d1f1      	bne.n	8002880 <__sfp+0x20>
 800289c:	230c      	movs	r3, #12
 800289e:	4604      	mov	r4, r0
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	4620      	mov	r0, r4
 80028a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028a6:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <__sfp+0x74>)
 80028a8:	6665      	str	r5, [r4, #100]	; 0x64
 80028aa:	e9c4 5500 	strd	r5, r5, [r4]
 80028ae:	60a5      	str	r5, [r4, #8]
 80028b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80028b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80028b8:	2208      	movs	r2, #8
 80028ba:	4629      	mov	r1, r5
 80028bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80028c0:	f7ff fb18 	bl	8001ef4 <memset>
 80028c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80028c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80028cc:	e7e9      	b.n	80028a2 <__sfp+0x42>
 80028ce:	bf00      	nop
 80028d0:	08002eec 	.word	0x08002eec
 80028d4:	ffff0001 	.word	0xffff0001

080028d8 <_fwalk_reent>:
 80028d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028dc:	4680      	mov	r8, r0
 80028de:	4689      	mov	r9, r1
 80028e0:	2600      	movs	r6, #0
 80028e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80028e6:	b914      	cbnz	r4, 80028ee <_fwalk_reent+0x16>
 80028e8:	4630      	mov	r0, r6
 80028ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80028f2:	3f01      	subs	r7, #1
 80028f4:	d501      	bpl.n	80028fa <_fwalk_reent+0x22>
 80028f6:	6824      	ldr	r4, [r4, #0]
 80028f8:	e7f5      	b.n	80028e6 <_fwalk_reent+0xe>
 80028fa:	89ab      	ldrh	r3, [r5, #12]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d907      	bls.n	8002910 <_fwalk_reent+0x38>
 8002900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002904:	3301      	adds	r3, #1
 8002906:	d003      	beq.n	8002910 <_fwalk_reent+0x38>
 8002908:	4629      	mov	r1, r5
 800290a:	4640      	mov	r0, r8
 800290c:	47c8      	blx	r9
 800290e:	4306      	orrs	r6, r0
 8002910:	3568      	adds	r5, #104	; 0x68
 8002912:	e7ee      	b.n	80028f2 <_fwalk_reent+0x1a>

08002914 <__swhatbuf_r>:
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	460e      	mov	r6, r1
 8002918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800291c:	b096      	sub	sp, #88	; 0x58
 800291e:	2900      	cmp	r1, #0
 8002920:	4614      	mov	r4, r2
 8002922:	461d      	mov	r5, r3
 8002924:	da07      	bge.n	8002936 <__swhatbuf_r+0x22>
 8002926:	2300      	movs	r3, #0
 8002928:	602b      	str	r3, [r5, #0]
 800292a:	89b3      	ldrh	r3, [r6, #12]
 800292c:	061a      	lsls	r2, r3, #24
 800292e:	d410      	bmi.n	8002952 <__swhatbuf_r+0x3e>
 8002930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002934:	e00e      	b.n	8002954 <__swhatbuf_r+0x40>
 8002936:	466a      	mov	r2, sp
 8002938:	f000 f9be 	bl	8002cb8 <_fstat_r>
 800293c:	2800      	cmp	r0, #0
 800293e:	dbf2      	blt.n	8002926 <__swhatbuf_r+0x12>
 8002940:	9a01      	ldr	r2, [sp, #4]
 8002942:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002946:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800294a:	425a      	negs	r2, r3
 800294c:	415a      	adcs	r2, r3
 800294e:	602a      	str	r2, [r5, #0]
 8002950:	e7ee      	b.n	8002930 <__swhatbuf_r+0x1c>
 8002952:	2340      	movs	r3, #64	; 0x40
 8002954:	2000      	movs	r0, #0
 8002956:	6023      	str	r3, [r4, #0]
 8002958:	b016      	add	sp, #88	; 0x58
 800295a:	bd70      	pop	{r4, r5, r6, pc}

0800295c <__smakebuf_r>:
 800295c:	898b      	ldrh	r3, [r1, #12]
 800295e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002960:	079d      	lsls	r5, r3, #30
 8002962:	4606      	mov	r6, r0
 8002964:	460c      	mov	r4, r1
 8002966:	d507      	bpl.n	8002978 <__smakebuf_r+0x1c>
 8002968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800296c:	6023      	str	r3, [r4, #0]
 800296e:	6123      	str	r3, [r4, #16]
 8002970:	2301      	movs	r3, #1
 8002972:	6163      	str	r3, [r4, #20]
 8002974:	b002      	add	sp, #8
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	ab01      	add	r3, sp, #4
 800297a:	466a      	mov	r2, sp
 800297c:	f7ff ffca 	bl	8002914 <__swhatbuf_r>
 8002980:	9900      	ldr	r1, [sp, #0]
 8002982:	4605      	mov	r5, r0
 8002984:	4630      	mov	r0, r6
 8002986:	f000 f883 	bl	8002a90 <_malloc_r>
 800298a:	b948      	cbnz	r0, 80029a0 <__smakebuf_r+0x44>
 800298c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002990:	059a      	lsls	r2, r3, #22
 8002992:	d4ef      	bmi.n	8002974 <__smakebuf_r+0x18>
 8002994:	f023 0303 	bic.w	r3, r3, #3
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	81a3      	strh	r3, [r4, #12]
 800299e:	e7e3      	b.n	8002968 <__smakebuf_r+0xc>
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <__smakebuf_r+0x7c>)
 80029a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80029a4:	89a3      	ldrh	r3, [r4, #12]
 80029a6:	6020      	str	r0, [r4, #0]
 80029a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ac:	81a3      	strh	r3, [r4, #12]
 80029ae:	9b00      	ldr	r3, [sp, #0]
 80029b0:	6120      	str	r0, [r4, #16]
 80029b2:	6163      	str	r3, [r4, #20]
 80029b4:	9b01      	ldr	r3, [sp, #4]
 80029b6:	b15b      	cbz	r3, 80029d0 <__smakebuf_r+0x74>
 80029b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029bc:	4630      	mov	r0, r6
 80029be:	f000 f98d 	bl	8002cdc <_isatty_r>
 80029c2:	b128      	cbz	r0, 80029d0 <__smakebuf_r+0x74>
 80029c4:	89a3      	ldrh	r3, [r4, #12]
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	81a3      	strh	r3, [r4, #12]
 80029d0:	89a3      	ldrh	r3, [r4, #12]
 80029d2:	431d      	orrs	r5, r3
 80029d4:	81a5      	strh	r5, [r4, #12]
 80029d6:	e7cd      	b.n	8002974 <__smakebuf_r+0x18>
 80029d8:	080027c9 	.word	0x080027c9

080029dc <memchr>:
 80029dc:	b510      	push	{r4, lr}
 80029de:	b2c9      	uxtb	r1, r1
 80029e0:	4402      	add	r2, r0
 80029e2:	4290      	cmp	r0, r2
 80029e4:	4603      	mov	r3, r0
 80029e6:	d101      	bne.n	80029ec <memchr+0x10>
 80029e8:	2300      	movs	r3, #0
 80029ea:	e003      	b.n	80029f4 <memchr+0x18>
 80029ec:	781c      	ldrb	r4, [r3, #0]
 80029ee:	3001      	adds	r0, #1
 80029f0:	428c      	cmp	r4, r1
 80029f2:	d1f6      	bne.n	80029e2 <memchr+0x6>
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd10      	pop	{r4, pc}

080029f8 <_free_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4605      	mov	r5, r0
 80029fc:	2900      	cmp	r1, #0
 80029fe:	d043      	beq.n	8002a88 <_free_r+0x90>
 8002a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a04:	1f0c      	subs	r4, r1, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bfb8      	it	lt
 8002a0a:	18e4      	addlt	r4, r4, r3
 8002a0c:	f000 f988 	bl	8002d20 <__malloc_lock>
 8002a10:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <_free_r+0x94>)
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	4610      	mov	r0, r2
 8002a16:	b933      	cbnz	r3, 8002a26 <_free_r+0x2e>
 8002a18:	6063      	str	r3, [r4, #4]
 8002a1a:	6014      	str	r4, [r2, #0]
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a22:	f000 b97e 	b.w	8002d22 <__malloc_unlock>
 8002a26:	42a3      	cmp	r3, r4
 8002a28:	d90b      	bls.n	8002a42 <_free_r+0x4a>
 8002a2a:	6821      	ldr	r1, [r4, #0]
 8002a2c:	1862      	adds	r2, r4, r1
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	bf01      	itttt	eq
 8002a32:	681a      	ldreq	r2, [r3, #0]
 8002a34:	685b      	ldreq	r3, [r3, #4]
 8002a36:	1852      	addeq	r2, r2, r1
 8002a38:	6022      	streq	r2, [r4, #0]
 8002a3a:	6063      	str	r3, [r4, #4]
 8002a3c:	6004      	str	r4, [r0, #0]
 8002a3e:	e7ed      	b.n	8002a1c <_free_r+0x24>
 8002a40:	4613      	mov	r3, r2
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	b10a      	cbz	r2, 8002a4a <_free_r+0x52>
 8002a46:	42a2      	cmp	r2, r4
 8002a48:	d9fa      	bls.n	8002a40 <_free_r+0x48>
 8002a4a:	6819      	ldr	r1, [r3, #0]
 8002a4c:	1858      	adds	r0, r3, r1
 8002a4e:	42a0      	cmp	r0, r4
 8002a50:	d10b      	bne.n	8002a6a <_free_r+0x72>
 8002a52:	6820      	ldr	r0, [r4, #0]
 8002a54:	4401      	add	r1, r0
 8002a56:	1858      	adds	r0, r3, r1
 8002a58:	4282      	cmp	r2, r0
 8002a5a:	6019      	str	r1, [r3, #0]
 8002a5c:	d1de      	bne.n	8002a1c <_free_r+0x24>
 8002a5e:	6810      	ldr	r0, [r2, #0]
 8002a60:	6852      	ldr	r2, [r2, #4]
 8002a62:	4401      	add	r1, r0
 8002a64:	6019      	str	r1, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	e7d8      	b.n	8002a1c <_free_r+0x24>
 8002a6a:	d902      	bls.n	8002a72 <_free_r+0x7a>
 8002a6c:	230c      	movs	r3, #12
 8002a6e:	602b      	str	r3, [r5, #0]
 8002a70:	e7d4      	b.n	8002a1c <_free_r+0x24>
 8002a72:	6820      	ldr	r0, [r4, #0]
 8002a74:	1821      	adds	r1, r4, r0
 8002a76:	428a      	cmp	r2, r1
 8002a78:	bf01      	itttt	eq
 8002a7a:	6811      	ldreq	r1, [r2, #0]
 8002a7c:	6852      	ldreq	r2, [r2, #4]
 8002a7e:	1809      	addeq	r1, r1, r0
 8002a80:	6021      	streq	r1, [r4, #0]
 8002a82:	6062      	str	r2, [r4, #4]
 8002a84:	605c      	str	r4, [r3, #4]
 8002a86:	e7c9      	b.n	8002a1c <_free_r+0x24>
 8002a88:	bd38      	pop	{r3, r4, r5, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200009a4 	.word	0x200009a4

08002a90 <_malloc_r>:
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	1ccd      	adds	r5, r1, #3
 8002a94:	f025 0503 	bic.w	r5, r5, #3
 8002a98:	3508      	adds	r5, #8
 8002a9a:	2d0c      	cmp	r5, #12
 8002a9c:	bf38      	it	cc
 8002a9e:	250c      	movcc	r5, #12
 8002aa0:	2d00      	cmp	r5, #0
 8002aa2:	4606      	mov	r6, r0
 8002aa4:	db01      	blt.n	8002aaa <_malloc_r+0x1a>
 8002aa6:	42a9      	cmp	r1, r5
 8002aa8:	d903      	bls.n	8002ab2 <_malloc_r+0x22>
 8002aaa:	230c      	movs	r3, #12
 8002aac:	6033      	str	r3, [r6, #0]
 8002aae:	2000      	movs	r0, #0
 8002ab0:	bd70      	pop	{r4, r5, r6, pc}
 8002ab2:	f000 f935 	bl	8002d20 <__malloc_lock>
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <_malloc_r+0xac>)
 8002ab8:	6814      	ldr	r4, [r2, #0]
 8002aba:	4621      	mov	r1, r4
 8002abc:	b991      	cbnz	r1, 8002ae4 <_malloc_r+0x54>
 8002abe:	4c20      	ldr	r4, [pc, #128]	; (8002b40 <_malloc_r+0xb0>)
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	b91b      	cbnz	r3, 8002acc <_malloc_r+0x3c>
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	f000 f83d 	bl	8002b44 <_sbrk_r>
 8002aca:	6020      	str	r0, [r4, #0]
 8002acc:	4629      	mov	r1, r5
 8002ace:	4630      	mov	r0, r6
 8002ad0:	f000 f838 	bl	8002b44 <_sbrk_r>
 8002ad4:	1c43      	adds	r3, r0, #1
 8002ad6:	d124      	bne.n	8002b22 <_malloc_r+0x92>
 8002ad8:	230c      	movs	r3, #12
 8002ada:	4630      	mov	r0, r6
 8002adc:	6033      	str	r3, [r6, #0]
 8002ade:	f000 f920 	bl	8002d22 <__malloc_unlock>
 8002ae2:	e7e4      	b.n	8002aae <_malloc_r+0x1e>
 8002ae4:	680b      	ldr	r3, [r1, #0]
 8002ae6:	1b5b      	subs	r3, r3, r5
 8002ae8:	d418      	bmi.n	8002b1c <_malloc_r+0x8c>
 8002aea:	2b0b      	cmp	r3, #11
 8002aec:	d90f      	bls.n	8002b0e <_malloc_r+0x7e>
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	18cc      	adds	r4, r1, r3
 8002af2:	50cd      	str	r5, [r1, r3]
 8002af4:	4630      	mov	r0, r6
 8002af6:	f000 f914 	bl	8002d22 <__malloc_unlock>
 8002afa:	f104 000b 	add.w	r0, r4, #11
 8002afe:	1d23      	adds	r3, r4, #4
 8002b00:	f020 0007 	bic.w	r0, r0, #7
 8002b04:	1ac3      	subs	r3, r0, r3
 8002b06:	d0d3      	beq.n	8002ab0 <_malloc_r+0x20>
 8002b08:	425a      	negs	r2, r3
 8002b0a:	50e2      	str	r2, [r4, r3]
 8002b0c:	e7d0      	b.n	8002ab0 <_malloc_r+0x20>
 8002b0e:	684b      	ldr	r3, [r1, #4]
 8002b10:	428c      	cmp	r4, r1
 8002b12:	bf16      	itet	ne
 8002b14:	6063      	strne	r3, [r4, #4]
 8002b16:	6013      	streq	r3, [r2, #0]
 8002b18:	460c      	movne	r4, r1
 8002b1a:	e7eb      	b.n	8002af4 <_malloc_r+0x64>
 8002b1c:	460c      	mov	r4, r1
 8002b1e:	6849      	ldr	r1, [r1, #4]
 8002b20:	e7cc      	b.n	8002abc <_malloc_r+0x2c>
 8002b22:	1cc4      	adds	r4, r0, #3
 8002b24:	f024 0403 	bic.w	r4, r4, #3
 8002b28:	42a0      	cmp	r0, r4
 8002b2a:	d005      	beq.n	8002b38 <_malloc_r+0xa8>
 8002b2c:	1a21      	subs	r1, r4, r0
 8002b2e:	4630      	mov	r0, r6
 8002b30:	f000 f808 	bl	8002b44 <_sbrk_r>
 8002b34:	3001      	adds	r0, #1
 8002b36:	d0cf      	beq.n	8002ad8 <_malloc_r+0x48>
 8002b38:	6025      	str	r5, [r4, #0]
 8002b3a:	e7db      	b.n	8002af4 <_malloc_r+0x64>
 8002b3c:	200009a4 	.word	0x200009a4
 8002b40:	200009a8 	.word	0x200009a8

08002b44 <_sbrk_r>:
 8002b44:	b538      	push	{r3, r4, r5, lr}
 8002b46:	2300      	movs	r3, #0
 8002b48:	4c05      	ldr	r4, [pc, #20]	; (8002b60 <_sbrk_r+0x1c>)
 8002b4a:	4605      	mov	r5, r0
 8002b4c:	4608      	mov	r0, r1
 8002b4e:	6023      	str	r3, [r4, #0]
 8002b50:	f7ff f874 	bl	8001c3c <_sbrk>
 8002b54:	1c43      	adds	r3, r0, #1
 8002b56:	d102      	bne.n	8002b5e <_sbrk_r+0x1a>
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	b103      	cbz	r3, 8002b5e <_sbrk_r+0x1a>
 8002b5c:	602b      	str	r3, [r5, #0]
 8002b5e:	bd38      	pop	{r3, r4, r5, pc}
 8002b60:	20000af4 	.word	0x20000af4

08002b64 <_raise_r>:
 8002b64:	291f      	cmp	r1, #31
 8002b66:	b538      	push	{r3, r4, r5, lr}
 8002b68:	4604      	mov	r4, r0
 8002b6a:	460d      	mov	r5, r1
 8002b6c:	d904      	bls.n	8002b78 <_raise_r+0x14>
 8002b6e:	2316      	movs	r3, #22
 8002b70:	6003      	str	r3, [r0, #0]
 8002b72:	f04f 30ff 	mov.w	r0, #4294967295
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
 8002b78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b7a:	b112      	cbz	r2, 8002b82 <_raise_r+0x1e>
 8002b7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002b80:	b94b      	cbnz	r3, 8002b96 <_raise_r+0x32>
 8002b82:	4620      	mov	r0, r4
 8002b84:	f000 f830 	bl	8002be8 <_getpid_r>
 8002b88:	462a      	mov	r2, r5
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b92:	f000 b817 	b.w	8002bc4 <_kill_r>
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d00a      	beq.n	8002bb0 <_raise_r+0x4c>
 8002b9a:	1c59      	adds	r1, r3, #1
 8002b9c:	d103      	bne.n	8002ba6 <_raise_r+0x42>
 8002b9e:	2316      	movs	r3, #22
 8002ba0:	6003      	str	r3, [r0, #0]
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	e7e7      	b.n	8002b76 <_raise_r+0x12>
 8002ba6:	2400      	movs	r4, #0
 8002ba8:	4628      	mov	r0, r5
 8002baa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002bae:	4798      	blx	r3
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	e7e0      	b.n	8002b76 <_raise_r+0x12>

08002bb4 <raise>:
 8002bb4:	4b02      	ldr	r3, [pc, #8]	; (8002bc0 <raise+0xc>)
 8002bb6:	4601      	mov	r1, r0
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	f7ff bfd3 	b.w	8002b64 <_raise_r>
 8002bbe:	bf00      	nop
 8002bc0:	20000068 	.word	0x20000068

08002bc4 <_kill_r>:
 8002bc4:	b538      	push	{r3, r4, r5, lr}
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	4c06      	ldr	r4, [pc, #24]	; (8002be4 <_kill_r+0x20>)
 8002bca:	4605      	mov	r5, r0
 8002bcc:	4608      	mov	r0, r1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	6023      	str	r3, [r4, #0]
 8002bd2:	f7ff f817 	bl	8001c04 <_kill>
 8002bd6:	1c43      	adds	r3, r0, #1
 8002bd8:	d102      	bne.n	8002be0 <_kill_r+0x1c>
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	b103      	cbz	r3, 8002be0 <_kill_r+0x1c>
 8002bde:	602b      	str	r3, [r5, #0]
 8002be0:	bd38      	pop	{r3, r4, r5, pc}
 8002be2:	bf00      	nop
 8002be4:	20000af4 	.word	0x20000af4

08002be8 <_getpid_r>:
 8002be8:	f7ff b80a 	b.w	8001c00 <_getpid>

08002bec <__sread>:
 8002bec:	b510      	push	{r4, lr}
 8002bee:	460c      	mov	r4, r1
 8002bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bf4:	f000 f896 	bl	8002d24 <_read_r>
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	bfab      	itete	ge
 8002bfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bfe:	89a3      	ldrhlt	r3, [r4, #12]
 8002c00:	181b      	addge	r3, r3, r0
 8002c02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c06:	bfac      	ite	ge
 8002c08:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c0a:	81a3      	strhlt	r3, [r4, #12]
 8002c0c:	bd10      	pop	{r4, pc}

08002c0e <__swrite>:
 8002c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c12:	461f      	mov	r7, r3
 8002c14:	898b      	ldrh	r3, [r1, #12]
 8002c16:	4605      	mov	r5, r0
 8002c18:	05db      	lsls	r3, r3, #23
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	4616      	mov	r6, r2
 8002c1e:	d505      	bpl.n	8002c2c <__swrite+0x1e>
 8002c20:	2302      	movs	r3, #2
 8002c22:	2200      	movs	r2, #0
 8002c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c28:	f000 f868 	bl	8002cfc <_lseek_r>
 8002c2c:	89a3      	ldrh	r3, [r4, #12]
 8002c2e:	4632      	mov	r2, r6
 8002c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c34:	81a3      	strh	r3, [r4, #12]
 8002c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c3a:	463b      	mov	r3, r7
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c42:	f000 b817 	b.w	8002c74 <_write_r>

08002c46 <__sseek>:
 8002c46:	b510      	push	{r4, lr}
 8002c48:	460c      	mov	r4, r1
 8002c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c4e:	f000 f855 	bl	8002cfc <_lseek_r>
 8002c52:	1c43      	adds	r3, r0, #1
 8002c54:	89a3      	ldrh	r3, [r4, #12]
 8002c56:	bf15      	itete	ne
 8002c58:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c62:	81a3      	strheq	r3, [r4, #12]
 8002c64:	bf18      	it	ne
 8002c66:	81a3      	strhne	r3, [r4, #12]
 8002c68:	bd10      	pop	{r4, pc}

08002c6a <__sclose>:
 8002c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c6e:	f000 b813 	b.w	8002c98 <_close_r>
	...

08002c74 <_write_r>:
 8002c74:	b538      	push	{r3, r4, r5, lr}
 8002c76:	4605      	mov	r5, r0
 8002c78:	4608      	mov	r0, r1
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4c05      	ldr	r4, [pc, #20]	; (8002c94 <_write_r+0x20>)
 8002c80:	6022      	str	r2, [r4, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f7ff f85c 	bl	8001d40 <_write>
 8002c88:	1c43      	adds	r3, r0, #1
 8002c8a:	d102      	bne.n	8002c92 <_write_r+0x1e>
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	b103      	cbz	r3, 8002c92 <_write_r+0x1e>
 8002c90:	602b      	str	r3, [r5, #0]
 8002c92:	bd38      	pop	{r3, r4, r5, pc}
 8002c94:	20000af4 	.word	0x20000af4

08002c98 <_close_r>:
 8002c98:	b538      	push	{r3, r4, r5, lr}
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	4c05      	ldr	r4, [pc, #20]	; (8002cb4 <_close_r+0x1c>)
 8002c9e:	4605      	mov	r5, r0
 8002ca0:	4608      	mov	r0, r1
 8002ca2:	6023      	str	r3, [r4, #0]
 8002ca4:	f7fe ffe8 	bl	8001c78 <_close>
 8002ca8:	1c43      	adds	r3, r0, #1
 8002caa:	d102      	bne.n	8002cb2 <_close_r+0x1a>
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	b103      	cbz	r3, 8002cb2 <_close_r+0x1a>
 8002cb0:	602b      	str	r3, [r5, #0]
 8002cb2:	bd38      	pop	{r3, r4, r5, pc}
 8002cb4:	20000af4 	.word	0x20000af4

08002cb8 <_fstat_r>:
 8002cb8:	b538      	push	{r3, r4, r5, lr}
 8002cba:	2300      	movs	r3, #0
 8002cbc:	4c06      	ldr	r4, [pc, #24]	; (8002cd8 <_fstat_r+0x20>)
 8002cbe:	4605      	mov	r5, r0
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	6023      	str	r3, [r4, #0]
 8002cc6:	f7fe ffda 	bl	8001c7e <_fstat>
 8002cca:	1c43      	adds	r3, r0, #1
 8002ccc:	d102      	bne.n	8002cd4 <_fstat_r+0x1c>
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	b103      	cbz	r3, 8002cd4 <_fstat_r+0x1c>
 8002cd2:	602b      	str	r3, [r5, #0]
 8002cd4:	bd38      	pop	{r3, r4, r5, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000af4 	.word	0x20000af4

08002cdc <_isatty_r>:
 8002cdc:	b538      	push	{r3, r4, r5, lr}
 8002cde:	2300      	movs	r3, #0
 8002ce0:	4c05      	ldr	r4, [pc, #20]	; (8002cf8 <_isatty_r+0x1c>)
 8002ce2:	4605      	mov	r5, r0
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	6023      	str	r3, [r4, #0]
 8002ce8:	f7fe ffce 	bl	8001c88 <_isatty>
 8002cec:	1c43      	adds	r3, r0, #1
 8002cee:	d102      	bne.n	8002cf6 <_isatty_r+0x1a>
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	b103      	cbz	r3, 8002cf6 <_isatty_r+0x1a>
 8002cf4:	602b      	str	r3, [r5, #0]
 8002cf6:	bd38      	pop	{r3, r4, r5, pc}
 8002cf8:	20000af4 	.word	0x20000af4

08002cfc <_lseek_r>:
 8002cfc:	b538      	push	{r3, r4, r5, lr}
 8002cfe:	4605      	mov	r5, r0
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	2200      	movs	r2, #0
 8002d06:	4c05      	ldr	r4, [pc, #20]	; (8002d1c <_lseek_r+0x20>)
 8002d08:	6022      	str	r2, [r4, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f7fe ffbe 	bl	8001c8c <_lseek>
 8002d10:	1c43      	adds	r3, r0, #1
 8002d12:	d102      	bne.n	8002d1a <_lseek_r+0x1e>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	b103      	cbz	r3, 8002d1a <_lseek_r+0x1e>
 8002d18:	602b      	str	r3, [r5, #0]
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
 8002d1c:	20000af4 	.word	0x20000af4

08002d20 <__malloc_lock>:
 8002d20:	4770      	bx	lr

08002d22 <__malloc_unlock>:
 8002d22:	4770      	bx	lr

08002d24 <_read_r>:
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	4605      	mov	r5, r0
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4c05      	ldr	r4, [pc, #20]	; (8002d44 <_read_r+0x20>)
 8002d30:	6022      	str	r2, [r4, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f7fe ff74 	bl	8001c20 <_read>
 8002d38:	1c43      	adds	r3, r0, #1
 8002d3a:	d102      	bne.n	8002d42 <_read_r+0x1e>
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	b103      	cbz	r3, 8002d42 <_read_r+0x1e>
 8002d40:	602b      	str	r3, [r5, #0]
 8002d42:	bd38      	pop	{r3, r4, r5, pc}
 8002d44:	20000af4 	.word	0x20000af4

08002d48 <_init>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	bf00      	nop
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr

08002d54 <_fini>:
 8002d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d56:	bf00      	nop
 8002d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5a:	bc08      	pop	{r3}
 8002d5c:	469e      	mov	lr, r3
 8002d5e:	4770      	bx	lr
